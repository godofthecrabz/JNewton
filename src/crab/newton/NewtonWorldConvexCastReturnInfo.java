// Generated by jextract

package crab.newton;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * struct NewtonWorldConvexCastReturnInfo {
 *     float m_point[4];
 *     float m_normal[4];
 *     long long m_contactID;
 *     struct NewtonBody* m_hitBody;
 *     float m_penetration;
 * };
 * }
 */
public class NewtonWorldConvexCastReturnInfo {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_point"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_normal"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("m_contactID"),
        Constants$root.C_POINTER$LAYOUT.withName("m_hitBody"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_penetration"),
        MemoryLayout.paddingLayout(32)
    ).withName("NewtonWorldConvexCastReturnInfo");
    public static MemoryLayout $LAYOUT() {
        return NewtonWorldConvexCastReturnInfo.$struct$LAYOUT;
    }
    public static MemorySegment m_point$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment m_normal$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle m_contactID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_contactID"));
    public static VarHandle m_contactID$VH() {
        return NewtonWorldConvexCastReturnInfo.m_contactID$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long m_contactID;
     * }
     */
    public static long m_contactID$get(MemorySegment seg) {
        return (long)NewtonWorldConvexCastReturnInfo.m_contactID$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long m_contactID;
     * }
     */
    public static void m_contactID$set(MemorySegment seg, long x) {
        NewtonWorldConvexCastReturnInfo.m_contactID$VH.set(seg, x);
    }
    public static long m_contactID$get(MemorySegment seg, long index) {
        return (long)NewtonWorldConvexCastReturnInfo.m_contactID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_contactID$set(MemorySegment seg, long index, long x) {
        NewtonWorldConvexCastReturnInfo.m_contactID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_hitBody$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_hitBody"));
    public static VarHandle m_hitBody$VH() {
        return NewtonWorldConvexCastReturnInfo.m_hitBody$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct NewtonBody* m_hitBody;
     * }
     */
    public static MemorySegment m_hitBody$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonWorldConvexCastReturnInfo.m_hitBody$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct NewtonBody* m_hitBody;
     * }
     */
    public static void m_hitBody$set(MemorySegment seg, MemorySegment x) {
        NewtonWorldConvexCastReturnInfo.m_hitBody$VH.set(seg, x);
    }
    public static MemorySegment m_hitBody$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonWorldConvexCastReturnInfo.m_hitBody$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_hitBody$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonWorldConvexCastReturnInfo.m_hitBody$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_penetration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_penetration"));
    public static VarHandle m_penetration$VH() {
        return NewtonWorldConvexCastReturnInfo.m_penetration$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float m_penetration;
     * }
     */
    public static float m_penetration$get(MemorySegment seg) {
        return (float)NewtonWorldConvexCastReturnInfo.m_penetration$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float m_penetration;
     * }
     */
    public static void m_penetration$set(MemorySegment seg, float x) {
        NewtonWorldConvexCastReturnInfo.m_penetration$VH.set(seg, x);
    }
    public static float m_penetration$get(MemorySegment seg, long index) {
        return (float)NewtonWorldConvexCastReturnInfo.m_penetration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_penetration$set(MemorySegment seg, long index, float x) {
        NewtonWorldConvexCastReturnInfo.m_penetration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


