package crab.newton;// Generated by jextract

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;

public class NewtonUserMeshCollisionCollideDesc {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_boxP0"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_boxP1"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_boxDistanceTravel"),
        Constants$root.C_LONG$LAYOUT.withName("m_threadNumber"),
        Constants$root.C_LONG$LAYOUT.withName("m_faceCount"),
        Constants$root.C_LONG$LAYOUT.withName("m_vertexStrideInBytes"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_skinThickness"),
        Constants$root.C_POINTER$LAYOUT.withName("m_userData"),
        Constants$root.C_POINTER$LAYOUT.withName("m_objBody"),
        Constants$root.C_POINTER$LAYOUT.withName("m_polySoupBody"),
        Constants$root.C_POINTER$LAYOUT.withName("m_objCollision"),
        Constants$root.C_POINTER$LAYOUT.withName("m_polySoupCollision"),
        Constants$root.C_POINTER$LAYOUT.withName("m_vertex"),
        Constants$root.C_POINTER$LAYOUT.withName("m_faceIndexCount"),
        Constants$root.C_POINTER$LAYOUT.withName("m_faceVertexIndex")
    ).withName("crab.newton.NewtonUserMeshCollisionCollideDesc");
    public static MemoryLayout $LAYOUT() {
        return NewtonUserMeshCollisionCollideDesc.$struct$LAYOUT;
    }
    public static MemorySegment m_boxP0$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment m_boxP1$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment m_boxDistanceTravel$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    static final VarHandle m_threadNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_threadNumber"));
    public static VarHandle m_threadNumber$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_threadNumber$VH;
    }
    public static int m_threadNumber$get(MemorySegment seg) {
        return (int)NewtonUserMeshCollisionCollideDesc.m_threadNumber$VH.get(seg);
    }
    public static void m_threadNumber$set( MemorySegment seg, int x) {
        NewtonUserMeshCollisionCollideDesc.m_threadNumber$VH.set(seg, x);
    }
    public static int m_threadNumber$get(MemorySegment seg, long index) {
        return (int)NewtonUserMeshCollisionCollideDesc.m_threadNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_threadNumber$set(MemorySegment seg, long index, int x) {
        NewtonUserMeshCollisionCollideDesc.m_threadNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_faceCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceCount"));
    public static VarHandle m_faceCount$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_faceCount$VH;
    }
    public static int m_faceCount$get(MemorySegment seg) {
        return (int)NewtonUserMeshCollisionCollideDesc.m_faceCount$VH.get(seg);
    }
    public static void m_faceCount$set( MemorySegment seg, int x) {
        NewtonUserMeshCollisionCollideDesc.m_faceCount$VH.set(seg, x);
    }
    public static int m_faceCount$get(MemorySegment seg, long index) {
        return (int)NewtonUserMeshCollisionCollideDesc.m_faceCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceCount$set(MemorySegment seg, long index, int x) {
        NewtonUserMeshCollisionCollideDesc.m_faceCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_vertexStrideInBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vertexStrideInBytes"));
    public static VarHandle m_vertexStrideInBytes$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_vertexStrideInBytes$VH;
    }
    public static int m_vertexStrideInBytes$get(MemorySegment seg) {
        return (int)NewtonUserMeshCollisionCollideDesc.m_vertexStrideInBytes$VH.get(seg);
    }
    public static void m_vertexStrideInBytes$set( MemorySegment seg, int x) {
        NewtonUserMeshCollisionCollideDesc.m_vertexStrideInBytes$VH.set(seg, x);
    }
    public static int m_vertexStrideInBytes$get(MemorySegment seg, long index) {
        return (int)NewtonUserMeshCollisionCollideDesc.m_vertexStrideInBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vertexStrideInBytes$set(MemorySegment seg, long index, int x) {
        NewtonUserMeshCollisionCollideDesc.m_vertexStrideInBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_skinThickness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_skinThickness"));
    public static VarHandle m_skinThickness$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_skinThickness$VH;
    }
    public static float m_skinThickness$get(MemorySegment seg) {
        return (float)NewtonUserMeshCollisionCollideDesc.m_skinThickness$VH.get(seg);
    }
    public static void m_skinThickness$set( MemorySegment seg, float x) {
        NewtonUserMeshCollisionCollideDesc.m_skinThickness$VH.set(seg, x);
    }
    public static float m_skinThickness$get(MemorySegment seg, long index) {
        return (float)NewtonUserMeshCollisionCollideDesc.m_skinThickness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_skinThickness$set(MemorySegment seg, long index, float x) {
        NewtonUserMeshCollisionCollideDesc.m_skinThickness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_userData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_userData"));
    public static VarHandle m_userData$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_userData$VH;
    }
    public static MemoryAddress m_userData$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_userData$VH.get(seg);
    }
    public static void m_userData$set( MemorySegment seg, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_userData$VH.set(seg, x);
    }
    public static MemoryAddress m_userData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_userData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_userData$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_userData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_objBody$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_objBody"));
    public static VarHandle m_objBody$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_objBody$VH;
    }
    public static MemoryAddress m_objBody$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_objBody$VH.get(seg);
    }
    public static void m_objBody$set( MemorySegment seg, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_objBody$VH.set(seg, x);
    }
    public static MemoryAddress m_objBody$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_objBody$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_objBody$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_objBody$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_polySoupBody$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_polySoupBody"));
    public static VarHandle m_polySoupBody$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_polySoupBody$VH;
    }
    public static MemoryAddress m_polySoupBody$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_polySoupBody$VH.get(seg);
    }
    public static void m_polySoupBody$set( MemorySegment seg, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_polySoupBody$VH.set(seg, x);
    }
    public static MemoryAddress m_polySoupBody$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_polySoupBody$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_polySoupBody$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_polySoupBody$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_objCollision$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_objCollision"));
    public static VarHandle m_objCollision$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_objCollision$VH;
    }
    public static MemoryAddress m_objCollision$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_objCollision$VH.get(seg);
    }
    public static void m_objCollision$set( MemorySegment seg, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_objCollision$VH.set(seg, x);
    }
    public static MemoryAddress m_objCollision$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_objCollision$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_objCollision$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_objCollision$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_polySoupCollision$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_polySoupCollision"));
    public static VarHandle m_polySoupCollision$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_polySoupCollision$VH;
    }
    public static MemoryAddress m_polySoupCollision$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_polySoupCollision$VH.get(seg);
    }
    public static void m_polySoupCollision$set( MemorySegment seg, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_polySoupCollision$VH.set(seg, x);
    }
    public static MemoryAddress m_polySoupCollision$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_polySoupCollision$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_polySoupCollision$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_polySoupCollision$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_vertex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vertex"));
    public static VarHandle m_vertex$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_vertex$VH;
    }
    public static MemoryAddress m_vertex$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_vertex$VH.get(seg);
    }
    public static void m_vertex$set( MemorySegment seg, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_vertex$VH.set(seg, x);
    }
    public static MemoryAddress m_vertex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_vertex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vertex$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_vertex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_faceIndexCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceIndexCount"));
    public static VarHandle m_faceIndexCount$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_faceIndexCount$VH;
    }
    public static MemoryAddress m_faceIndexCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_faceIndexCount$VH.get(seg);
    }
    public static void m_faceIndexCount$set( MemorySegment seg, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_faceIndexCount$VH.set(seg, x);
    }
    public static MemoryAddress m_faceIndexCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_faceIndexCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceIndexCount$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_faceIndexCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_faceVertexIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceVertexIndex"));
    public static VarHandle m_faceVertexIndex$VH() {
        return NewtonUserMeshCollisionCollideDesc.m_faceVertexIndex$VH;
    }
    public static MemoryAddress m_faceVertexIndex$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_faceVertexIndex$VH.get(seg);
    }
    public static void m_faceVertexIndex$set( MemorySegment seg, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_faceVertexIndex$VH.set(seg, x);
    }
    public static MemoryAddress m_faceVertexIndex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)NewtonUserMeshCollisionCollideDesc.m_faceVertexIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceVertexIndex$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonUserMeshCollisionCollideDesc.m_faceVertexIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


