// Generated by jextract

package crab.newton;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * struct NewtonJointRecord {
 *     float  m_attachmenMatrix_0[4][4];
 *     float  m_attachmenMatrix_1[4][4];
 *     float m_minLinearDof[3];
 *     float m_maxLinearDof[3];
 *     float m_minAngularDof[3];
 *     float m_maxAngularDof[3];
 *     struct NewtonBody* m_attachBody_0;
 *     struct NewtonBody* m_attachBody_1;
 *     float m_extraParameters[64];
 *     int m_bodiesCollisionOn;
 *     char m_descriptionType[128];
 * };
 * }
 */
public class NewtonJointRecord {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("m_attachmenMatrix_0"),
        MemoryLayout.sequenceLayout(4, MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT)).withName("m_attachmenMatrix_1"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("m_minLinearDof"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("m_maxLinearDof"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("m_minAngularDof"),
        MemoryLayout.sequenceLayout(3, Constants$root.C_FLOAT$LAYOUT).withName("m_maxAngularDof"),
        Constants$root.C_POINTER$LAYOUT.withName("m_attachBody_0"),
        Constants$root.C_POINTER$LAYOUT.withName("m_attachBody_1"),
        MemoryLayout.sequenceLayout(64, Constants$root.C_FLOAT$LAYOUT).withName("m_extraParameters"),
        Constants$root.C_LONG$LAYOUT.withName("m_bodiesCollisionOn"),
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("m_descriptionType"),
        MemoryLayout.paddingLayout(32)
    ).withName("NewtonJointRecord");
    public static MemoryLayout $LAYOUT() {
        return NewtonJointRecord.$struct$LAYOUT;
    }
    public static MemorySegment m_attachmenMatrix_0$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static MemorySegment m_attachmenMatrix_1$slice(MemorySegment seg) {
        return seg.asSlice(64, 64);
    }
    public static MemorySegment m_minLinearDof$slice(MemorySegment seg) {
        return seg.asSlice(128, 12);
    }
    public static MemorySegment m_maxLinearDof$slice(MemorySegment seg) {
        return seg.asSlice(140, 12);
    }
    public static MemorySegment m_minAngularDof$slice(MemorySegment seg) {
        return seg.asSlice(152, 12);
    }
    public static MemorySegment m_maxAngularDof$slice(MemorySegment seg) {
        return seg.asSlice(164, 12);
    }
    static final VarHandle m_attachBody_0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_attachBody_0"));
    public static VarHandle m_attachBody_0$VH() {
        return NewtonJointRecord.m_attachBody_0$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct NewtonBody* m_attachBody_0;
     * }
     */
    public static MemorySegment m_attachBody_0$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonJointRecord.m_attachBody_0$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct NewtonBody* m_attachBody_0;
     * }
     */
    public static void m_attachBody_0$set(MemorySegment seg, MemorySegment x) {
        NewtonJointRecord.m_attachBody_0$VH.set(seg, x);
    }
    public static MemorySegment m_attachBody_0$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonJointRecord.m_attachBody_0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_attachBody_0$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonJointRecord.m_attachBody_0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_attachBody_1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_attachBody_1"));
    public static VarHandle m_attachBody_1$VH() {
        return NewtonJointRecord.m_attachBody_1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct NewtonBody* m_attachBody_1;
     * }
     */
    public static MemorySegment m_attachBody_1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonJointRecord.m_attachBody_1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct NewtonBody* m_attachBody_1;
     * }
     */
    public static void m_attachBody_1$set(MemorySegment seg, MemorySegment x) {
        NewtonJointRecord.m_attachBody_1$VH.set(seg, x);
    }
    public static MemorySegment m_attachBody_1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonJointRecord.m_attachBody_1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_attachBody_1$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonJointRecord.m_attachBody_1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment m_extraParameters$slice(MemorySegment seg) {
        return seg.asSlice(192, 256);
    }
    static final VarHandle m_bodiesCollisionOn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_bodiesCollisionOn"));
    public static VarHandle m_bodiesCollisionOn$VH() {
        return NewtonJointRecord.m_bodiesCollisionOn$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int m_bodiesCollisionOn;
     * }
     */
    public static int m_bodiesCollisionOn$get(MemorySegment seg) {
        return (int)NewtonJointRecord.m_bodiesCollisionOn$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int m_bodiesCollisionOn;
     * }
     */
    public static void m_bodiesCollisionOn$set(MemorySegment seg, int x) {
        NewtonJointRecord.m_bodiesCollisionOn$VH.set(seg, x);
    }
    public static int m_bodiesCollisionOn$get(MemorySegment seg, long index) {
        return (int)NewtonJointRecord.m_bodiesCollisionOn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_bodiesCollisionOn$set(MemorySegment seg, long index, int x) {
        NewtonJointRecord.m_bodiesCollisionOn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment m_descriptionType$slice(MemorySegment seg) {
        return seg.asSlice(452, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


