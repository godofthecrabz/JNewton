// Generated by jextract

package crab.newton;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * struct NewtonDeformableMeshParam {
 *     int m_vertexCount;
 *     int m_triangleCount;
 *     int m_vrtexStrideInBytes;
 *     unsigned short* m_indexList;
 *     float* m_vertexList;
 * };
 * }
 */
public class NewtonDeformableMeshParam {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("m_vertexCount"),
        Constants$root.C_LONG$LAYOUT.withName("m_triangleCount"),
        Constants$root.C_LONG$LAYOUT.withName("m_vrtexStrideInBytes"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
        Constants$root.C_POINTER$LAYOUT.withName("m_vertexList")
    ).withName("NewtonDeformableMeshParam");
    public static MemoryLayout $LAYOUT() {
        return NewtonDeformableMeshParam.$struct$LAYOUT;
    }
    static final VarHandle m_vertexCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vertexCount"));
    public static VarHandle m_vertexCount$VH() {
        return NewtonDeformableMeshParam.m_vertexCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int m_vertexCount;
     * }
     */
    public static int m_vertexCount$get(MemorySegment seg) {
        return (int)NewtonDeformableMeshParam.m_vertexCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int m_vertexCount;
     * }
     */
    public static void m_vertexCount$set(MemorySegment seg, int x) {
        NewtonDeformableMeshParam.m_vertexCount$VH.set(seg, x);
    }
    public static int m_vertexCount$get(MemorySegment seg, long index) {
        return (int)NewtonDeformableMeshParam.m_vertexCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vertexCount$set(MemorySegment seg, long index, int x) {
        NewtonDeformableMeshParam.m_vertexCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_triangleCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_triangleCount"));
    public static VarHandle m_triangleCount$VH() {
        return NewtonDeformableMeshParam.m_triangleCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int m_triangleCount;
     * }
     */
    public static int m_triangleCount$get(MemorySegment seg) {
        return (int)NewtonDeformableMeshParam.m_triangleCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int m_triangleCount;
     * }
     */
    public static void m_triangleCount$set(MemorySegment seg, int x) {
        NewtonDeformableMeshParam.m_triangleCount$VH.set(seg, x);
    }
    public static int m_triangleCount$get(MemorySegment seg, long index) {
        return (int)NewtonDeformableMeshParam.m_triangleCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_triangleCount$set(MemorySegment seg, long index, int x) {
        NewtonDeformableMeshParam.m_triangleCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_vrtexStrideInBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vrtexStrideInBytes"));
    public static VarHandle m_vrtexStrideInBytes$VH() {
        return NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int m_vrtexStrideInBytes;
     * }
     */
    public static int m_vrtexStrideInBytes$get(MemorySegment seg) {
        return (int)NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int m_vrtexStrideInBytes;
     * }
     */
    public static void m_vrtexStrideInBytes$set(MemorySegment seg, int x) {
        NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH.set(seg, x);
    }
    public static int m_vrtexStrideInBytes$get(MemorySegment seg, long index) {
        return (int)NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vrtexStrideInBytes$set(MemorySegment seg, long index, int x) {
        NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_indexList$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_indexList"));
    public static VarHandle m_indexList$VH() {
        return NewtonDeformableMeshParam.m_indexList$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short* m_indexList;
     * }
     */
    public static MemorySegment m_indexList$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonDeformableMeshParam.m_indexList$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short* m_indexList;
     * }
     */
    public static void m_indexList$set(MemorySegment seg, MemorySegment x) {
        NewtonDeformableMeshParam.m_indexList$VH.set(seg, x);
    }
    public static MemorySegment m_indexList$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonDeformableMeshParam.m_indexList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_indexList$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonDeformableMeshParam.m_indexList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_vertexList$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vertexList"));
    public static VarHandle m_vertexList$VH() {
        return NewtonDeformableMeshParam.m_vertexList$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float* m_vertexList;
     * }
     */
    public static MemorySegment m_vertexList$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonDeformableMeshParam.m_vertexList$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float* m_vertexList;
     * }
     */
    public static void m_vertexList$set(MemorySegment seg, MemorySegment x) {
        NewtonDeformableMeshParam.m_vertexList$VH.set(seg, x);
    }
    public static MemorySegment m_vertexList$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonDeformableMeshParam.m_vertexList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vertexList$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonDeformableMeshParam.m_vertexList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


