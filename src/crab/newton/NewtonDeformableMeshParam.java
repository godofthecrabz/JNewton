// Generated by jextract

package crab.newton;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;

import crab.newton.internal.*;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class NewtonDeformableMeshParam {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("m_vertexCount"),
        Constants$root.C_LONG$LAYOUT.withName("m_triangleCount"),
        Constants$root.C_LONG$LAYOUT.withName("m_vrtexStrideInBytes"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
        Constants$root.C_POINTER$LAYOUT.withName("m_vertexList")
    ).withName("NewtonDeformableMeshParam");
    public static MemoryLayout $LAYOUT() {
        return NewtonDeformableMeshParam.$struct$LAYOUT;
    }
    static final VarHandle m_vertexCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vertexCount"));
    public static VarHandle m_vertexCount$VH() {
        return NewtonDeformableMeshParam.m_vertexCount$VH;
    }
    public static int m_vertexCount$get(MemorySegment seg) {
        return (int)NewtonDeformableMeshParam.m_vertexCount$VH.get(seg);
    }
    public static void m_vertexCount$set( MemorySegment seg, int x) {
        NewtonDeformableMeshParam.m_vertexCount$VH.set(seg, x);
    }
    public static int m_vertexCount$get(MemorySegment seg, long index) {
        return (int)NewtonDeformableMeshParam.m_vertexCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vertexCount$set(MemorySegment seg, long index, int x) {
        NewtonDeformableMeshParam.m_vertexCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_triangleCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_triangleCount"));
    public static VarHandle m_triangleCount$VH() {
        return NewtonDeformableMeshParam.m_triangleCount$VH;
    }
    public static int m_triangleCount$get(MemorySegment seg) {
        return (int)NewtonDeformableMeshParam.m_triangleCount$VH.get(seg);
    }
    public static void m_triangleCount$set( MemorySegment seg, int x) {
        NewtonDeformableMeshParam.m_triangleCount$VH.set(seg, x);
    }
    public static int m_triangleCount$get(MemorySegment seg, long index) {
        return (int)NewtonDeformableMeshParam.m_triangleCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_triangleCount$set(MemorySegment seg, long index, int x) {
        NewtonDeformableMeshParam.m_triangleCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_vrtexStrideInBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vrtexStrideInBytes"));
    public static VarHandle m_vrtexStrideInBytes$VH() {
        return NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH;
    }
    public static int m_vrtexStrideInBytes$get(MemorySegment seg) {
        return (int)NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH.get(seg);
    }
    public static void m_vrtexStrideInBytes$set( MemorySegment seg, int x) {
        NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH.set(seg, x);
    }
    public static int m_vrtexStrideInBytes$get(MemorySegment seg, long index) {
        return (int)NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vrtexStrideInBytes$set(MemorySegment seg, long index, int x) {
        NewtonDeformableMeshParam.m_vrtexStrideInBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_indexList$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_indexList"));
    public static VarHandle m_indexList$VH() {
        return NewtonDeformableMeshParam.m_indexList$VH;
    }
    public static MemoryAddress m_indexList$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)NewtonDeformableMeshParam.m_indexList$VH.get(seg);
    }
    public static void m_indexList$set( MemorySegment seg, MemoryAddress x) {
        NewtonDeformableMeshParam.m_indexList$VH.set(seg, x);
    }
    public static MemoryAddress m_indexList$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)NewtonDeformableMeshParam.m_indexList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_indexList$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonDeformableMeshParam.m_indexList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_vertexList$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vertexList"));
    public static VarHandle m_vertexList$VH() {
        return NewtonDeformableMeshParam.m_vertexList$VH;
    }
    public static MemoryAddress m_vertexList$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)NewtonDeformableMeshParam.m_vertexList$VH.get(seg);
    }
    public static void m_vertexList$set( MemorySegment seg, MemoryAddress x) {
        NewtonDeformableMeshParam.m_vertexList$VH.set(seg, x);
    }
    public static MemoryAddress m_vertexList$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)NewtonDeformableMeshParam.m_vertexList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vertexList$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonDeformableMeshParam.m_vertexList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


