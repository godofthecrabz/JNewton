package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonFractureCompoundCollisionOnEmitChunk {

    void apply(java.lang.foreign.MemoryAddress chunkBody, java.lang.foreign.MemoryAddress fracturexChunkMesh, java.lang.foreign.MemoryAddress fracturedCompountCollision);
    static MemorySegment allocate(NewtonFractureCompoundCollisionOnEmitChunk fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonFractureCompoundCollisionOnEmitChunk.class, fi, constants$11.NewtonFractureCompoundCollisionOnEmitChunk$FUNC, session);
    }
    static NewtonFractureCompoundCollisionOnEmitChunk ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _chunkBody, java.lang.foreign.MemoryAddress _fracturexChunkMesh, java.lang.foreign.MemoryAddress _fracturedCompountCollision) -> {
            try {
                constants$11.NewtonFractureCompoundCollisionOnEmitChunk$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_chunkBody, (java.lang.foreign.Addressable)_fracturexChunkMesh, (java.lang.foreign.Addressable)_fracturedCompountCollision);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


