package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonDeserializeCallback {

    void apply(java.lang.foreign.MemoryAddress serializeHandle, java.lang.foreign.MemoryAddress buffer, int size);
    static MemorySegment allocate(NewtonDeserializeCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonDeserializeCallback.class, fi, constants$4.NewtonDeserializeCallback$FUNC, session);
    }
    static NewtonDeserializeCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _serializeHandle, java.lang.foreign.MemoryAddress _buffer, int _size) -> {
            try {
                constants$4.NewtonDeserializeCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_serializeHandle, (java.lang.foreign.Addressable)_buffer, _size);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


