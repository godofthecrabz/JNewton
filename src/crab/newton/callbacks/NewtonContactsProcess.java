// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * void (*NewtonContactsProcess)(struct NewtonJoint* contact,float timestep,int threadIndex);
 * }
 */
public interface NewtonContactsProcess {

    void apply(java.lang.foreign.MemorySegment userJoint, float timestep, int threadIndex);
    static MemorySegment allocate(NewtonContactsProcess fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$13.NewtonContactsProcess_UP$MH, fi, constants$13.NewtonContactsProcess$FUNC, scope);
    }
    static NewtonContactsProcess ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _userJoint, float _timestep, int _threadIndex) -> {
            try {
                constants$13.NewtonContactsProcess_DOWN$MH.invokeExact(symbol, _userJoint, _timestep, _threadIndex);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


