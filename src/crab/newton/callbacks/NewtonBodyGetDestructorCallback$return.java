// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * void (*NewtonBodyGetDestructorCallback$return)(struct NewtonBody*);
 * }
 */
public interface NewtonBodyGetDestructorCallback$return {

    void apply(java.lang.foreign.MemorySegment me);
    static MemorySegment allocate(NewtonBodyGetDestructorCallback$return fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$85.NewtonBodyGetDestructorCallback$return_UP$MH, fi, constants$85.NewtonBodyGetDestructorCallback$return$FUNC, scope);
    }
    static NewtonBodyGetDestructorCallback$return ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _me) -> {
            try {
                constants$85.NewtonBodyGetDestructorCallback$return_DOWN$MH.invokeExact(symbol, _me);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


