// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * int (*NewtonTreeCollisionFaceCallback)(void* context,float* polygon,int strideInBytes,int* indexArray,int indexCount);
 * }
 */
public interface NewtonTreeCollisionFaceCallback {

    int apply(java.lang.foreign.MemorySegment context, java.lang.foreign.MemorySegment polygon, int strideInBytes, java.lang.foreign.MemorySegment indexArray, int indexCount);
    static MemorySegment allocate(NewtonTreeCollisionFaceCallback fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$8.NewtonTreeCollisionFaceCallback_UP$MH, fi, constants$8.NewtonTreeCollisionFaceCallback$FUNC, scope);
    }
    static NewtonTreeCollisionFaceCallback ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _context, java.lang.foreign.MemorySegment _polygon, int _strideInBytes, java.lang.foreign.MemorySegment _indexArray, int _indexCount) -> {
            try {
                return (int)constants$8.NewtonTreeCollisionFaceCallback_DOWN$MH.invokeExact(symbol, _context, _polygon, _strideInBytes, _indexArray, _indexCount);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


