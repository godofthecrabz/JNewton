// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * void (*NewtonCollisionIterator)(void* userData,int vertexCount,float* faceArray,int faceId);
 * }
 */
public interface NewtonCollisionIterator {

    void apply(java.lang.foreign.MemorySegment userData, int vertexCount, java.lang.foreign.MemorySegment faceArray, int faceId);
    static MemorySegment allocate(NewtonCollisionIterator fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$15.NewtonCollisionIterator_UP$MH, fi, constants$15.NewtonCollisionIterator$FUNC, scope);
    }
    static NewtonCollisionIterator ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _userData, int _vertexCount, java.lang.foreign.MemorySegment _faceArray, int _faceId) -> {
            try {
                constants$15.NewtonCollisionIterator_DOWN$MH.invokeExact(symbol, _userData, _vertexCount, _faceArray, _faceId);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


