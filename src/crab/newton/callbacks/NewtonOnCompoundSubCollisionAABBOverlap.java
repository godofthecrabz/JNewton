// Generated by jextract

package crab.newton.callbacks;

import crab.newton.internal.*;
import jdk.incubator.foreign.*;
public interface NewtonOnCompoundSubCollisionAABBOverlap {

    int apply(jdk.incubator.foreign.MemoryAddress x0, float x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6);
    static NativeSymbol allocate(NewtonOnCompoundSubCollisionAABBOverlap fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(NewtonOnCompoundSubCollisionAABBOverlap.class, fi, constants$13.NewtonOnCompoundSubCollisionAABBOverlap$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;FLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
    }
    static NewtonOnCompoundSubCollisionAABBOverlap ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("NewtonOnCompoundSubCollisionAABBOverlap::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, float x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6) -> {
            try {
                return (int)constants$13.NewtonOnCompoundSubCollisionAABBOverlap$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, x1, (jdk.incubator.foreign.Addressable)x2, (jdk.incubator.foreign.Addressable)x3, (jdk.incubator.foreign.Addressable)x4, (jdk.incubator.foreign.Addressable)x5, x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


