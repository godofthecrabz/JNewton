package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonBallCallback {

    void apply(java.lang.foreign.MemoryAddress ball, float timestep);
    static MemorySegment allocate(NewtonBallCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonBallCallback.class, fi, constants$15.NewtonBallCallback$FUNC, session);
    }
    static NewtonBallCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _ball, float _timestep) -> {
            try {
                constants$15.NewtonBallCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_ball, _timestep);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


