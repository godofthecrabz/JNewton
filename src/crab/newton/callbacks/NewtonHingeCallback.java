package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonHingeCallback {

    int apply(java.lang.foreign.MemoryAddress hinge, java.lang.foreign.MemoryAddress desc);
    static MemorySegment allocate(NewtonHingeCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonHingeCallback.class, fi, constants$15.NewtonHingeCallback$FUNC, session);
    }
    static NewtonHingeCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _hinge, java.lang.foreign.MemoryAddress _desc) -> {
            try {
                return (int)constants$15.NewtonHingeCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_hinge, (java.lang.foreign.Addressable)_desc);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


