// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * int (*NewtonSetIslandUpdateEvent$islandUpdate)(struct NewtonWorld*,void*,int);
 * }
 */
public interface NewtonSetIslandUpdateEvent$islandUpdate {

    int apply(java.lang.foreign.MemorySegment newtonWorld, java.lang.foreign.MemorySegment islandHandle, int bodyCount);
    static MemorySegment allocate(NewtonSetIslandUpdateEvent$islandUpdate fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$32.NewtonSetIslandUpdateEvent$islandUpdate_UP$MH, fi, constants$32.NewtonSetIslandUpdateEvent$islandUpdate$FUNC, scope);
    }
    static NewtonSetIslandUpdateEvent$islandUpdate ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _newtonWorld, java.lang.foreign.MemorySegment _islandHandle, int _bodyCount) -> {
            try {
                return (int)constants$32.NewtonSetIslandUpdateEvent$islandUpdate_DOWN$MH.invokeExact(symbol, _newtonWorld, _islandHandle, _bodyCount);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


