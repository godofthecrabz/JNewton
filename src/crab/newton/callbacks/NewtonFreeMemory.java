// Generated by jextract

package crab.newton.callbacks;

import crab.newton.internal.*;
import jdk.incubator.foreign.*;
public interface NewtonFreeMemory {

    void apply(jdk.incubator.foreign.MemoryAddress x0, int x1);
    static NativeSymbol allocate(NewtonFreeMemory fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(NewtonFreeMemory.class, fi, constants$0.NewtonFreeMemory$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;I)V", scope);
    }
    static NewtonFreeMemory ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("NewtonFreeMemory::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, int x1) -> {
            try {
                constants$0.NewtonFreeMemory$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


