// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * void* (*NewtonSetMemorySystem$malloc)(int);
 * }
 */
public interface NewtonSetMemorySystem$malloc {

    java.lang.foreign.MemorySegment apply(int sizeInBytes);
    static MemorySegment allocate(NewtonSetMemorySystem$malloc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$19.NewtonSetMemorySystem$malloc_UP$MH, fi, constants$19.NewtonSetMemorySystem$malloc$FUNC, scope);
    }
    static NewtonSetMemorySystem$malloc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (int _sizeInBytes) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$19.NewtonSetMemorySystem$malloc_DOWN$MH.invokeExact(symbol, _sizeInBytes);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


