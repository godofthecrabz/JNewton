// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * unsigned int (*NewtonHingeSetUserCallback$callback)(struct NewtonJoint*,struct NewtonHingeSliderUpdateDesc*);
 * }
 */
public interface NewtonHingeSetUserCallback$callback {

    int apply(java.lang.foreign.MemorySegment corkscrew, java.lang.foreign.MemorySegment desc);
    static MemorySegment allocate(NewtonHingeSetUserCallback$callback fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$100.NewtonHingeSetUserCallback$callback_UP$MH, fi, constants$100.NewtonHingeSetUserCallback$callback$FUNC, scope);
    }
    static NewtonHingeSetUserCallback$callback ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _corkscrew, java.lang.foreign.MemorySegment _desc) -> {
            try {
                return (int)constants$100.NewtonHingeSetUserCallback$callback_DOWN$MH.invokeExact(symbol, _corkscrew, _desc);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


