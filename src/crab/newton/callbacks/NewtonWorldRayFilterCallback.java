package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonWorldRayFilterCallback {

    float apply(java.lang.foreign.MemoryAddress body, java.lang.foreign.MemoryAddress shapeHit, java.lang.foreign.MemoryAddress hitContact, java.lang.foreign.MemoryAddress hitNormal, long collisionID, java.lang.foreign.MemoryAddress userData, float intersectParam);
    static MemorySegment allocate(NewtonWorldRayFilterCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonWorldRayFilterCallback.class, fi, constants$12.NewtonWorldRayFilterCallback$FUNC, session);
    }
    static NewtonWorldRayFilterCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _body, java.lang.foreign.MemoryAddress _shapeHit, java.lang.foreign.MemoryAddress _hitContact, java.lang.foreign.MemoryAddress _hitNormal, long _collisionID, java.lang.foreign.MemoryAddress _userData, float _intersectParam) -> {
            try {
                return (float)constants$12.NewtonWorldRayFilterCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_body, (java.lang.foreign.Addressable)_shapeHit, (java.lang.foreign.Addressable)_hitContact, (java.lang.foreign.Addressable)_hitNormal, _collisionID, (java.lang.foreign.Addressable)_userData, _intersectParam);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


