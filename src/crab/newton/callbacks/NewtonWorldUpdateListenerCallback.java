package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonWorldUpdateListenerCallback {

    void apply(java.lang.foreign.MemoryAddress world, java.lang.foreign.MemoryAddress listenerUserData, float timestep);
    static MemorySegment allocate(NewtonWorldUpdateListenerCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonWorldUpdateListenerCallback.class, fi, constants$2.NewtonWorldUpdateListenerCallback$FUNC, session);
    }
    static NewtonWorldUpdateListenerCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _world, java.lang.foreign.MemoryAddress _listenerUserData, float _timestep) -> {
            try {
                constants$2.NewtonWorldUpdateListenerCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_world, (java.lang.foreign.Addressable)_listenerUserData, _timestep);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


