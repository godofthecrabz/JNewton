// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * int (*NewtonMeshApproximateConvexDecomposition$reportProgressCallback)(float,void*);
 * }
 */
public interface NewtonMeshApproximateConvexDecomposition$reportProgressCallback {

    int apply(float normalizedProgressPercent, java.lang.foreign.MemorySegment userData);
    static MemorySegment allocate(NewtonMeshApproximateConvexDecomposition$reportProgressCallback fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$117.NewtonMeshApproximateConvexDecomposition$reportProgressCallback_UP$MH, fi, constants$117.NewtonMeshApproximateConvexDecomposition$reportProgressCallback$FUNC, scope);
    }
    static NewtonMeshApproximateConvexDecomposition$reportProgressCallback ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (float _normalizedProgressPercent, java.lang.foreign.MemorySegment _userData) -> {
            try {
                return (int)constants$118.NewtonMeshApproximateConvexDecomposition$reportProgressCallback_DOWN$MH.invokeExact(symbol, _normalizedProgressPercent, _userData);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


