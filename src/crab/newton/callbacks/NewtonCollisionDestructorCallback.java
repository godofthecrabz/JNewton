package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonCollisionDestructorCallback {

    void apply(java.lang.foreign.MemoryAddress newtonWorld, java.lang.foreign.MemoryAddress collision);
    static MemorySegment allocate(NewtonCollisionDestructorCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonCollisionDestructorCallback.class, fi, constants$9.NewtonCollisionDestructorCallback$FUNC, session);
    }
    static NewtonCollisionDestructorCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _newtonWorld, java.lang.foreign.MemoryAddress _collision) -> {
            try {
                constants$9.NewtonCollisionDestructorCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_newtonWorld, (java.lang.foreign.Addressable)_collision);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


