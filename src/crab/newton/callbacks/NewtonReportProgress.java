// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * int (*NewtonReportProgress)(float normalizedProgressPercent,void* userData);
 * }
 */
public interface NewtonReportProgress {

    int apply(float normalizedProgressPercent, java.lang.foreign.MemorySegment userData);
    static MemorySegment allocate(NewtonReportProgress fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$18.NewtonReportProgress_UP$MH, fi, constants$18.NewtonReportProgress$FUNC, scope);
    }
    static NewtonReportProgress ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (float _normalizedProgressPercent, java.lang.foreign.MemorySegment _userData) -> {
            try {
                return (int)constants$18.NewtonReportProgress_DOWN$MH.invokeExact(symbol, _normalizedProgressPercent, _userData);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


