package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonAllocMemory {

    java.lang.foreign.Addressable apply(int sizeInBytes);
    static MemorySegment allocate(NewtonAllocMemory fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonAllocMemory.class, fi, constants$0.NewtonAllocMemory$FUNC, session);
    }
    static NewtonAllocMemory ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _sizeInBytes) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$0.NewtonAllocMemory$MH.invokeExact((Addressable)symbol, _sizeInBytes);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


