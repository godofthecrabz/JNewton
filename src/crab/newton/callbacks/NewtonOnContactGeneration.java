package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonOnContactGeneration {

    int apply(java.lang.foreign.MemoryAddress material, java.lang.foreign.MemoryAddress body0, java.lang.foreign.MemoryAddress collision0, java.lang.foreign.MemoryAddress body1, java.lang.foreign.MemoryAddress collision1, java.lang.foreign.MemoryAddress contactBuffer, int maxCount, int threadIndex);
    static MemorySegment allocate(NewtonOnContactGeneration fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonOnContactGeneration.class, fi, constants$14.NewtonOnContactGeneration$FUNC, session);
    }
    static NewtonOnContactGeneration ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _material, java.lang.foreign.MemoryAddress _body0, java.lang.foreign.MemoryAddress _collision0, java.lang.foreign.MemoryAddress _body1, java.lang.foreign.MemoryAddress _collision1, java.lang.foreign.MemoryAddress _contactBuffer, int _maxCount, int _threadIndex) -> {
            try {
                return (int)constants$14.NewtonOnContactGeneration$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_material, (java.lang.foreign.Addressable)_body0, (java.lang.foreign.Addressable)_collision0, (java.lang.foreign.Addressable)_body1, (java.lang.foreign.Addressable)_collision1, (java.lang.foreign.Addressable)_contactBuffer, _maxCount, _threadIndex);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


