// Generated by jextract

package crab.newton.callbacks;

import crab.newton.internal.*;
import jdk.incubator.foreign.*;
public interface NewtonHeightFieldRayCastCallback {

    float apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, float x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6, jdk.incubator.foreign.MemoryAddress x7);
    static NativeSymbol allocate(NewtonHeightFieldRayCastCallback fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(NewtonHeightFieldRayCastCallback.class, fi, constants$8.NewtonHeightFieldRayCastCallback$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;FIILjdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)F", scope);
    }
    static NewtonHeightFieldRayCastCallback ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("NewtonHeightFieldRayCastCallback::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, float x2, int x3, int x4, jdk.incubator.foreign.MemoryAddress x5, int x6, jdk.incubator.foreign.MemoryAddress x7) -> {
            try {
                return (float)constants$8.NewtonHeightFieldRayCastCallback$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0, (jdk.incubator.foreign.Addressable)x1, x2, x3, x4, (jdk.incubator.foreign.Addressable)x5, x6, (jdk.incubator.foreign.Addressable)x7);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


