// Generated by jextract

package crab.newton.callbacks;

import crab.newton.internal.*;
import jdk.incubator.foreign.*;
public interface NewtonFractureCompoundCollisionOnEmitCompoundFractured {

    void apply(jdk.incubator.foreign.MemoryAddress x0);
    static NativeSymbol allocate(NewtonFractureCompoundCollisionOnEmitCompoundFractured fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(NewtonFractureCompoundCollisionOnEmitCompoundFractured.class, fi, constants$11.NewtonFractureCompoundCollisionOnEmitCompoundFractured$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static NewtonFractureCompoundCollisionOnEmitCompoundFractured ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("NewtonFractureCompoundCollisionOnEmitCompoundFractured::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
            try {
                constants$11.NewtonFractureCompoundCollisionOnEmitCompoundFractured$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


