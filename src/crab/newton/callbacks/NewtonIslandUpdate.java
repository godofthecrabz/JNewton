// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * int (*NewtonIslandUpdate)(struct NewtonWorld* newtonWorld,void* islandHandle,int bodyCount);
 * }
 */
public interface NewtonIslandUpdate {

    int apply(java.lang.foreign.MemorySegment newtonWorld, java.lang.foreign.MemorySegment islandHandle, int bodyCount);
    static MemorySegment allocate(NewtonIslandUpdate fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$11.NewtonIslandUpdate_UP$MH, fi, constants$11.NewtonIslandUpdate$FUNC, scope);
    }
    static NewtonIslandUpdate ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _newtonWorld, java.lang.foreign.MemorySegment _islandHandle, int _bodyCount) -> {
            try {
                return (int)constants$11.NewtonIslandUpdate_DOWN$MH.invokeExact(symbol, _newtonWorld, _islandHandle, _bodyCount);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


