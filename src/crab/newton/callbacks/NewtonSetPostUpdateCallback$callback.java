// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * void (*NewtonSetPostUpdateCallback$callback)(struct NewtonWorld*,float);
 * }
 */
public interface NewtonSetPostUpdateCallback$callback {

    void apply(java.lang.foreign.MemorySegment ball, float timestep);
    static MemorySegment allocate(NewtonSetPostUpdateCallback$callback fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$21.NewtonSetPostUpdateCallback$callback_UP$MH, fi, constants$21.NewtonSetPostUpdateCallback$callback$FUNC, scope);
    }
    static NewtonSetPostUpdateCallback$callback ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _ball, float _timestep) -> {
            try {
                constants$21.NewtonSetPostUpdateCallback$callback_DOWN$MH.invokeExact(symbol, _ball, _timestep);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


