package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonSetTransform {

    void apply(java.lang.foreign.MemoryAddress body, java.lang.foreign.MemoryAddress matrix, int threadIndex);
    static MemorySegment allocate(NewtonSetTransform fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonSetTransform.class, fi, constants$10.NewtonSetTransform$FUNC, session);
    }
    static NewtonSetTransform ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _body, java.lang.foreign.MemoryAddress _matrix, int _threadIndex) -> {
            try {
                constants$10.NewtonSetTransform$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_body, (java.lang.foreign.Addressable)_matrix, _threadIndex);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


