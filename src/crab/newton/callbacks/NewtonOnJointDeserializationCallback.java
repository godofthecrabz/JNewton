package crab.newton.callbacks;// Generated by jextract

import java.lang.foreign.*;
import crab.newton.internal.*;

public interface NewtonOnJointDeserializationCallback {

    void apply(java.lang.foreign.MemoryAddress body0, java.lang.foreign.MemoryAddress body1, java.lang.foreign.MemoryAddress function, java.lang.foreign.MemoryAddress serializeHandle);
    static MemorySegment allocate(NewtonOnJointDeserializationCallback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(NewtonOnJointDeserializationCallback.class, fi, constants$5.NewtonOnJointDeserializationCallback$FUNC, session);
    }
    static NewtonOnJointDeserializationCallback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _body0, java.lang.foreign.MemoryAddress _body1, java.lang.foreign.MemoryAddress _function, java.lang.foreign.MemoryAddress _serializeHandle) -> {
            try {
                constants$5.NewtonOnJointDeserializationCallback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_body0, (java.lang.foreign.Addressable)_body1, (java.lang.foreign.Addressable)_function, (java.lang.foreign.Addressable)_serializeHandle);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


