// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * void (*NewtonWorldSetCollisionConstructorDestructorCallback$constructor)(struct NewtonWorld*,struct NewtonCollision*,struct NewtonCollision*);
 * }
 */
public interface NewtonWorldSetCollisionConstructorDestructorCallback$constructor {

    void apply(java.lang.foreign.MemorySegment body, java.lang.foreign.MemorySegment mainMesh, java.lang.foreign.MemorySegment fracturedCompountCollision);
    static MemorySegment allocate(NewtonWorldSetCollisionConstructorDestructorCallback$constructor fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$39.NewtonWorldSetCollisionConstructorDestructorCallback$constructor_UP$MH, fi, constants$39.NewtonWorldSetCollisionConstructorDestructorCallback$constructor$FUNC, scope);
    }
    static NewtonWorldSetCollisionConstructorDestructorCallback$constructor ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _body, java.lang.foreign.MemorySegment _mainMesh, java.lang.foreign.MemorySegment _fracturedCompountCollision) -> {
            try {
                constants$39.NewtonWorldSetCollisionConstructorDestructorCallback$constructor_DOWN$MH.invokeExact(symbol, _body, _mainMesh, _fracturedCompountCollision);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


