// Generated by jextract

package crab.newton.callbacks;

import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * void (*NewtonMeshCreateFromSerialization$deserializeFunction)(void*,void*,int);
 * }
 */
public interface NewtonMeshCreateFromSerialization$deserializeFunction {

    void apply(java.lang.foreign.MemorySegment world, java.lang.foreign.MemorySegment userData, int threadIndex);
    static MemorySegment allocate(NewtonMeshCreateFromSerialization$deserializeFunction fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$111.NewtonMeshCreateFromSerialization$deserializeFunction_UP$MH, fi, constants$111.NewtonMeshCreateFromSerialization$deserializeFunction$FUNC, scope);
    }
    static NewtonMeshCreateFromSerialization$deserializeFunction ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _world, java.lang.foreign.MemorySegment _userData, int _threadIndex) -> {
            try {
                constants$112.NewtonMeshCreateFromSerialization$deserializeFunction_DOWN$MH.invokeExact(symbol, _world, _userData, _threadIndex);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


