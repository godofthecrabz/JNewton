package crab.newton;// Generated by jextract

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;

public class NewtonConvexHullParam {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("m_vertexCount"),
        Constants$root.C_LONG$LAYOUT.withName("m_vertexStrideInBytes"),
        Constants$root.C_LONG$LAYOUT.withName("m_faceCount"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("m_vertex")
    ).withName("crab.newton.NewtonConvexHullParam");
    public static MemoryLayout $LAYOUT() {
        return NewtonConvexHullParam.$struct$LAYOUT;
    }
    static final VarHandle m_vertexCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vertexCount"));
    public static VarHandle m_vertexCount$VH() {
        return NewtonConvexHullParam.m_vertexCount$VH;
    }
    public static int m_vertexCount$get(MemorySegment seg) {
        return (int)NewtonConvexHullParam.m_vertexCount$VH.get(seg);
    }
    public static void m_vertexCount$set( MemorySegment seg, int x) {
        NewtonConvexHullParam.m_vertexCount$VH.set(seg, x);
    }
    public static int m_vertexCount$get(MemorySegment seg, long index) {
        return (int)NewtonConvexHullParam.m_vertexCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vertexCount$set(MemorySegment seg, long index, int x) {
        NewtonConvexHullParam.m_vertexCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_vertexStrideInBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vertexStrideInBytes"));
    public static VarHandle m_vertexStrideInBytes$VH() {
        return NewtonConvexHullParam.m_vertexStrideInBytes$VH;
    }
    public static int m_vertexStrideInBytes$get(MemorySegment seg) {
        return (int)NewtonConvexHullParam.m_vertexStrideInBytes$VH.get(seg);
    }
    public static void m_vertexStrideInBytes$set( MemorySegment seg, int x) {
        NewtonConvexHullParam.m_vertexStrideInBytes$VH.set(seg, x);
    }
    public static int m_vertexStrideInBytes$get(MemorySegment seg, long index) {
        return (int)NewtonConvexHullParam.m_vertexStrideInBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vertexStrideInBytes$set(MemorySegment seg, long index, int x) {
        NewtonConvexHullParam.m_vertexStrideInBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_faceCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceCount"));
    public static VarHandle m_faceCount$VH() {
        return NewtonConvexHullParam.m_faceCount$VH;
    }
    public static int m_faceCount$get(MemorySegment seg) {
        return (int)NewtonConvexHullParam.m_faceCount$VH.get(seg);
    }
    public static void m_faceCount$set( MemorySegment seg, int x) {
        NewtonConvexHullParam.m_faceCount$VH.set(seg, x);
    }
    public static int m_faceCount$get(MemorySegment seg, long index) {
        return (int)NewtonConvexHullParam.m_faceCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceCount$set(MemorySegment seg, long index, int x) {
        NewtonConvexHullParam.m_faceCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_vertex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vertex"));
    public static VarHandle m_vertex$VH() {
        return NewtonConvexHullParam.m_vertex$VH;
    }
    public static MemoryAddress m_vertex$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)NewtonConvexHullParam.m_vertex$VH.get(seg);
    }
    public static void m_vertex$set( MemorySegment seg, MemoryAddress x) {
        NewtonConvexHullParam.m_vertex$VH.set(seg, x);
    }
    public static MemoryAddress m_vertex$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)NewtonConvexHullParam.m_vertex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vertex$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonConvexHullParam.m_vertex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


