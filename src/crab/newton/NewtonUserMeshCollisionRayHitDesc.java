// Generated by jextract

package crab.newton;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * struct NewtonUserMeshCollisionRayHitDesc {
 *     float m_p0[4];
 *     float m_p1[4];
 *     float m_normalOut[4];
 *     long long m_userIdOut;
 *     void* m_userData;
 * };
 * }
 */
public class NewtonUserMeshCollisionRayHitDesc {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_p0"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_p1"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_normalOut"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("m_userIdOut"),
        Constants$root.C_POINTER$LAYOUT.withName("m_userData")
    ).withName("NewtonUserMeshCollisionRayHitDesc");
    public static MemoryLayout $LAYOUT() {
        return NewtonUserMeshCollisionRayHitDesc.$struct$LAYOUT;
    }
    public static MemorySegment m_p0$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment m_p1$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static MemorySegment m_normalOut$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    static final VarHandle m_userIdOut$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_userIdOut"));
    public static VarHandle m_userIdOut$VH() {
        return NewtonUserMeshCollisionRayHitDesc.m_userIdOut$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long m_userIdOut;
     * }
     */
    public static long m_userIdOut$get(MemorySegment seg) {
        return (long)NewtonUserMeshCollisionRayHitDesc.m_userIdOut$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long m_userIdOut;
     * }
     */
    public static void m_userIdOut$set(MemorySegment seg, long x) {
        NewtonUserMeshCollisionRayHitDesc.m_userIdOut$VH.set(seg, x);
    }
    public static long m_userIdOut$get(MemorySegment seg, long index) {
        return (long)NewtonUserMeshCollisionRayHitDesc.m_userIdOut$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_userIdOut$set(MemorySegment seg, long index, long x) {
        NewtonUserMeshCollisionRayHitDesc.m_userIdOut$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_userData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_userData"));
    public static VarHandle m_userData$VH() {
        return NewtonUserMeshCollisionRayHitDesc.m_userData$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* m_userData;
     * }
     */
    public static MemorySegment m_userData$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonUserMeshCollisionRayHitDesc.m_userData$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* m_userData;
     * }
     */
    public static void m_userData$set(MemorySegment seg, MemorySegment x) {
        NewtonUserMeshCollisionRayHitDesc.m_userData$VH.set(seg, x);
    }
    public static MemorySegment m_userData$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonUserMeshCollisionRayHitDesc.m_userData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_userData$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonUserMeshCollisionRayHitDesc.m_userData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


