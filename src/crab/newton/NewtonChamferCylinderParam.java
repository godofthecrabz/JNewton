// Generated by jextract

package crab.newton;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * struct NewtonChamferCylinderParam {
 *     float m_radio;
 *     float m_height;
 * };
 * }
 */
public class NewtonChamferCylinderParam {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("m_radio"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_height")
    ).withName("NewtonChamferCylinderParam");
    public static MemoryLayout $LAYOUT() {
        return NewtonChamferCylinderParam.$struct$LAYOUT;
    }
    static final VarHandle m_radio$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_radio"));
    public static VarHandle m_radio$VH() {
        return NewtonChamferCylinderParam.m_radio$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float m_radio;
     * }
     */
    public static float m_radio$get(MemorySegment seg) {
        return (float)NewtonChamferCylinderParam.m_radio$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float m_radio;
     * }
     */
    public static void m_radio$set(MemorySegment seg, float x) {
        NewtonChamferCylinderParam.m_radio$VH.set(seg, x);
    }
    public static float m_radio$get(MemorySegment seg, long index) {
        return (float)NewtonChamferCylinderParam.m_radio$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_radio$set(MemorySegment seg, long index, float x) {
        NewtonChamferCylinderParam.m_radio$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_height"));
    public static VarHandle m_height$VH() {
        return NewtonChamferCylinderParam.m_height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float m_height;
     * }
     */
    public static float m_height$get(MemorySegment seg) {
        return (float)NewtonChamferCylinderParam.m_height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float m_height;
     * }
     */
    public static void m_height$set(MemorySegment seg, float x) {
        NewtonChamferCylinderParam.m_height$VH.set(seg, x);
    }
    public static float m_height$get(MemorySegment seg, long index) {
        return (float)NewtonChamferCylinderParam.m_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_height$set(MemorySegment seg, long index, float x) {
        NewtonChamferCylinderParam.m_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


