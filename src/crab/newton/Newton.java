// Generated by jextract

package crab.newton;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import java.nio.file.Path;

import crab.newton.internal.*;
import static java.lang.foreign.ValueLayout.*;

/**
 * The class that contains all the functions in the Newton Dynamics Physics Library.
 */
public class Newton  {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_LONG$LAYOUT;
    public static final OfInt C_LONG = Constants$root.C_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static final SequenceLayout VEC3F = MemoryLayout.sequenceLayout(3, C_FLOAT);
    public static final SequenceLayout VEC3D = MemoryLayout.sequenceLayout(3, C_DOUBLE);
    public static final SequenceLayout VEC4F = MemoryLayout.sequenceLayout(4, C_FLOAT);
    public static final SequenceLayout AABBF = MemoryLayout.sequenceLayout(6, C_FLOAT);
    public static final SequenceLayout MAT4F = MemoryLayout.sequenceLayout(16, C_FLOAT);
    public static final StructLayout MAT4F_VEC3F = MemoryLayout.structLayout(
            MAT4F, VEC3F
    );

    public static void loadNewton(String newtonPath) {
        RuntimeHelper.loadLibrary(newtonPath);
    }
    public static void loadNewton(Path newtonPath) {
        RuntimeHelper.loadLibrary(newtonPath);
    }
    /**
     * {@snippet :
     * #define NEWTON_MAJOR_VERSION 3
     * }
     */
    public static int NEWTON_MAJOR_VERSION() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define NEWTON_MINOR_VERSION 14
     * }
     */
    public static int NEWTON_MINOR_VERSION() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define NEWTON_BROADPHASE_DEFAULT 0
     * }
     */
    public static int NEWTON_BROADPHASE_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NEWTON_BROADPHASE_PERSINTENT 1
     * }
     */
    public static int NEWTON_BROADPHASE_PERSINTENT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NEWTON_DYNAMIC_BODY 0
     * }
     */
    public static int NEWTON_DYNAMIC_BODY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define NEWTON_KINEMATIC_BODY 1
     * }
     */
    public static int NEWTON_KINEMATIC_BODY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define NEWTON_DYNAMIC_ASYMETRIC_BODY 2
     * }
     */
    public static int NEWTON_DYNAMIC_ASYMETRIC_BODY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_SPHERE 0
     * }
     */
    public static int SERIALIZE_ID_SPHERE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_CAPSULE 1
     * }
     */
    public static int SERIALIZE_ID_CAPSULE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_CYLINDER 2
     * }
     */
    public static int SERIALIZE_ID_CYLINDER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_CHAMFERCYLINDER 3
     * }
     */
    public static int SERIALIZE_ID_CHAMFERCYLINDER() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_BOX 4
     * }
     */
    public static int SERIALIZE_ID_BOX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_CONE 5
     * }
     */
    public static int SERIALIZE_ID_CONE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_CONVEXHULL 6
     * }
     */
    public static int SERIALIZE_ID_CONVEXHULL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_NULL 7
     * }
     */
    public static int SERIALIZE_ID_NULL() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_COMPOUND 8
     * }
     */
    public static int SERIALIZE_ID_COMPOUND() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_TREE 9
     * }
     */
    public static int SERIALIZE_ID_TREE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_HEIGHTFIELD 10
     * }
     */
    public static int SERIALIZE_ID_HEIGHTFIELD() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_CLOTH_PATCH 11
     * }
     */
    public static int SERIALIZE_ID_CLOTH_PATCH() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_DEFORMABLE_SOLID 12
     * }
     */
    public static int SERIALIZE_ID_DEFORMABLE_SOLID() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_USERMESH 13
     * }
     */
    public static int SERIALIZE_ID_USERMESH() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_SCENE 14
     * }
     */
    public static int SERIALIZE_ID_SCENE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define SERIALIZE_ID_FRACTURED_COMPOUND 15
     * }
     */
    public static int SERIALIZE_ID_FRACTURED_COMPOUND() {
        return (int)15L;
    }
    public static MethodHandle NewtonWorldGetVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$18.NewtonWorldGetVersion$MH,"NewtonWorldGetVersion");
    }
    /**
     * {@snippet :
     * int NewtonWorldGetVersion(,...);
     * }
     */
    public static int NewtonWorldGetVersion(Object... x0) {
        var mh$ = NewtonWorldGetVersion$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldFloatSize$MH() {
        return RuntimeHelper.requireNonNull(constants$18.NewtonWorldFloatSize$MH,"NewtonWorldFloatSize");
    }
    /**
     * {@snippet :
     * int NewtonWorldFloatSize(,...);
     * }
     */
    public static int NewtonWorldFloatSize(Object... x0) {
        var mh$ = NewtonWorldFloatSize$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetMemoryUsed$MH() {
        return RuntimeHelper.requireNonNull(constants$19.NewtonGetMemoryUsed$MH,"NewtonGetMemoryUsed");
    }
    /**
     * {@snippet :
     * int NewtonGetMemoryUsed(,...);
     * }
     */
    public static int NewtonGetMemoryUsed(Object... x0) {
        var mh$ = NewtonGetMemoryUsed$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetMemorySystem$MH() {
        return RuntimeHelper.requireNonNull(constants$19.NewtonSetMemorySystem$MH,"NewtonSetMemorySystem");
    }
    /**
     * {@snippet :
     * void NewtonSetMemorySystem(void* (*malloc)(int), void (*free)(void*,int));
     * }
     */
    public static void NewtonSetMemorySystem(MemorySegment malloc, MemorySegment free) {
        var mh$ = NewtonSetMemorySystem$MH();
        try {
            mh$.invokeExact(malloc, free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonCreate$MH,"NewtonCreate");
    }
    /**
     * {@snippet :
     * struct NewtonWorld* NewtonCreate(,...);
     * }
     */
    public static MemorySegment NewtonCreate(Object... x0) {
        var mh$ = NewtonCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonDestroy$MH,"NewtonDestroy");
    }
    /**
     * {@snippet :
     * void NewtonDestroy(struct NewtonWorld* newtonWorld);
     * }
     */
    public static void NewtonDestroy(MemorySegment newtonWorld) {
        var mh$ = NewtonDestroy$MH();
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroyAllBodies$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonDestroyAllBodies$MH,"NewtonDestroyAllBodies");
    }
    /**
     * {@snippet :
     * void NewtonDestroyAllBodies(struct NewtonWorld* newtonWorld);
     * }
     */
    public static void NewtonDestroyAllBodies(MemorySegment newtonWorld) {
        var mh$ = NewtonDestroyAllBodies$MH();
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetPostUpdateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonGetPostUpdateCallback$MH,"NewtonGetPostUpdateCallback");
    }
    /**
     * {@snippet :
     * void (*NewtonGetPostUpdateCallback(struct NewtonWorld* newtonWorld))(struct NewtonWorld*,float);
     * }
     */
    public static MemorySegment NewtonGetPostUpdateCallback(MemorySegment newtonWorld) {
        var mh$ = NewtonGetPostUpdateCallback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetPostUpdateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonSetPostUpdateCallback$MH,"NewtonSetPostUpdateCallback");
    }
    /**
     * {@snippet :
     * void NewtonSetPostUpdateCallback(struct NewtonWorld* newtonWorld, void (*callback)(struct NewtonWorld*,float));
     * }
     */
    public static void NewtonSetPostUpdateCallback(MemorySegment newtonWorld, MemorySegment callback) {
        var mh$ = NewtonSetPostUpdateCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonAlloc$MH,"NewtonAlloc");
    }
    /**
     * {@snippet :
     * void* NewtonAlloc(int sizeInBytes);
     * }
     */
    public static MemorySegment NewtonAlloc(int sizeInBytes) {
        var mh$ = NewtonAlloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFree$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonFree$MH,"NewtonFree");
    }
    /**
     * {@snippet :
     * void NewtonFree(void* ptr);
     * }
     */
    public static void NewtonFree(MemorySegment ptr) {
        var mh$ = NewtonFree$MH();
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonLoadPlugins$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonLoadPlugins$MH,"NewtonLoadPlugins");
    }
    /**
     * {@snippet :
     * void NewtonLoadPlugins(struct NewtonWorld* newtonWorld, char* plugInPath);
     * }
     */
    public static void NewtonLoadPlugins(MemorySegment newtonWorld, MemorySegment plugInPath) {
        var mh$ = NewtonLoadPlugins$MH();
        try {
            mh$.invokeExact(newtonWorld, plugInPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUnloadPlugins$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonUnloadPlugins$MH,"NewtonUnloadPlugins");
    }
    /**
     * {@snippet :
     * void NewtonUnloadPlugins(struct NewtonWorld* newtonWorld);
     * }
     */
    public static void NewtonUnloadPlugins(MemorySegment newtonWorld) {
        var mh$ = NewtonUnloadPlugins$MH();
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCurrentPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonCurrentPlugin$MH,"NewtonCurrentPlugin");
    }
    /**
     * {@snippet :
     * void* NewtonCurrentPlugin(struct NewtonWorld* newtonWorld);
     * }
     */
    public static MemorySegment NewtonCurrentPlugin(MemorySegment newtonWorld) {
        var mh$ = NewtonCurrentPlugin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetFirstPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonGetFirstPlugin$MH,"NewtonGetFirstPlugin");
    }
    /**
     * {@snippet :
     * void* NewtonGetFirstPlugin(struct NewtonWorld* newtonWorld);
     * }
     */
    public static MemorySegment NewtonGetFirstPlugin(MemorySegment newtonWorld) {
        var mh$ = NewtonGetFirstPlugin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetPreferedPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonGetPreferedPlugin$MH,"NewtonGetPreferedPlugin");
    }
    /**
     * {@snippet :
     * void* NewtonGetPreferedPlugin(struct NewtonWorld* newtonWorld);
     * }
     */
    public static MemorySegment NewtonGetPreferedPlugin(MemorySegment newtonWorld) {
        var mh$ = NewtonGetPreferedPlugin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetNextPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonGetNextPlugin$MH,"NewtonGetNextPlugin");
    }
    /**
     * {@snippet :
     * void* NewtonGetNextPlugin(struct NewtonWorld* newtonWorld, void* plugin);
     * }
     */
    public static MemorySegment NewtonGetNextPlugin(MemorySegment newtonWorld, MemorySegment plugin) {
        var mh$ = NewtonGetNextPlugin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetPluginString$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonGetPluginString$MH,"NewtonGetPluginString");
    }
    /**
     * {@snippet :
     * char* NewtonGetPluginString(struct NewtonWorld* newtonWorld, void* plugin);
     * }
     */
    public static MemorySegment NewtonGetPluginString(MemorySegment newtonWorld, MemorySegment plugin) {
        var mh$ = NewtonGetPluginString$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSelectPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonSelectPlugin$MH,"NewtonSelectPlugin");
    }
    /**
     * {@snippet :
     * void NewtonSelectPlugin(struct NewtonWorld* newtonWorld, void* plugin);
     * }
     */
    public static void NewtonSelectPlugin(MemorySegment newtonWorld, MemorySegment plugin) {
        var mh$ = NewtonSelectPlugin$MH();
        try {
            mh$.invokeExact(newtonWorld, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetContactMergeTolerance$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonGetContactMergeTolerance$MH,"NewtonGetContactMergeTolerance");
    }
    /**
     * {@snippet :
     * float NewtonGetContactMergeTolerance(struct NewtonWorld* newtonWorld);
     * }
     */
    public static float NewtonGetContactMergeTolerance(MemorySegment newtonWorld) {
        var mh$ = NewtonGetContactMergeTolerance$MH();
        try {
            return (float)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetContactMergeTolerance$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonSetContactMergeTolerance$MH,"NewtonSetContactMergeTolerance");
    }
    /**
     * {@snippet :
     * void NewtonSetContactMergeTolerance(struct NewtonWorld* newtonWorld, float tolerance);
     * }
     */
    public static void NewtonSetContactMergeTolerance(MemorySegment newtonWorld, float tolerance) {
        var mh$ = NewtonSetContactMergeTolerance$MH();
        try {
            mh$.invokeExact(newtonWorld, tolerance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonInvalidateCache$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonInvalidateCache$MH,"NewtonInvalidateCache");
    }
    /**
     * {@snippet :
     * void NewtonInvalidateCache(struct NewtonWorld* newtonWorld);
     * }
     */
    public static void NewtonInvalidateCache(MemorySegment newtonWorld) {
        var mh$ = NewtonInvalidateCache$MH();
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetSolverIterations$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonSetSolverIterations$MH,"NewtonSetSolverIterations");
    }
    /**
     * {@snippet :
     * void NewtonSetSolverIterations(struct NewtonWorld* newtonWorld, int model);
     * }
     */
    public static void NewtonSetSolverIterations(MemorySegment newtonWorld, int model) {
        var mh$ = NewtonSetSolverIterations$MH();
        try {
            mh$.invokeExact(newtonWorld, model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetSolverIterations$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonGetSolverIterations$MH,"NewtonGetSolverIterations");
    }
    /**
     * {@snippet :
     * int NewtonGetSolverIterations(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonGetSolverIterations(MemorySegment newtonWorld) {
        var mh$ = NewtonGetSolverIterations$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetParallelSolverOnLargeIsland$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonSetParallelSolverOnLargeIsland$MH,"NewtonSetParallelSolverOnLargeIsland");
    }
    /**
     * {@snippet :
     * void NewtonSetParallelSolverOnLargeIsland(struct NewtonWorld* newtonWorld, int mode);
     * }
     */
    public static void NewtonSetParallelSolverOnLargeIsland(MemorySegment newtonWorld, int mode) {
        var mh$ = NewtonSetParallelSolverOnLargeIsland$MH();
        try {
            mh$.invokeExact(newtonWorld, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetParallelSolverOnLargeIsland$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonGetParallelSolverOnLargeIsland$MH,"NewtonGetParallelSolverOnLargeIsland");
    }
    /**
     * {@snippet :
     * int NewtonGetParallelSolverOnLargeIsland(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonGetParallelSolverOnLargeIsland(MemorySegment newtonWorld) {
        var mh$ = NewtonGetParallelSolverOnLargeIsland$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetBroadphaseAlgorithm$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonGetBroadphaseAlgorithm$MH,"NewtonGetBroadphaseAlgorithm");
    }
    /**
     * {@snippet :
     * int NewtonGetBroadphaseAlgorithm(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonGetBroadphaseAlgorithm(MemorySegment newtonWorld) {
        var mh$ = NewtonGetBroadphaseAlgorithm$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSelectBroadphaseAlgorithm$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonSelectBroadphaseAlgorithm$MH,"NewtonSelectBroadphaseAlgorithm");
    }
    /**
     * {@snippet :
     * void NewtonSelectBroadphaseAlgorithm(struct NewtonWorld* newtonWorld, int algorithmType);
     * }
     */
    public static void NewtonSelectBroadphaseAlgorithm(MemorySegment newtonWorld, int algorithmType) {
        var mh$ = NewtonSelectBroadphaseAlgorithm$MH();
        try {
            mh$.invokeExact(newtonWorld, algorithmType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonResetBroadphase$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonResetBroadphase$MH,"NewtonResetBroadphase");
    }
    /**
     * {@snippet :
     * void NewtonResetBroadphase(struct NewtonWorld* newtonWorld);
     * }
     */
    public static void NewtonResetBroadphase(MemorySegment newtonWorld) {
        var mh$ = NewtonResetBroadphase$MH();
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonUpdate$MH,"NewtonUpdate");
    }
    /**
     * {@snippet :
     * void NewtonUpdate(struct NewtonWorld* newtonWorld, float timestep);
     * }
     */
    public static void NewtonUpdate(MemorySegment newtonWorld, float timestep) {
        var mh$ = NewtonUpdate$MH();
        try {
            mh$.invokeExact(newtonWorld, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUpdateAsync$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonUpdateAsync$MH,"NewtonUpdateAsync");
    }
    /**
     * {@snippet :
     * void NewtonUpdateAsync(struct NewtonWorld* newtonWorld, float timestep);
     * }
     */
    public static void NewtonUpdateAsync(MemorySegment newtonWorld, float timestep) {
        var mh$ = NewtonUpdateAsync$MH();
        try {
            mh$.invokeExact(newtonWorld, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWaitForUpdateToFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonWaitForUpdateToFinish$MH,"NewtonWaitForUpdateToFinish");
    }
    /**
     * {@snippet :
     * void NewtonWaitForUpdateToFinish(struct NewtonWorld* newtonWorld);
     * }
     */
    public static void NewtonWaitForUpdateToFinish(MemorySegment newtonWorld) {
        var mh$ = NewtonWaitForUpdateToFinish$MH();
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetNumberOfSubsteps$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonGetNumberOfSubsteps$MH,"NewtonGetNumberOfSubsteps");
    }
    /**
     * {@snippet :
     * int NewtonGetNumberOfSubsteps(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonGetNumberOfSubsteps(MemorySegment newtonWorld) {
        var mh$ = NewtonGetNumberOfSubsteps$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetNumberOfSubsteps$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonSetNumberOfSubsteps$MH,"NewtonSetNumberOfSubsteps");
    }
    /**
     * {@snippet :
     * void NewtonSetNumberOfSubsteps(struct NewtonWorld* newtonWorld, int subSteps);
     * }
     */
    public static void NewtonSetNumberOfSubsteps(MemorySegment newtonWorld, int subSteps) {
        var mh$ = NewtonSetNumberOfSubsteps$MH();
        try {
            mh$.invokeExact(newtonWorld, subSteps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetLastUpdateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonGetLastUpdateTime$MH,"NewtonGetLastUpdateTime");
    }
    /**
     * {@snippet :
     * float NewtonGetLastUpdateTime(struct NewtonWorld* newtonWorld);
     * }
     */
    public static float NewtonGetLastUpdateTime(MemorySegment newtonWorld) {
        var mh$ = NewtonGetLastUpdateTime$MH();
        try {
            return (float)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSerializeToFile$MH() {
        return RuntimeHelper.requireNonNull(constants$26.NewtonSerializeToFile$MH,"NewtonSerializeToFile");
    }
    /**
     * {@snippet :
     * void NewtonSerializeToFile(struct NewtonWorld* newtonWorld, char* filename, void (*bodyCallback)(struct NewtonBody*,void*,void (*)(void*,void*,int),void*), void* bodyUserData);
     * }
     */
    public static void NewtonSerializeToFile(MemorySegment newtonWorld, MemorySegment filename, MemorySegment bodyCallback, MemorySegment bodyUserData) {
        var mh$ = NewtonSerializeToFile$MH();
        try {
            mh$.invokeExact(newtonWorld, filename, bodyCallback, bodyUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeserializeFromFile$MH() {
        return RuntimeHelper.requireNonNull(constants$26.NewtonDeserializeFromFile$MH,"NewtonDeserializeFromFile");
    }
    /**
     * {@snippet :
     * void NewtonDeserializeFromFile(struct NewtonWorld* newtonWorld, char* filename, void (*bodyCallback)(struct NewtonBody*,void*,void (*)(void*,void*,int),void*), void* bodyUserData);
     * }
     */
    public static void NewtonDeserializeFromFile(MemorySegment newtonWorld, MemorySegment filename, MemorySegment bodyCallback, MemorySegment bodyUserData) {
        var mh$ = NewtonDeserializeFromFile$MH();
        try {
            mh$.invokeExact(newtonWorld, filename, bodyCallback, bodyUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSerializeScene$MH() {
        return RuntimeHelper.requireNonNull(constants$27.NewtonSerializeScene$MH,"NewtonSerializeScene");
    }
    /**
     * {@snippet :
     * void NewtonSerializeScene(struct NewtonWorld* newtonWorld, void (*bodyCallback)(struct NewtonBody*,void*,void (*)(void*,void*,int),void*), void* bodyUserData, void (*serializeCallback)(void*,void*,int), void* serializeHandle);
     * }
     */
    public static void NewtonSerializeScene(MemorySegment newtonWorld, MemorySegment bodyCallback, MemorySegment bodyUserData, MemorySegment serializeCallback, MemorySegment serializeHandle) {
        var mh$ = NewtonSerializeScene$MH();
        try {
            mh$.invokeExact(newtonWorld, bodyCallback, bodyUserData, serializeCallback, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeserializeScene$MH() {
        return RuntimeHelper.requireNonNull(constants$28.NewtonDeserializeScene$MH,"NewtonDeserializeScene");
    }
    /**
     * {@snippet :
     * void NewtonDeserializeScene(struct NewtonWorld* newtonWorld, void (*bodyCallback)(struct NewtonBody*,void*,void (*)(void*,void*,int),void*), void* bodyUserData, void (*serializeCallback)(void*,void*,int), void* serializeHandle);
     * }
     */
    public static void NewtonDeserializeScene(MemorySegment newtonWorld, MemorySegment bodyCallback, MemorySegment bodyUserData, MemorySegment serializeCallback, MemorySegment serializeHandle) {
        var mh$ = NewtonDeserializeScene$MH();
        try {
            mh$.invokeExact(newtonWorld, bodyCallback, bodyUserData, serializeCallback, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFindSerializedBody$MH() {
        return RuntimeHelper.requireNonNull(constants$28.NewtonFindSerializedBody$MH,"NewtonFindSerializedBody");
    }
    /**
     * {@snippet :
     * struct NewtonBody* NewtonFindSerializedBody(struct NewtonWorld* newtonWorld, int bodySerializedID);
     * }
     */
    public static MemorySegment NewtonFindSerializedBody(MemorySegment newtonWorld, int bodySerializedID) {
        var mh$ = NewtonFindSerializedBody$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, bodySerializedID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetJointSerializationCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$29.NewtonSetJointSerializationCallbacks$MH,"NewtonSetJointSerializationCallbacks");
    }
    /**
     * {@snippet :
     * void NewtonSetJointSerializationCallbacks(struct NewtonWorld* newtonWorld, void (*serializeJoint)(struct NewtonJoint*,void (*)(void*,void*,int),void*), void (*deserializeJoint)(struct NewtonBody*,struct NewtonBody*,void (*)(void*,void*,int),void*));
     * }
     */
    public static void NewtonSetJointSerializationCallbacks(MemorySegment newtonWorld, MemorySegment serializeJoint, MemorySegment deserializeJoint) {
        var mh$ = NewtonSetJointSerializationCallbacks$MH();
        try {
            mh$.invokeExact(newtonWorld, serializeJoint, deserializeJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetJointSerializationCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonGetJointSerializationCallbacks$MH,"NewtonGetJointSerializationCallbacks");
    }
    /**
     * {@snippet :
     * void NewtonGetJointSerializationCallbacks(struct NewtonWorld* newtonWorld, void (**serializeJoint)(struct NewtonJoint*,void (*)(void*,void*,int),void*), void (**deserializeJoint)(struct NewtonBody*,struct NewtonBody*,void (*)(void*,void*,int),void*));
     * }
     */
    public static void NewtonGetJointSerializationCallbacks(MemorySegment newtonWorld, MemorySegment serializeJoint, MemorySegment deserializeJoint) {
        var mh$ = NewtonGetJointSerializationCallbacks$MH();
        try {
            mh$.invokeExact(newtonWorld, serializeJoint, deserializeJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldCriticalSectionLock$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonWorldCriticalSectionLock$MH,"NewtonWorldCriticalSectionLock");
    }
    /**
     * {@snippet :
     * void NewtonWorldCriticalSectionLock(struct NewtonWorld* newtonWorld, int threadIndex);
     * }
     */
    public static void NewtonWorldCriticalSectionLock(MemorySegment newtonWorld, int threadIndex) {
        var mh$ = NewtonWorldCriticalSectionLock$MH();
        try {
            mh$.invokeExact(newtonWorld, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldCriticalSectionUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonWorldCriticalSectionUnlock$MH,"NewtonWorldCriticalSectionUnlock");
    }
    /**
     * {@snippet :
     * void NewtonWorldCriticalSectionUnlock(struct NewtonWorld* newtonWorld);
     * }
     */
    public static void NewtonWorldCriticalSectionUnlock(MemorySegment newtonWorld) {
        var mh$ = NewtonWorldCriticalSectionUnlock$MH();
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetThreadsCount$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonSetThreadsCount$MH,"NewtonSetThreadsCount");
    }
    /**
     * {@snippet :
     * void NewtonSetThreadsCount(struct NewtonWorld* newtonWorld, int threads);
     * }
     */
    public static void NewtonSetThreadsCount(MemorySegment newtonWorld, int threads) {
        var mh$ = NewtonSetThreadsCount$MH();
        try {
            mh$.invokeExact(newtonWorld, threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetThreadsCount$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonGetThreadsCount$MH,"NewtonGetThreadsCount");
    }
    /**
     * {@snippet :
     * int NewtonGetThreadsCount(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonGetThreadsCount(MemorySegment newtonWorld) {
        var mh$ = NewtonGetThreadsCount$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetMaxThreadsCount$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonGetMaxThreadsCount$MH,"NewtonGetMaxThreadsCount");
    }
    /**
     * {@snippet :
     * int NewtonGetMaxThreadsCount(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonGetMaxThreadsCount(MemorySegment newtonWorld) {
        var mh$ = NewtonGetMaxThreadsCount$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDispachThreadJob$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonDispachThreadJob$MH,"NewtonDispachThreadJob");
    }
    /**
     * {@snippet :
     * void NewtonDispachThreadJob(struct NewtonWorld* newtonWorld, void (*task)(struct NewtonWorld*,void*,int), void* usedData, char* functionName);
     * }
     */
    public static void NewtonDispachThreadJob(MemorySegment newtonWorld, MemorySegment task, MemorySegment usedData, MemorySegment functionName) {
        var mh$ = NewtonDispachThreadJob$MH();
        try {
            mh$.invokeExact(newtonWorld, task, usedData, functionName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSyncThreadJobs$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonSyncThreadJobs$MH,"NewtonSyncThreadJobs");
    }
    /**
     * {@snippet :
     * void NewtonSyncThreadJobs(struct NewtonWorld* newtonWorld);
     * }
     */
    public static void NewtonSyncThreadJobs(MemorySegment newtonWorld) {
        var mh$ = NewtonSyncThreadJobs$MH();
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonAtomicAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonAtomicAdd$MH,"NewtonAtomicAdd");
    }
    /**
     * {@snippet :
     * int NewtonAtomicAdd(int* ptr, int value);
     * }
     */
    public static int NewtonAtomicAdd(MemorySegment ptr, int value) {
        var mh$ = NewtonAtomicAdd$MH();
        try {
            return (int)mh$.invokeExact(ptr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonAtomicSwap$MH() {
        return RuntimeHelper.requireNonNull(constants$32.NewtonAtomicSwap$MH,"NewtonAtomicSwap");
    }
    /**
     * {@snippet :
     * int NewtonAtomicSwap(int* ptr, int value);
     * }
     */
    public static int NewtonAtomicSwap(MemorySegment ptr, int value) {
        var mh$ = NewtonAtomicSwap$MH();
        try {
            return (int)mh$.invokeExact(ptr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonYield$MH() {
        return RuntimeHelper.requireNonNull(constants$32.NewtonYield$MH,"NewtonYield");
    }
    /**
     * {@snippet :
     * void NewtonYield(,...);
     * }
     */
    public static void NewtonYield(Object... x0) {
        var mh$ = NewtonYield$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetIslandUpdateEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$32.NewtonSetIslandUpdateEvent$MH,"NewtonSetIslandUpdateEvent");
    }
    /**
     * {@snippet :
     * void NewtonSetIslandUpdateEvent(struct NewtonWorld* newtonWorld, int (*islandUpdate)(struct NewtonWorld*,void*,int));
     * }
     */
    public static void NewtonSetIslandUpdateEvent(MemorySegment newtonWorld, MemorySegment islandUpdate) {
        var mh$ = NewtonSetIslandUpdateEvent$MH();
        try {
            mh$.invokeExact(newtonWorld, islandUpdate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldForEachJointDo$MH() {
        return RuntimeHelper.requireNonNull(constants$33.NewtonWorldForEachJointDo$MH,"NewtonWorldForEachJointDo");
    }
    /**
     * {@snippet :
     * void NewtonWorldForEachJointDo(struct NewtonWorld* newtonWorld, void (*callback)(struct NewtonJoint*,void*), void* userData);
     * }
     */
    public static void NewtonWorldForEachJointDo(MemorySegment newtonWorld, MemorySegment callback, MemorySegment userData) {
        var mh$ = NewtonWorldForEachJointDo$MH();
        try {
            mh$.invokeExact(newtonWorld, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldForEachBodyInAABBDo$MH() {
        return RuntimeHelper.requireNonNull(constants$33.NewtonWorldForEachBodyInAABBDo$MH,"NewtonWorldForEachBodyInAABBDo");
    }
    /**
     * {@snippet :
     * void NewtonWorldForEachBodyInAABBDo(struct NewtonWorld* newtonWorld, float* p0, float* p1, int (*callback)(struct NewtonBody*,void*), void* userData);
     * }
     */
    public static void NewtonWorldForEachBodyInAABBDo(MemorySegment newtonWorld, MemorySegment p0, MemorySegment p1, MemorySegment callback, MemorySegment userData) {
        var mh$ = NewtonWorldForEachBodyInAABBDo$MH();
        try {
            mh$.invokeExact(newtonWorld, p0, p1, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldSetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$33.NewtonWorldSetUserData$MH,"NewtonWorldSetUserData");
    }
    /**
     * {@snippet :
     * void NewtonWorldSetUserData(struct NewtonWorld* newtonWorld, void* userData);
     * }
     */
    public static void NewtonWorldSetUserData(MemorySegment newtonWorld, MemorySegment userData) {
        var mh$ = NewtonWorldSetUserData$MH();
        try {
            mh$.invokeExact(newtonWorld, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonWorldGetUserData$MH,"NewtonWorldGetUserData");
    }
    /**
     * {@snippet :
     * void* NewtonWorldGetUserData(struct NewtonWorld* newtonWorld);
     * }
     */
    public static MemorySegment NewtonWorldGetUserData(MemorySegment newtonWorld) {
        var mh$ = NewtonWorldGetUserData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldAddListener$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonWorldAddListener$MH,"NewtonWorldAddListener");
    }
    /**
     * {@snippet :
     * void* NewtonWorldAddListener(struct NewtonWorld* newtonWorld, char* nameId, void* listenerUserData);
     * }
     */
    public static MemorySegment NewtonWorldAddListener(MemorySegment newtonWorld, MemorySegment nameId, MemorySegment listenerUserData) {
        var mh$ = NewtonWorldAddListener$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, nameId, listenerUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetListener$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonWorldGetListener$MH,"NewtonWorldGetListener");
    }
    /**
     * {@snippet :
     * void* NewtonWorldGetListener(struct NewtonWorld* newtonWorld, char* nameId);
     * }
     */
    public static MemorySegment NewtonWorldGetListener(MemorySegment newtonWorld, MemorySegment nameId) {
        var mh$ = NewtonWorldGetListener$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, nameId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetDebugCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonWorldListenerSetDebugCallback$MH,"NewtonWorldListenerSetDebugCallback");
    }
    /**
     * {@snippet :
     * void NewtonWorldListenerSetDebugCallback(struct NewtonWorld* newtonWorld, void* listener, void (*callback)(struct NewtonWorld*,void*,void*));
     * }
     */
    public static void NewtonWorldListenerSetDebugCallback(MemorySegment newtonWorld, MemorySegment listener, MemorySegment callback) {
        var mh$ = NewtonWorldListenerSetDebugCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetPostStepCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$35.NewtonWorldListenerSetPostStepCallback$MH,"NewtonWorldListenerSetPostStepCallback");
    }
    /**
     * {@snippet :
     * void NewtonWorldListenerSetPostStepCallback(struct NewtonWorld* newtonWorld, void* listener, void (*callback)(struct NewtonWorld*,void*,float));
     * }
     */
    public static void NewtonWorldListenerSetPostStepCallback(MemorySegment newtonWorld, MemorySegment listener, MemorySegment callback) {
        var mh$ = NewtonWorldListenerSetPostStepCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetPreUpdateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$35.NewtonWorldListenerSetPreUpdateCallback$MH,"NewtonWorldListenerSetPreUpdateCallback");
    }
    /**
     * {@snippet :
     * void NewtonWorldListenerSetPreUpdateCallback(struct NewtonWorld* newtonWorld, void* listener, void (*callback)(struct NewtonWorld*,void*,float));
     * }
     */
    public static void NewtonWorldListenerSetPreUpdateCallback(MemorySegment newtonWorld, MemorySegment listener, MemorySegment callback) {
        var mh$ = NewtonWorldListenerSetPreUpdateCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetPostUpdateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$36.NewtonWorldListenerSetPostUpdateCallback$MH,"NewtonWorldListenerSetPostUpdateCallback");
    }
    /**
     * {@snippet :
     * void NewtonWorldListenerSetPostUpdateCallback(struct NewtonWorld* newtonWorld, void* listener, void (*callback)(struct NewtonWorld*,void*,float));
     * }
     */
    public static void NewtonWorldListenerSetPostUpdateCallback(MemorySegment newtonWorld, MemorySegment listener, MemorySegment callback) {
        var mh$ = NewtonWorldListenerSetPostUpdateCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$36.NewtonWorldListenerSetDestructorCallback$MH,"NewtonWorldListenerSetDestructorCallback");
    }
    /**
     * {@snippet :
     * void NewtonWorldListenerSetDestructorCallback(struct NewtonWorld* newtonWorld, void* listener, void (*callback)(struct NewtonWorld*,void*));
     * }
     */
    public static void NewtonWorldListenerSetDestructorCallback(MemorySegment newtonWorld, MemorySegment listener, MemorySegment callback) {
        var mh$ = NewtonWorldListenerSetDestructorCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetBodyDestroyCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$37.NewtonWorldListenerSetBodyDestroyCallback$MH,"NewtonWorldListenerSetBodyDestroyCallback");
    }
    /**
     * {@snippet :
     * void NewtonWorldListenerSetBodyDestroyCallback(struct NewtonWorld* newtonWorld, void* listener, void (*callback)(struct NewtonWorld*,void*,struct NewtonBody*));
     * }
     */
    public static void NewtonWorldListenerSetBodyDestroyCallback(MemorySegment newtonWorld, MemorySegment listener, MemorySegment callback) {
        var mh$ = NewtonWorldListenerSetBodyDestroyCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerDebug$MH() {
        return RuntimeHelper.requireNonNull(constants$37.NewtonWorldListenerDebug$MH,"NewtonWorldListenerDebug");
    }
    /**
     * {@snippet :
     * void NewtonWorldListenerDebug(struct NewtonWorld* newtonWorld, void* context);
     * }
     */
    public static void NewtonWorldListenerDebug(MemorySegment newtonWorld, MemorySegment context) {
        var mh$ = NewtonWorldListenerDebug$MH();
        try {
            mh$.invokeExact(newtonWorld, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetListenerUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$37.NewtonWorldGetListenerUserData$MH,"NewtonWorldGetListenerUserData");
    }
    /**
     * {@snippet :
     * void* NewtonWorldGetListenerUserData(struct NewtonWorld* newtonWorld, void* listener);
     * }
     */
    public static MemorySegment NewtonWorldGetListenerUserData(MemorySegment newtonWorld, MemorySegment listener) {
        var mh$ = NewtonWorldGetListenerUserData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, listener);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerGetBodyDestroyCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$38.NewtonWorldListenerGetBodyDestroyCallback$MH,"NewtonWorldListenerGetBodyDestroyCallback");
    }
    /**
     * {@snippet :
     * void (*NewtonWorldListenerGetBodyDestroyCallback(struct NewtonWorld* newtonWorld, void* listener))(struct NewtonWorld*,void*,struct NewtonBody*);
     * }
     */
    public static MemorySegment NewtonWorldListenerGetBodyDestroyCallback(MemorySegment newtonWorld, MemorySegment listener) {
        var mh$ = NewtonWorldListenerGetBodyDestroyCallback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, listener);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldSetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$38.NewtonWorldSetDestructorCallback$MH,"NewtonWorldSetDestructorCallback");
    }
    /**
     * {@snippet :
     * void NewtonWorldSetDestructorCallback(struct NewtonWorld* newtonWorld, void (*destructor)(struct NewtonWorld*));
     * }
     */
    public static void NewtonWorldSetDestructorCallback(MemorySegment newtonWorld, MemorySegment destructor) {
        var mh$ = NewtonWorldSetDestructorCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, destructor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$39.NewtonWorldGetDestructorCallback$MH,"NewtonWorldGetDestructorCallback");
    }
    /**
     * {@snippet :
     * void (*NewtonWorldGetDestructorCallback(struct NewtonWorld* newtonWorld))(struct NewtonWorld*);
     * }
     */
    public static MemorySegment NewtonWorldGetDestructorCallback(MemorySegment newtonWorld) {
        var mh$ = NewtonWorldGetDestructorCallback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldSetCollisionConstructorDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$40.NewtonWorldSetCollisionConstructorDestructorCallback$MH,"NewtonWorldSetCollisionConstructorDestructorCallback");
    }
    /**
     * {@snippet :
     * void NewtonWorldSetCollisionConstructorDestructorCallback(struct NewtonWorld* newtonWorld, void (*constructor)(struct NewtonWorld*,struct NewtonCollision*,struct NewtonCollision*), void (*destructor)(struct NewtonWorld*,struct NewtonCollision*));
     * }
     */
    public static void NewtonWorldSetCollisionConstructorDestructorCallback(MemorySegment newtonWorld, MemorySegment constructor, MemorySegment destructor) {
        var mh$ = NewtonWorldSetCollisionConstructorDestructorCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, constructor, destructor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldSetCreateDestroyContactCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$40.NewtonWorldSetCreateDestroyContactCallback$MH,"NewtonWorldSetCreateDestroyContactCallback");
    }
    /**
     * {@snippet :
     * void NewtonWorldSetCreateDestroyContactCallback(struct NewtonWorld* newtonWorld, void (*createContact)(struct NewtonWorld*,struct NewtonJoint*), void (*destroyContact)(struct NewtonWorld*,struct NewtonJoint*));
     * }
     */
    public static void NewtonWorldSetCreateDestroyContactCallback(MemorySegment newtonWorld, MemorySegment createContact, MemorySegment destroyContact) {
        var mh$ = NewtonWorldSetCreateDestroyContactCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, createContact, destroyContact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldRayCast$MH() {
        return RuntimeHelper.requireNonNull(constants$41.NewtonWorldRayCast$MH,"NewtonWorldRayCast");
    }
    /**
     * {@snippet :
     * void NewtonWorldRayCast(struct NewtonWorld* newtonWorld, float* p0, float* p1, float (*filter)(struct NewtonBody*,struct NewtonCollision*,float*,float*,long long,void*,float), void* userData, unsigned int (*prefilter)(struct NewtonBody*,struct NewtonCollision*,void*), int threadIndex);
     * }
     */
    public static void NewtonWorldRayCast(MemorySegment newtonWorld, MemorySegment p0, MemorySegment p1, MemorySegment filter, MemorySegment userData, MemorySegment prefilter, int threadIndex) {
        var mh$ = NewtonWorldRayCast$MH();
        try {
            mh$.invokeExact(newtonWorld, p0, p1, filter, userData, prefilter, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldConvexCast$MH() {
        return RuntimeHelper.requireNonNull(constants$42.NewtonWorldConvexCast$MH,"NewtonWorldConvexCast");
    }
    /**
     * {@snippet :
     * int NewtonWorldConvexCast(struct NewtonWorld* newtonWorld, float* matrix, float* target, struct NewtonCollision* shape, float* param, void* userData, unsigned int (*prefilter)(struct NewtonBody*,struct NewtonCollision*,void*), struct NewtonWorldConvexCastReturnInfo* info, int maxContactsCount, int threadIndex);
     * }
     */
    public static int NewtonWorldConvexCast(MemorySegment newtonWorld, MemorySegment matrix, MemorySegment target, MemorySegment shape, MemorySegment param, MemorySegment userData, MemorySegment prefilter, MemorySegment info, int maxContactsCount, int threadIndex) {
        var mh$ = NewtonWorldConvexCast$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld, matrix, target, shape, param, userData, prefilter, info, maxContactsCount, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldCollide$MH() {
        return RuntimeHelper.requireNonNull(constants$42.NewtonWorldCollide$MH,"NewtonWorldCollide");
    }
    /**
     * {@snippet :
     * int NewtonWorldCollide(struct NewtonWorld* newtonWorld, float* matrix, struct NewtonCollision* shape, void* userData, unsigned int (*prefilter)(struct NewtonBody*,struct NewtonCollision*,void*), struct NewtonWorldConvexCastReturnInfo* info, int maxContactsCount, int threadIndex);
     * }
     */
    public static int NewtonWorldCollide(MemorySegment newtonWorld, MemorySegment matrix, MemorySegment shape, MemorySegment userData, MemorySegment prefilter, MemorySegment info, int maxContactsCount, int threadIndex) {
        var mh$ = NewtonWorldCollide$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld, matrix, shape, userData, prefilter, info, maxContactsCount, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetBodyCount$MH() {
        return RuntimeHelper.requireNonNull(constants$42.NewtonWorldGetBodyCount$MH,"NewtonWorldGetBodyCount");
    }
    /**
     * {@snippet :
     * int NewtonWorldGetBodyCount(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonWorldGetBodyCount(MemorySegment newtonWorld) {
        var mh$ = NewtonWorldGetBodyCount$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetConstraintCount$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonWorldGetConstraintCount$MH,"NewtonWorldGetConstraintCount");
    }
    /**
     * {@snippet :
     * int NewtonWorldGetConstraintCount(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonWorldGetConstraintCount(MemorySegment newtonWorld) {
        var mh$ = NewtonWorldGetConstraintCount$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldFindJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonWorldFindJoint$MH,"NewtonWorldFindJoint");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonWorldFindJoint(struct NewtonBody* body0, struct NewtonBody* body1);
     * }
     */
    public static MemorySegment NewtonWorldFindJoint(MemorySegment body0, MemorySegment body1) {
        var mh$ = NewtonWorldFindJoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body0, body1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonIslandGetBody$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonIslandGetBody$MH,"NewtonIslandGetBody");
    }
    /**
     * {@snippet :
     * struct NewtonBody* NewtonIslandGetBody(void* island, int bodyIndex);
     * }
     */
    public static MemorySegment NewtonIslandGetBody(MemorySegment island, int bodyIndex) {
        var mh$ = NewtonIslandGetBody$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(island, bodyIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonIslandGetBodyAABB$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonIslandGetBodyAABB$MH,"NewtonIslandGetBodyAABB");
    }
    /**
     * {@snippet :
     * void NewtonIslandGetBodyAABB(void* island, int bodyIndex, float* p0, float* p1);
     * }
     */
    public static void NewtonIslandGetBodyAABB(MemorySegment island, int bodyIndex, MemorySegment p0, MemorySegment p1) {
        var mh$ = NewtonIslandGetBodyAABB$MH();
        try {
            mh$.invokeExact(island, bodyIndex, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialCreateGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonMaterialCreateGroupID$MH,"NewtonMaterialCreateGroupID");
    }
    /**
     * {@snippet :
     * int NewtonMaterialCreateGroupID(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonMaterialCreateGroupID(MemorySegment newtonWorld) {
        var mh$ = NewtonMaterialCreateGroupID$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetDefaultGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonMaterialGetDefaultGroupID$MH,"NewtonMaterialGetDefaultGroupID");
    }
    /**
     * {@snippet :
     * int NewtonMaterialGetDefaultGroupID(struct NewtonWorld* newtonWorld);
     * }
     */
    public static int NewtonMaterialGetDefaultGroupID(MemorySegment newtonWorld) {
        var mh$ = NewtonMaterialGetDefaultGroupID$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialDestroyAllGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonMaterialDestroyAllGroupID$MH,"NewtonMaterialDestroyAllGroupID");
    }
    /**
     * {@snippet :
     * void NewtonMaterialDestroyAllGroupID(struct NewtonWorld* newtonWorld);
     * }
     */
    public static void NewtonMaterialDestroyAllGroupID(MemorySegment newtonWorld) {
        var mh$ = NewtonMaterialDestroyAllGroupID$MH();
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonMaterialGetUserData$MH,"NewtonMaterialGetUserData");
    }
    /**
     * {@snippet :
     * void* NewtonMaterialGetUserData(struct NewtonWorld* newtonWorld, int id0, int id1);
     * }
     */
    public static MemorySegment NewtonMaterialGetUserData(MemorySegment newtonWorld, int id0, int id1) {
        var mh$ = NewtonMaterialGetUserData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, id0, id1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetSurfaceThickness$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonMaterialSetSurfaceThickness$MH,"NewtonMaterialSetSurfaceThickness");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetSurfaceThickness(struct NewtonWorld* newtonWorld, int id0, int id1, float thickness);
     * }
     */
    public static void NewtonMaterialSetSurfaceThickness(MemorySegment newtonWorld, int id0, int id1, float thickness) {
        var mh$ = NewtonMaterialSetSurfaceThickness$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1, thickness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetCallbackUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonMaterialSetCallbackUserData$MH,"NewtonMaterialSetCallbackUserData");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetCallbackUserData(struct NewtonWorld* newtonWorld, int id0, int id1, void* userData);
     * }
     */
    public static void NewtonMaterialSetCallbackUserData(MemorySegment newtonWorld, int id0, int id1, MemorySegment userData) {
        var mh$ = NewtonMaterialSetCallbackUserData$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactGenerationCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$45.NewtonMaterialSetContactGenerationCallback$MH,"NewtonMaterialSetContactGenerationCallback");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactGenerationCallback(struct NewtonWorld* newtonWorld, int id0, int id1, int (*contactGeneration)(struct NewtonMaterial*,struct NewtonBody*,struct NewtonCollision*,struct NewtonBody*,struct NewtonCollision*,struct NewtonUserContactPoint*,int,int));
     * }
     */
    public static void NewtonMaterialSetContactGenerationCallback(MemorySegment newtonWorld, int id0, int id1, MemorySegment contactGeneration) {
        var mh$ = NewtonMaterialSetContactGenerationCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1, contactGeneration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetCompoundCollisionCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$45.NewtonMaterialSetCompoundCollisionCallback$MH,"NewtonMaterialSetCompoundCollisionCallback");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetCompoundCollisionCallback(struct NewtonWorld* newtonWorld, int id0, int id1, int (*compoundAabbOverlap)(struct NewtonJoint*,float,struct NewtonBody*,void*,struct NewtonBody*,void*,int));
     * }
     */
    public static void NewtonMaterialSetCompoundCollisionCallback(MemorySegment newtonWorld, int id0, int id1, MemorySegment compoundAabbOverlap) {
        var mh$ = NewtonMaterialSetCompoundCollisionCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1, compoundAabbOverlap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetCollisionCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonMaterialSetCollisionCallback$MH,"NewtonMaterialSetCollisionCallback");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetCollisionCallback(struct NewtonWorld* newtonWorld, int id0, int id1, int (*aabbOverlap)(struct NewtonJoint*,float,int), void (*process)(struct NewtonJoint*,float,int));
     * }
     */
    public static void NewtonMaterialSetCollisionCallback(MemorySegment newtonWorld, int id0, int id1, MemorySegment aabbOverlap, MemorySegment process) {
        var mh$ = NewtonMaterialSetCollisionCallback$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1, aabbOverlap, process);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetDefaultSoftness$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonMaterialSetDefaultSoftness$MH,"NewtonMaterialSetDefaultSoftness");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetDefaultSoftness(struct NewtonWorld* newtonWorld, int id0, int id1, float value);
     * }
     */
    public static void NewtonMaterialSetDefaultSoftness(MemorySegment newtonWorld, int id0, int id1, float value) {
        var mh$ = NewtonMaterialSetDefaultSoftness$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetDefaultElasticity$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonMaterialSetDefaultElasticity$MH,"NewtonMaterialSetDefaultElasticity");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetDefaultElasticity(struct NewtonWorld* newtonWorld, int id0, int id1, float elasticCoef);
     * }
     */
    public static void NewtonMaterialSetDefaultElasticity(MemorySegment newtonWorld, int id0, int id1, float elasticCoef) {
        var mh$ = NewtonMaterialSetDefaultElasticity$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1, elasticCoef);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetDefaultCollidable$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonMaterialSetDefaultCollidable$MH,"NewtonMaterialSetDefaultCollidable");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetDefaultCollidable(struct NewtonWorld* newtonWorld, int id0, int id1, int state);
     * }
     */
    public static void NewtonMaterialSetDefaultCollidable(MemorySegment newtonWorld, int id0, int id1, int state) {
        var mh$ = NewtonMaterialSetDefaultCollidable$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetDefaultFriction$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonMaterialSetDefaultFriction$MH,"NewtonMaterialSetDefaultFriction");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetDefaultFriction(struct NewtonWorld* newtonWorld, int id0, int id1, float staticFriction, float kineticFriction);
     * }
     */
    public static void NewtonMaterialSetDefaultFriction(MemorySegment newtonWorld, int id0, int id1, float staticFriction, float kineticFriction) {
        var mh$ = NewtonMaterialSetDefaultFriction$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1, staticFriction, kineticFriction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialJointResetIntraJointCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonMaterialJointResetIntraJointCollision$MH,"NewtonMaterialJointResetIntraJointCollision");
    }
    /**
     * {@snippet :
     * void NewtonMaterialJointResetIntraJointCollision(struct NewtonWorld* newtonWorld, int id0, int id1);
     * }
     */
    public static void NewtonMaterialJointResetIntraJointCollision(MemorySegment newtonWorld, int id0, int id1) {
        var mh$ = NewtonMaterialJointResetIntraJointCollision$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialJointResetSelftJointCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonMaterialJointResetSelftJointCollision$MH,"NewtonMaterialJointResetSelftJointCollision");
    }
    /**
     * {@snippet :
     * void NewtonMaterialJointResetSelftJointCollision(struct NewtonWorld* newtonWorld, int id0, int id1);
     * }
     */
    public static void NewtonMaterialJointResetSelftJointCollision(MemorySegment newtonWorld, int id0, int id1) {
        var mh$ = NewtonMaterialJointResetSelftJointCollision$MH();
        try {
            mh$.invokeExact(newtonWorld, id0, id1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetFirstMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonWorldGetFirstMaterial$MH,"NewtonWorldGetFirstMaterial");
    }
    /**
     * {@snippet :
     * struct NewtonMaterial* NewtonWorldGetFirstMaterial(struct NewtonWorld* newtonWorld);
     * }
     */
    public static MemorySegment NewtonWorldGetFirstMaterial(MemorySegment newtonWorld) {
        var mh$ = NewtonWorldGetFirstMaterial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetNextMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonWorldGetNextMaterial$MH,"NewtonWorldGetNextMaterial");
    }
    /**
     * {@snippet :
     * struct NewtonMaterial* NewtonWorldGetNextMaterial(struct NewtonWorld* newtonWorld, struct NewtonMaterial* material);
     * }
     */
    public static MemorySegment NewtonWorldGetNextMaterial(MemorySegment newtonWorld, MemorySegment material) {
        var mh$ = NewtonWorldGetNextMaterial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetFirstBody$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonWorldGetFirstBody$MH,"NewtonWorldGetFirstBody");
    }
    /**
     * {@snippet :
     * struct NewtonBody* NewtonWorldGetFirstBody(struct NewtonWorld* newtonWorld);
     * }
     */
    public static MemorySegment NewtonWorldGetFirstBody(MemorySegment newtonWorld) {
        var mh$ = NewtonWorldGetFirstBody$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetNextBody$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonWorldGetNextBody$MH,"NewtonWorldGetNextBody");
    }
    /**
     * {@snippet :
     * struct NewtonBody* NewtonWorldGetNextBody(struct NewtonWorld* newtonWorld, struct NewtonBody* curBody);
     * }
     */
    public static MemorySegment NewtonWorldGetNextBody(MemorySegment newtonWorld, MemorySegment curBody) {
        var mh$ = NewtonWorldGetNextBody$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, curBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetMaterialPairUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonMaterialGetMaterialPairUserData$MH,"NewtonMaterialGetMaterialPairUserData");
    }
    /**
     * {@snippet :
     * void* NewtonMaterialGetMaterialPairUserData(struct NewtonMaterial* material);
     * }
     */
    public static MemorySegment NewtonMaterialGetMaterialPairUserData(MemorySegment material) {
        var mh$ = NewtonMaterialGetMaterialPairUserData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactFaceAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonMaterialGetContactFaceAttribute$MH,"NewtonMaterialGetContactFaceAttribute");
    }
    /**
     * {@snippet :
     * unsigned int NewtonMaterialGetContactFaceAttribute(struct NewtonMaterial* material);
     * }
     */
    public static int NewtonMaterialGetContactFaceAttribute(MemorySegment material) {
        var mh$ = NewtonMaterialGetContactFaceAttribute$MH();
        try {
            return (int)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetBodyCollidingShape$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonMaterialGetBodyCollidingShape$MH,"NewtonMaterialGetBodyCollidingShape");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonMaterialGetBodyCollidingShape(struct NewtonMaterial* material, struct NewtonBody* body);
     * }
     */
    public static MemorySegment NewtonMaterialGetBodyCollidingShape(MemorySegment material, MemorySegment body) {
        var mh$ = NewtonMaterialGetBodyCollidingShape$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(material, body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactNormalSpeed$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonMaterialGetContactNormalSpeed$MH,"NewtonMaterialGetContactNormalSpeed");
    }
    /**
     * {@snippet :
     * float NewtonMaterialGetContactNormalSpeed(struct NewtonMaterial* material);
     * }
     */
    public static float NewtonMaterialGetContactNormalSpeed(MemorySegment material) {
        var mh$ = NewtonMaterialGetContactNormalSpeed$MH();
        try {
            return (float)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactForce$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonMaterialGetContactForce$MH,"NewtonMaterialGetContactForce");
    }
    /**
     * {@snippet :
     * void NewtonMaterialGetContactForce(struct NewtonMaterial* material, struct NewtonBody* body, float* force);
     * }
     */
    public static void NewtonMaterialGetContactForce(MemorySegment material, MemorySegment body, MemorySegment force) {
        var mh$ = NewtonMaterialGetContactForce$MH();
        try {
            mh$.invokeExact(material, body, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactPositionAndNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonMaterialGetContactPositionAndNormal$MH,"NewtonMaterialGetContactPositionAndNormal");
    }
    /**
     * {@snippet :
     * void NewtonMaterialGetContactPositionAndNormal(struct NewtonMaterial* material, struct NewtonBody* body, float* posit, float* normal);
     * }
     */
    public static void NewtonMaterialGetContactPositionAndNormal(MemorySegment material, MemorySegment body, MemorySegment posit, MemorySegment normal) {
        var mh$ = NewtonMaterialGetContactPositionAndNormal$MH();
        try {
            mh$.invokeExact(material, body, posit, normal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactTangentDirections$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonMaterialGetContactTangentDirections$MH,"NewtonMaterialGetContactTangentDirections");
    }
    /**
     * {@snippet :
     * void NewtonMaterialGetContactTangentDirections(struct NewtonMaterial* material, struct NewtonBody* body, float* dir0, float* dir1);
     * }
     */
    public static void NewtonMaterialGetContactTangentDirections(MemorySegment material, MemorySegment body, MemorySegment dir0, MemorySegment dir1) {
        var mh$ = NewtonMaterialGetContactTangentDirections$MH();
        try {
            mh$.invokeExact(material, body, dir0, dir1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactTangentSpeed$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonMaterialGetContactTangentSpeed$MH,"NewtonMaterialGetContactTangentSpeed");
    }
    /**
     * {@snippet :
     * float NewtonMaterialGetContactTangentSpeed(struct NewtonMaterial* material, int index);
     * }
     */
    public static float NewtonMaterialGetContactTangentSpeed(MemorySegment material, int index) {
        var mh$ = NewtonMaterialGetContactTangentSpeed$MH();
        try {
            return (float)mh$.invokeExact(material, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactMaxNormalImpact$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonMaterialGetContactMaxNormalImpact$MH,"NewtonMaterialGetContactMaxNormalImpact");
    }
    /**
     * {@snippet :
     * float NewtonMaterialGetContactMaxNormalImpact(struct NewtonMaterial* material);
     * }
     */
    public static float NewtonMaterialGetContactMaxNormalImpact(MemorySegment material) {
        var mh$ = NewtonMaterialGetContactMaxNormalImpact$MH();
        try {
            return (float)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactMaxTangentImpact$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonMaterialGetContactMaxTangentImpact$MH,"NewtonMaterialGetContactMaxTangentImpact");
    }
    /**
     * {@snippet :
     * float NewtonMaterialGetContactMaxTangentImpact(struct NewtonMaterial* material, int index);
     * }
     */
    public static float NewtonMaterialGetContactMaxTangentImpact(MemorySegment material, int index) {
        var mh$ = NewtonMaterialGetContactMaxTangentImpact$MH();
        try {
            return (float)mh$.invokeExact(material, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactPenetration$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonMaterialGetContactPenetration$MH,"NewtonMaterialGetContactPenetration");
    }
    /**
     * {@snippet :
     * float NewtonMaterialGetContactPenetration(struct NewtonMaterial* material);
     * }
     */
    public static float NewtonMaterialGetContactPenetration(MemorySegment material) {
        var mh$ = NewtonMaterialGetContactPenetration$MH();
        try {
            return (float)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetAsSoftContact$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonMaterialSetAsSoftContact$MH,"NewtonMaterialSetAsSoftContact");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetAsSoftContact(struct NewtonMaterial* material, float relaxation);
     * }
     */
    public static void NewtonMaterialSetAsSoftContact(MemorySegment material, float relaxation) {
        var mh$ = NewtonMaterialSetAsSoftContact$MH();
        try {
            mh$.invokeExact(material, relaxation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactSoftness$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonMaterialSetContactSoftness$MH,"NewtonMaterialSetContactSoftness");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactSoftness(struct NewtonMaterial* material, float softness);
     * }
     */
    public static void NewtonMaterialSetContactSoftness(MemorySegment material, float softness) {
        var mh$ = NewtonMaterialSetContactSoftness$MH();
        try {
            mh$.invokeExact(material, softness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactThickness$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonMaterialSetContactThickness$MH,"NewtonMaterialSetContactThickness");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactThickness(struct NewtonMaterial* material, float thickness);
     * }
     */
    public static void NewtonMaterialSetContactThickness(MemorySegment material, float thickness) {
        var mh$ = NewtonMaterialSetContactThickness$MH();
        try {
            mh$.invokeExact(material, thickness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactElasticity$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonMaterialSetContactElasticity$MH,"NewtonMaterialSetContactElasticity");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactElasticity(struct NewtonMaterial* material, float restitution);
     * }
     */
    public static void NewtonMaterialSetContactElasticity(MemorySegment material, float restitution) {
        var mh$ = NewtonMaterialSetContactElasticity$MH();
        try {
            mh$.invokeExact(material, restitution);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactFrictionState$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonMaterialSetContactFrictionState$MH,"NewtonMaterialSetContactFrictionState");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactFrictionState(struct NewtonMaterial* material, int state, int index);
     * }
     */
    public static void NewtonMaterialSetContactFrictionState(MemorySegment material, int state, int index) {
        var mh$ = NewtonMaterialSetContactFrictionState$MH();
        try {
            mh$.invokeExact(material, state, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactFrictionCoef$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonMaterialSetContactFrictionCoef$MH,"NewtonMaterialSetContactFrictionCoef");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactFrictionCoef(struct NewtonMaterial* material, float staticFrictionCoef, float kineticFrictionCoef, int index);
     * }
     */
    public static void NewtonMaterialSetContactFrictionCoef(MemorySegment material, float staticFrictionCoef, float kineticFrictionCoef, int index) {
        var mh$ = NewtonMaterialSetContactFrictionCoef$MH();
        try {
            mh$.invokeExact(material, staticFrictionCoef, kineticFrictionCoef, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactNormalAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonMaterialSetContactNormalAcceleration$MH,"NewtonMaterialSetContactNormalAcceleration");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactNormalAcceleration(struct NewtonMaterial* material, float accel);
     * }
     */
    public static void NewtonMaterialSetContactNormalAcceleration(MemorySegment material, float accel) {
        var mh$ = NewtonMaterialSetContactNormalAcceleration$MH();
        try {
            mh$.invokeExact(material, accel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactNormalDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonMaterialSetContactNormalDirection$MH,"NewtonMaterialSetContactNormalDirection");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactNormalDirection(struct NewtonMaterial* material, float* directionVector);
     * }
     */
    public static void NewtonMaterialSetContactNormalDirection(MemorySegment material, MemorySegment directionVector) {
        var mh$ = NewtonMaterialSetContactNormalDirection$MH();
        try {
            mh$.invokeExact(material, directionVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonMaterialSetContactPosition$MH,"NewtonMaterialSetContactPosition");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactPosition(struct NewtonMaterial* material, float* position);
     * }
     */
    public static void NewtonMaterialSetContactPosition(MemorySegment material, MemorySegment position) {
        var mh$ = NewtonMaterialSetContactPosition$MH();
        try {
            mh$.invokeExact(material, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactTangentFriction$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonMaterialSetContactTangentFriction$MH,"NewtonMaterialSetContactTangentFriction");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactTangentFriction(struct NewtonMaterial* material, float friction, int index);
     * }
     */
    public static void NewtonMaterialSetContactTangentFriction(MemorySegment material, float friction, int index) {
        var mh$ = NewtonMaterialSetContactTangentFriction$MH();
        try {
            mh$.invokeExact(material, friction, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactTangentAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonMaterialSetContactTangentAcceleration$MH,"NewtonMaterialSetContactTangentAcceleration");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactTangentAcceleration(struct NewtonMaterial* material, float accel, int index);
     * }
     */
    public static void NewtonMaterialSetContactTangentAcceleration(MemorySegment material, float accel, int index) {
        var mh$ = NewtonMaterialSetContactTangentAcceleration$MH();
        try {
            mh$.invokeExact(material, accel, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialContactRotateTangentDirections$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonMaterialContactRotateTangentDirections$MH,"NewtonMaterialContactRotateTangentDirections");
    }
    /**
     * {@snippet :
     * void NewtonMaterialContactRotateTangentDirections(struct NewtonMaterial* material, float* directionVector);
     * }
     */
    public static void NewtonMaterialContactRotateTangentDirections(MemorySegment material, MemorySegment directionVector) {
        var mh$ = NewtonMaterialContactRotateTangentDirections$MH();
        try {
            mh$.invokeExact(material, directionVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactPruningTolerance$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonMaterialGetContactPruningTolerance$MH,"NewtonMaterialGetContactPruningTolerance");
    }
    /**
     * {@snippet :
     * float NewtonMaterialGetContactPruningTolerance(struct NewtonJoint* contactJoint);
     * }
     */
    public static float NewtonMaterialGetContactPruningTolerance(MemorySegment contactJoint) {
        var mh$ = NewtonMaterialGetContactPruningTolerance$MH();
        try {
            return (float)mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactPruningTolerance$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonMaterialSetContactPruningTolerance$MH,"NewtonMaterialSetContactPruningTolerance");
    }
    /**
     * {@snippet :
     * void NewtonMaterialSetContactPruningTolerance(struct NewtonJoint* contactJoint, float tolerance);
     * }
     */
    public static void NewtonMaterialSetContactPruningTolerance(MemorySegment contactJoint, float tolerance) {
        var mh$ = NewtonMaterialSetContactPruningTolerance$MH();
        try {
            mh$.invokeExact(contactJoint, tolerance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateNull$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonCreateNull$MH,"NewtonCreateNull");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateNull(struct NewtonWorld* newtonWorld);
     * }
     */
    public static MemorySegment NewtonCreateNull(MemorySegment newtonWorld) {
        var mh$ = NewtonCreateNull$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonCreateSphere$MH,"NewtonCreateSphere");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateSphere(struct NewtonWorld* newtonWorld, float radius, int shapeID, float* offsetMatrix);
     * }
     */
    public static MemorySegment NewtonCreateSphere(MemorySegment newtonWorld, float radius, int shapeID, MemorySegment offsetMatrix) {
        var mh$ = NewtonCreateSphere$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, radius, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateBox$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonCreateBox$MH,"NewtonCreateBox");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateBox(struct NewtonWorld* newtonWorld, float dx, float dy, float dz, int shapeID, float* offsetMatrix);
     * }
     */
    public static MemorySegment NewtonCreateBox(MemorySegment newtonWorld, float dx, float dy, float dz, int shapeID, MemorySegment offsetMatrix) {
        var mh$ = NewtonCreateBox$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, dx, dy, dz, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCone$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonCreateCone$MH,"NewtonCreateCone");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateCone(struct NewtonWorld* newtonWorld, float radius, float height, int shapeID, float* offsetMatrix);
     * }
     */
    public static MemorySegment NewtonCreateCone(MemorySegment newtonWorld, float radius, float height, int shapeID, MemorySegment offsetMatrix) {
        var mh$ = NewtonCreateCone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, radius, height, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCapsule$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCreateCapsule$MH,"NewtonCreateCapsule");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateCapsule(struct NewtonWorld* newtonWorld, float radius0, float radius1, float height, int shapeID, float* offsetMatrix);
     * }
     */
    public static MemorySegment NewtonCreateCapsule(MemorySegment newtonWorld, float radius0, float radius1, float height, int shapeID, MemorySegment offsetMatrix) {
        var mh$ = NewtonCreateCapsule$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, radius0, radius1, height, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCreateCylinder$MH,"NewtonCreateCylinder");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateCylinder(struct NewtonWorld* newtonWorld, float radio0, float radio1, float height, int shapeID, float* offsetMatrix);
     * }
     */
    public static MemorySegment NewtonCreateCylinder(MemorySegment newtonWorld, float radio0, float radio1, float height, int shapeID, MemorySegment offsetMatrix) {
        var mh$ = NewtonCreateCylinder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, radio0, radio1, height, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateChamferCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCreateChamferCylinder$MH,"NewtonCreateChamferCylinder");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateChamferCylinder(struct NewtonWorld* newtonWorld, float radius, float height, int shapeID, float* offsetMatrix);
     * }
     */
    public static MemorySegment NewtonCreateChamferCylinder(MemorySegment newtonWorld, float radius, float height, int shapeID, MemorySegment offsetMatrix) {
        var mh$ = NewtonCreateChamferCylinder$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, radius, height, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateConvexHull$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCreateConvexHull$MH,"NewtonCreateConvexHull");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateConvexHull(struct NewtonWorld* newtonWorld, int count, float* vertexCloud, int strideInBytes, float tolerance, int shapeID, float* offsetMatrix);
     * }
     */
    public static MemorySegment NewtonCreateConvexHull(MemorySegment newtonWorld, int count, MemorySegment vertexCloud, int strideInBytes, float tolerance, int shapeID, MemorySegment offsetMatrix) {
        var mh$ = NewtonCreateConvexHull$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, count, vertexCloud, strideInBytes, tolerance, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateConvexHullFromMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCreateConvexHullFromMesh$MH,"NewtonCreateConvexHullFromMesh");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateConvexHullFromMesh(struct NewtonWorld* newtonWorld, struct NewtonMesh* mesh, float tolerance, int shapeID);
     * }
     */
    public static MemorySegment NewtonCreateConvexHullFromMesh(MemorySegment newtonWorld, MemorySegment mesh, float tolerance, int shapeID) {
        var mh$ = NewtonCreateConvexHullFromMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, mesh, tolerance, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetMode$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCollisionGetMode$MH,"NewtonCollisionGetMode");
    }
    /**
     * {@snippet :
     * int NewtonCollisionGetMode(struct NewtonCollision* convexCollision);
     * }
     */
    public static int NewtonCollisionGetMode(MemorySegment convexCollision) {
        var mh$ = NewtonCollisionGetMode$MH();
        try {
            return (int)mh$.invokeExact(convexCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetMode$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonCollisionSetMode$MH,"NewtonCollisionSetMode");
    }
    /**
     * {@snippet :
     * void NewtonCollisionSetMode(struct NewtonCollision* convexCollision, int mode);
     * }
     */
    public static void NewtonCollisionSetMode(MemorySegment convexCollision, int mode) {
        var mh$ = NewtonCollisionSetMode$MH();
        try {
            mh$.invokeExact(convexCollision, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexHullGetFaceIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonConvexHullGetFaceIndices$MH,"NewtonConvexHullGetFaceIndices");
    }
    /**
     * {@snippet :
     * int NewtonConvexHullGetFaceIndices(struct NewtonCollision* convexHullCollision, int face, int* faceIndices);
     * }
     */
    public static int NewtonConvexHullGetFaceIndices(MemorySegment convexHullCollision, int face, MemorySegment faceIndices) {
        var mh$ = NewtonConvexHullGetFaceIndices$MH();
        try {
            return (int)mh$.invokeExact(convexHullCollision, face, faceIndices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexHullGetVertexData$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonConvexHullGetVertexData$MH,"NewtonConvexHullGetVertexData");
    }
    /**
     * {@snippet :
     * int NewtonConvexHullGetVertexData(struct NewtonCollision* convexHullCollision, float** vertexData, int* strideInBytes);
     * }
     */
    public static int NewtonConvexHullGetVertexData(MemorySegment convexHullCollision, MemorySegment vertexData, MemorySegment strideInBytes) {
        var mh$ = NewtonConvexHullGetVertexData$MH();
        try {
            return (int)mh$.invokeExact(convexHullCollision, vertexData, strideInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexCollisionCalculateVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonConvexCollisionCalculateVolume$MH,"NewtonConvexCollisionCalculateVolume");
    }
    /**
     * {@snippet :
     * float NewtonConvexCollisionCalculateVolume(struct NewtonCollision* convexCollision);
     * }
     */
    public static float NewtonConvexCollisionCalculateVolume(MemorySegment convexCollision) {
        var mh$ = NewtonConvexCollisionCalculateVolume$MH();
        try {
            return (float)mh$.invokeExact(convexCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexCollisionCalculateInertialMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonConvexCollisionCalculateInertialMatrix$MH,"NewtonConvexCollisionCalculateInertialMatrix");
    }
    /**
     * {@snippet :
     * void NewtonConvexCollisionCalculateInertialMatrix(struct NewtonCollision* convexCollision, float* inertia, float* origin);
     * }
     */
    public static void NewtonConvexCollisionCalculateInertialMatrix(MemorySegment convexCollision, MemorySegment inertia, MemorySegment origin) {
        var mh$ = NewtonConvexCollisionCalculateInertialMatrix$MH();
        try {
            mh$.invokeExact(convexCollision, inertia, origin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexCollisionCalculateBuoyancyVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonConvexCollisionCalculateBuoyancyVolume$MH,"NewtonConvexCollisionCalculateBuoyancyVolume");
    }
    /**
     * {@snippet :
     * float NewtonConvexCollisionCalculateBuoyancyVolume(struct NewtonCollision* convexCollision, float* matrix, float* fluidPlane, float* centerOfBuoyancy);
     * }
     */
    public static float NewtonConvexCollisionCalculateBuoyancyVolume(MemorySegment convexCollision, MemorySegment matrix, MemorySegment fluidPlane, MemorySegment centerOfBuoyancy) {
        var mh$ = NewtonConvexCollisionCalculateBuoyancyVolume$MH();
        try {
            return (float)mh$.invokeExact(convexCollision, matrix, fluidPlane, centerOfBuoyancy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionDataPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCollisionDataPointer$MH,"NewtonCollisionDataPointer");
    }
    /**
     * {@snippet :
     * void* NewtonCollisionDataPointer(struct NewtonCollision* convexCollision);
     * }
     */
    public static MemorySegment NewtonCollisionDataPointer(MemorySegment convexCollision) {
        var mh$ = NewtonCollisionDataPointer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(convexCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCompoundCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCreateCompoundCollision$MH,"NewtonCreateCompoundCollision");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateCompoundCollision(struct NewtonWorld* newtonWorld, int shapeID);
     * }
     */
    public static MemorySegment NewtonCreateCompoundCollision(MemorySegment newtonWorld, int shapeID) {
        var mh$ = NewtonCreateCompoundCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCompoundCollisionFromMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCreateCompoundCollisionFromMesh$MH,"NewtonCreateCompoundCollisionFromMesh");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateCompoundCollisionFromMesh(struct NewtonWorld* newtonWorld, struct NewtonMesh* mesh, float hullTolerance, int shapeID, int subShapeID);
     * }
     */
    public static MemorySegment NewtonCreateCompoundCollisionFromMesh(MemorySegment newtonWorld, MemorySegment mesh, float hullTolerance, int shapeID, int subShapeID) {
        var mh$ = NewtonCreateCompoundCollisionFromMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, mesh, hullTolerance, shapeID, subShapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionBeginAddRemove$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCompoundCollisionBeginAddRemove$MH,"NewtonCompoundCollisionBeginAddRemove");
    }
    /**
     * {@snippet :
     * void NewtonCompoundCollisionBeginAddRemove(struct NewtonCollision* compoundCollision);
     * }
     */
    public static void NewtonCompoundCollisionBeginAddRemove(MemorySegment compoundCollision) {
        var mh$ = NewtonCompoundCollisionBeginAddRemove$MH();
        try {
            mh$.invokeExact(compoundCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionAddSubCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCompoundCollisionAddSubCollision$MH,"NewtonCompoundCollisionAddSubCollision");
    }
    /**
     * {@snippet :
     * void* NewtonCompoundCollisionAddSubCollision(struct NewtonCollision* compoundCollision, struct NewtonCollision* convexCollision);
     * }
     */
    public static MemorySegment NewtonCompoundCollisionAddSubCollision(MemorySegment compoundCollision, MemorySegment convexCollision) {
        var mh$ = NewtonCompoundCollisionAddSubCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(compoundCollision, convexCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionRemoveSubCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCompoundCollisionRemoveSubCollision$MH,"NewtonCompoundCollisionRemoveSubCollision");
    }
    /**
     * {@snippet :
     * void NewtonCompoundCollisionRemoveSubCollision(struct NewtonCollision* compoundCollision, void* collisionNode);
     * }
     */
    public static void NewtonCompoundCollisionRemoveSubCollision(MemorySegment compoundCollision, MemorySegment collisionNode) {
        var mh$ = NewtonCompoundCollisionRemoveSubCollision$MH();
        try {
            mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionRemoveSubCollisionByIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCompoundCollisionRemoveSubCollisionByIndex$MH,"NewtonCompoundCollisionRemoveSubCollisionByIndex");
    }
    /**
     * {@snippet :
     * void NewtonCompoundCollisionRemoveSubCollisionByIndex(struct NewtonCollision* compoundCollision, int nodeIndex);
     * }
     */
    public static void NewtonCompoundCollisionRemoveSubCollisionByIndex(MemorySegment compoundCollision, int nodeIndex) {
        var mh$ = NewtonCompoundCollisionRemoveSubCollisionByIndex$MH();
        try {
            mh$.invokeExact(compoundCollision, nodeIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionSetSubCollisionMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCompoundCollisionSetSubCollisionMatrix$MH,"NewtonCompoundCollisionSetSubCollisionMatrix");
    }
    /**
     * {@snippet :
     * void NewtonCompoundCollisionSetSubCollisionMatrix(struct NewtonCollision* compoundCollision, void* collisionNode, float* matrix);
     * }
     */
    public static void NewtonCompoundCollisionSetSubCollisionMatrix(MemorySegment compoundCollision, MemorySegment collisionNode, MemorySegment matrix) {
        var mh$ = NewtonCompoundCollisionSetSubCollisionMatrix$MH();
        try {
            mh$.invokeExact(compoundCollision, collisionNode, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionEndAddRemove$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCompoundCollisionEndAddRemove$MH,"NewtonCompoundCollisionEndAddRemove");
    }
    /**
     * {@snippet :
     * void NewtonCompoundCollisionEndAddRemove(struct NewtonCollision* compoundCollision);
     * }
     */
    public static void NewtonCompoundCollisionEndAddRemove(MemorySegment compoundCollision) {
        var mh$ = NewtonCompoundCollisionEndAddRemove$MH();
        try {
            mh$.invokeExact(compoundCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetFirstNode$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCompoundCollisionGetFirstNode$MH,"NewtonCompoundCollisionGetFirstNode");
    }
    /**
     * {@snippet :
     * void* NewtonCompoundCollisionGetFirstNode(struct NewtonCollision* compoundCollision);
     * }
     */
    public static MemorySegment NewtonCompoundCollisionGetFirstNode(MemorySegment compoundCollision) {
        var mh$ = NewtonCompoundCollisionGetFirstNode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(compoundCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetNextNode$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCompoundCollisionGetNextNode$MH,"NewtonCompoundCollisionGetNextNode");
    }
    /**
     * {@snippet :
     * void* NewtonCompoundCollisionGetNextNode(struct NewtonCollision* compoundCollision, void* collisionNode);
     * }
     */
    public static MemorySegment NewtonCompoundCollisionGetNextNode(MemorySegment compoundCollision, MemorySegment collisionNode) {
        var mh$ = NewtonCompoundCollisionGetNextNode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetNodeByIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCompoundCollisionGetNodeByIndex$MH,"NewtonCompoundCollisionGetNodeByIndex");
    }
    /**
     * {@snippet :
     * void* NewtonCompoundCollisionGetNodeByIndex(struct NewtonCollision* compoundCollision, int index);
     * }
     */
    public static MemorySegment NewtonCompoundCollisionGetNodeByIndex(MemorySegment compoundCollision, int index) {
        var mh$ = NewtonCompoundCollisionGetNodeByIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(compoundCollision, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetNodeIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$57.NewtonCompoundCollisionGetNodeIndex$MH,"NewtonCompoundCollisionGetNodeIndex");
    }
    /**
     * {@snippet :
     * int NewtonCompoundCollisionGetNodeIndex(struct NewtonCollision* compoundCollision, void* collisionNode);
     * }
     */
    public static int NewtonCompoundCollisionGetNodeIndex(MemorySegment compoundCollision, MemorySegment collisionNode) {
        var mh$ = NewtonCompoundCollisionGetNodeIndex$MH();
        try {
            return (int)mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetCollisionFromNode$MH() {
        return RuntimeHelper.requireNonNull(constants$57.NewtonCompoundCollisionGetCollisionFromNode$MH,"NewtonCompoundCollisionGetCollisionFromNode");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCompoundCollisionGetCollisionFromNode(struct NewtonCollision* compoundCollision, void* collisionNode);
     * }
     */
    public static MemorySegment NewtonCompoundCollisionGetCollisionFromNode(MemorySegment compoundCollision, MemorySegment collisionNode) {
        var mh$ = NewtonCompoundCollisionGetCollisionFromNode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateFracturedCompoundCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$58.NewtonCreateFracturedCompoundCollision$MH,"NewtonCreateFracturedCompoundCollision");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateFracturedCompoundCollision(struct NewtonWorld* newtonWorld, struct NewtonMesh* solidMesh, int shapeID, int fracturePhysicsMaterialID, int pointcloudCount, float* vertexCloud, int strideInBytes, int materialID, float* textureMatrix, void (*regenerateMainMeshCallback)(struct NewtonBody*,struct NewtonFracturedCompoundMeshPart*,struct NewtonCollision*), void (*emitFracturedCompound)(struct NewtonBody*), void (*emitFracfuredChunk)(struct NewtonBody*,struct NewtonFracturedCompoundMeshPart*,struct NewtonCollision*));
     * }
     */
    public static MemorySegment NewtonCreateFracturedCompoundCollision(MemorySegment newtonWorld, MemorySegment solidMesh, int shapeID, int fracturePhysicsMaterialID, int pointcloudCount, MemorySegment vertexCloud, int strideInBytes, int materialID, MemorySegment textureMatrix, MemorySegment regenerateMainMeshCallback, MemorySegment emitFracturedCompound, MemorySegment emitFracfuredChunk) {
        var mh$ = NewtonCreateFracturedCompoundCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, solidMesh, shapeID, fracturePhysicsMaterialID, pointcloudCount, vertexCloud, strideInBytes, materialID, textureMatrix, regenerateMainMeshCallback, emitFracturedCompound, emitFracfuredChunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundPlaneClip$MH() {
        return RuntimeHelper.requireNonNull(constants$58.NewtonFracturedCompoundPlaneClip$MH,"NewtonFracturedCompoundPlaneClip");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonFracturedCompoundPlaneClip(struct NewtonCollision* fracturedCompound, float* plane);
     * }
     */
    public static MemorySegment NewtonFracturedCompoundPlaneClip(MemorySegment fracturedCompound, MemorySegment plane) {
        var mh$ = NewtonFracturedCompoundPlaneClip$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fracturedCompound, plane);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundSetCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$59.NewtonFracturedCompoundSetCallbacks$MH,"NewtonFracturedCompoundSetCallbacks");
    }
    /**
     * {@snippet :
     * void NewtonFracturedCompoundSetCallbacks(struct NewtonCollision* fracturedCompound, void (*regenerateMainMeshCallback)(struct NewtonBody*,struct NewtonFracturedCompoundMeshPart*,struct NewtonCollision*), void (*emitFracturedCompound)(struct NewtonBody*), void (*emitFracfuredChunk)(struct NewtonBody*,struct NewtonFracturedCompoundMeshPart*,struct NewtonCollision*));
     * }
     */
    public static void NewtonFracturedCompoundSetCallbacks(MemorySegment fracturedCompound, MemorySegment regenerateMainMeshCallback, MemorySegment emitFracturedCompound, MemorySegment emitFracfuredChunk) {
        var mh$ = NewtonFracturedCompoundSetCallbacks$MH();
        try {
            mh$.invokeExact(fracturedCompound, regenerateMainMeshCallback, emitFracturedCompound, emitFracfuredChunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundIsNodeFreeToDetach$MH() {
        return RuntimeHelper.requireNonNull(constants$59.NewtonFracturedCompoundIsNodeFreeToDetach$MH,"NewtonFracturedCompoundIsNodeFreeToDetach");
    }
    /**
     * {@snippet :
     * int NewtonFracturedCompoundIsNodeFreeToDetach(struct NewtonCollision* fracturedCompound, void* collisionNode);
     * }
     */
    public static int NewtonFracturedCompoundIsNodeFreeToDetach(MemorySegment fracturedCompound, MemorySegment collisionNode) {
        var mh$ = NewtonFracturedCompoundIsNodeFreeToDetach$MH();
        try {
            return (int)mh$.invokeExact(fracturedCompound, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundNeighborNodeList$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonFracturedCompoundNeighborNodeList$MH,"NewtonFracturedCompoundNeighborNodeList");
    }
    /**
     * {@snippet :
     * int NewtonFracturedCompoundNeighborNodeList(struct NewtonCollision* fracturedCompound, void* collisionNode, void** list, int maxCount);
     * }
     */
    public static int NewtonFracturedCompoundNeighborNodeList(MemorySegment fracturedCompound, MemorySegment collisionNode, MemorySegment list, int maxCount) {
        var mh$ = NewtonFracturedCompoundNeighborNodeList$MH();
        try {
            return (int)mh$.invokeExact(fracturedCompound, collisionNode, list, maxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundGetMainMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonFracturedCompoundGetMainMesh$MH,"NewtonFracturedCompoundGetMainMesh");
    }
    /**
     * {@snippet :
     * struct NewtonFracturedCompoundMeshPart* NewtonFracturedCompoundGetMainMesh(struct NewtonCollision* fracturedCompound);
     * }
     */
    public static MemorySegment NewtonFracturedCompoundGetMainMesh(MemorySegment fracturedCompound) {
        var mh$ = NewtonFracturedCompoundGetMainMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fracturedCompound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundGetFirstSubMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonFracturedCompoundGetFirstSubMesh$MH,"NewtonFracturedCompoundGetFirstSubMesh");
    }
    /**
     * {@snippet :
     * struct NewtonFracturedCompoundMeshPart* NewtonFracturedCompoundGetFirstSubMesh(struct NewtonCollision* fracturedCompound);
     * }
     */
    public static MemorySegment NewtonFracturedCompoundGetFirstSubMesh(MemorySegment fracturedCompound) {
        var mh$ = NewtonFracturedCompoundGetFirstSubMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fracturedCompound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundGetNextSubMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonFracturedCompoundGetNextSubMesh$MH,"NewtonFracturedCompoundGetNextSubMesh");
    }
    /**
     * {@snippet :
     * struct NewtonFracturedCompoundMeshPart* NewtonFracturedCompoundGetNextSubMesh(struct NewtonCollision* fracturedCompound, struct NewtonFracturedCompoundMeshPart* subMesh);
     * }
     */
    public static MemorySegment NewtonFracturedCompoundGetNextSubMesh(MemorySegment fracturedCompound, MemorySegment subMesh) {
        var mh$ = NewtonFracturedCompoundGetNextSubMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fracturedCompound, subMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundCollisionGetVertexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonFracturedCompoundCollisionGetVertexCount$MH,"NewtonFracturedCompoundCollisionGetVertexCount");
    }
    /**
     * {@snippet :
     * int NewtonFracturedCompoundCollisionGetVertexCount(struct NewtonCollision* fracturedCompound, struct NewtonFracturedCompoundMeshPart* meshOwner);
     * }
     */
    public static int NewtonFracturedCompoundCollisionGetVertexCount(MemorySegment fracturedCompound, MemorySegment meshOwner) {
        var mh$ = NewtonFracturedCompoundCollisionGetVertexCount$MH();
        try {
            return (int)mh$.invokeExact(fracturedCompound, meshOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundCollisionGetVertexPositions$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonFracturedCompoundCollisionGetVertexPositions$MH,"NewtonFracturedCompoundCollisionGetVertexPositions");
    }
    /**
     * {@snippet :
     * float* NewtonFracturedCompoundCollisionGetVertexPositions(struct NewtonCollision* fracturedCompound, struct NewtonFracturedCompoundMeshPart* meshOwner);
     * }
     */
    public static MemorySegment NewtonFracturedCompoundCollisionGetVertexPositions(MemorySegment fracturedCompound, MemorySegment meshOwner) {
        var mh$ = NewtonFracturedCompoundCollisionGetVertexPositions$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fracturedCompound, meshOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundCollisionGetVertexNormals$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonFracturedCompoundCollisionGetVertexNormals$MH,"NewtonFracturedCompoundCollisionGetVertexNormals");
    }
    /**
     * {@snippet :
     * float* NewtonFracturedCompoundCollisionGetVertexNormals(struct NewtonCollision* fracturedCompound, struct NewtonFracturedCompoundMeshPart* meshOwner);
     * }
     */
    public static MemorySegment NewtonFracturedCompoundCollisionGetVertexNormals(MemorySegment fracturedCompound, MemorySegment meshOwner) {
        var mh$ = NewtonFracturedCompoundCollisionGetVertexNormals$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fracturedCompound, meshOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundCollisionGetVertexUVs$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonFracturedCompoundCollisionGetVertexUVs$MH,"NewtonFracturedCompoundCollisionGetVertexUVs");
    }
    /**
     * {@snippet :
     * float* NewtonFracturedCompoundCollisionGetVertexUVs(struct NewtonCollision* fracturedCompound, struct NewtonFracturedCompoundMeshPart* meshOwner);
     * }
     */
    public static MemorySegment NewtonFracturedCompoundCollisionGetVertexUVs(MemorySegment fracturedCompound, MemorySegment meshOwner) {
        var mh$ = NewtonFracturedCompoundCollisionGetVertexUVs$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fracturedCompound, meshOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetIndexStream$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonFracturedCompoundMeshPartGetIndexStream$MH,"NewtonFracturedCompoundMeshPartGetIndexStream");
    }
    /**
     * {@snippet :
     * int NewtonFracturedCompoundMeshPartGetIndexStream(struct NewtonCollision* fracturedCompound, struct NewtonFracturedCompoundMeshPart* meshOwner, void* segment, int* index);
     * }
     */
    public static int NewtonFracturedCompoundMeshPartGetIndexStream(MemorySegment fracturedCompound, MemorySegment meshOwner, MemorySegment segment, MemorySegment index) {
        var mh$ = NewtonFracturedCompoundMeshPartGetIndexStream$MH();
        try {
            return (int)mh$.invokeExact(fracturedCompound, meshOwner, segment, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetFirstSegment$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonFracturedCompoundMeshPartGetFirstSegment$MH,"NewtonFracturedCompoundMeshPartGetFirstSegment");
    }
    /**
     * {@snippet :
     * void* NewtonFracturedCompoundMeshPartGetFirstSegment(struct NewtonFracturedCompoundMeshPart* fractureCompoundMeshPart);
     * }
     */
    public static MemorySegment NewtonFracturedCompoundMeshPartGetFirstSegment(MemorySegment fractureCompoundMeshPart) {
        var mh$ = NewtonFracturedCompoundMeshPartGetFirstSegment$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fractureCompoundMeshPart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetNextSegment$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonFracturedCompoundMeshPartGetNextSegment$MH,"NewtonFracturedCompoundMeshPartGetNextSegment");
    }
    /**
     * {@snippet :
     * void* NewtonFracturedCompoundMeshPartGetNextSegment(void* fractureCompoundMeshSegment);
     * }
     */
    public static MemorySegment NewtonFracturedCompoundMeshPartGetNextSegment(MemorySegment fractureCompoundMeshSegment) {
        var mh$ = NewtonFracturedCompoundMeshPartGetNextSegment$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fractureCompoundMeshSegment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonFracturedCompoundMeshPartGetMaterial$MH,"NewtonFracturedCompoundMeshPartGetMaterial");
    }
    /**
     * {@snippet :
     * int NewtonFracturedCompoundMeshPartGetMaterial(void* fractureCompoundMeshSegment);
     * }
     */
    public static int NewtonFracturedCompoundMeshPartGetMaterial(MemorySegment fractureCompoundMeshSegment) {
        var mh$ = NewtonFracturedCompoundMeshPartGetMaterial$MH();
        try {
            return (int)mh$.invokeExact(fractureCompoundMeshSegment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetIndexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonFracturedCompoundMeshPartGetIndexCount$MH,"NewtonFracturedCompoundMeshPartGetIndexCount");
    }
    /**
     * {@snippet :
     * int NewtonFracturedCompoundMeshPartGetIndexCount(void* fractureCompoundMeshSegment);
     * }
     */
    public static int NewtonFracturedCompoundMeshPartGetIndexCount(MemorySegment fractureCompoundMeshSegment) {
        var mh$ = NewtonFracturedCompoundMeshPartGetIndexCount$MH();
        try {
            return (int)mh$.invokeExact(fractureCompoundMeshSegment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateSceneCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonCreateSceneCollision$MH,"NewtonCreateSceneCollision");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateSceneCollision(struct NewtonWorld* newtonWorld, int shapeID);
     * }
     */
    public static MemorySegment NewtonCreateSceneCollision(MemorySegment newtonWorld, int shapeID) {
        var mh$ = NewtonCreateSceneCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionBeginAddRemove$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonSceneCollisionBeginAddRemove$MH,"NewtonSceneCollisionBeginAddRemove");
    }
    /**
     * {@snippet :
     * void NewtonSceneCollisionBeginAddRemove(struct NewtonCollision* sceneCollision);
     * }
     */
    public static void NewtonSceneCollisionBeginAddRemove(MemorySegment sceneCollision) {
        var mh$ = NewtonSceneCollisionBeginAddRemove$MH();
        try {
            mh$.invokeExact(sceneCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionAddSubCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonSceneCollisionAddSubCollision$MH,"NewtonSceneCollisionAddSubCollision");
    }
    /**
     * {@snippet :
     * void* NewtonSceneCollisionAddSubCollision(struct NewtonCollision* sceneCollision, struct NewtonCollision* collision);
     * }
     */
    public static MemorySegment NewtonSceneCollisionAddSubCollision(MemorySegment sceneCollision, MemorySegment collision) {
        var mh$ = NewtonSceneCollisionAddSubCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sceneCollision, collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionRemoveSubCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonSceneCollisionRemoveSubCollision$MH,"NewtonSceneCollisionRemoveSubCollision");
    }
    /**
     * {@snippet :
     * void NewtonSceneCollisionRemoveSubCollision(struct NewtonCollision* compoundCollision, void* collisionNode);
     * }
     */
    public static void NewtonSceneCollisionRemoveSubCollision(MemorySegment compoundCollision, MemorySegment collisionNode) {
        var mh$ = NewtonSceneCollisionRemoveSubCollision$MH();
        try {
            mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionRemoveSubCollisionByIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonSceneCollisionRemoveSubCollisionByIndex$MH,"NewtonSceneCollisionRemoveSubCollisionByIndex");
    }
    /**
     * {@snippet :
     * void NewtonSceneCollisionRemoveSubCollisionByIndex(struct NewtonCollision* sceneCollision, int nodeIndex);
     * }
     */
    public static void NewtonSceneCollisionRemoveSubCollisionByIndex(MemorySegment sceneCollision, int nodeIndex) {
        var mh$ = NewtonSceneCollisionRemoveSubCollisionByIndex$MH();
        try {
            mh$.invokeExact(sceneCollision, nodeIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionSetSubCollisionMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonSceneCollisionSetSubCollisionMatrix$MH,"NewtonSceneCollisionSetSubCollisionMatrix");
    }
    /**
     * {@snippet :
     * void NewtonSceneCollisionSetSubCollisionMatrix(struct NewtonCollision* sceneCollision, void* collisionNode, float* matrix);
     * }
     */
    public static void NewtonSceneCollisionSetSubCollisionMatrix(MemorySegment sceneCollision, MemorySegment collisionNode, MemorySegment matrix) {
        var mh$ = NewtonSceneCollisionSetSubCollisionMatrix$MH();
        try {
            mh$.invokeExact(sceneCollision, collisionNode, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionEndAddRemove$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonSceneCollisionEndAddRemove$MH,"NewtonSceneCollisionEndAddRemove");
    }
    /**
     * {@snippet :
     * void NewtonSceneCollisionEndAddRemove(struct NewtonCollision* sceneCollision);
     * }
     */
    public static void NewtonSceneCollisionEndAddRemove(MemorySegment sceneCollision) {
        var mh$ = NewtonSceneCollisionEndAddRemove$MH();
        try {
            mh$.invokeExact(sceneCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetFirstNode$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonSceneCollisionGetFirstNode$MH,"NewtonSceneCollisionGetFirstNode");
    }
    /**
     * {@snippet :
     * void* NewtonSceneCollisionGetFirstNode(struct NewtonCollision* sceneCollision);
     * }
     */
    public static MemorySegment NewtonSceneCollisionGetFirstNode(MemorySegment sceneCollision) {
        var mh$ = NewtonSceneCollisionGetFirstNode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sceneCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetNextNode$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonSceneCollisionGetNextNode$MH,"NewtonSceneCollisionGetNextNode");
    }
    /**
     * {@snippet :
     * void* NewtonSceneCollisionGetNextNode(struct NewtonCollision* sceneCollision, void* collisionNode);
     * }
     */
    public static MemorySegment NewtonSceneCollisionGetNextNode(MemorySegment sceneCollision, MemorySegment collisionNode) {
        var mh$ = NewtonSceneCollisionGetNextNode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sceneCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetNodeByIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonSceneCollisionGetNodeByIndex$MH,"NewtonSceneCollisionGetNodeByIndex");
    }
    /**
     * {@snippet :
     * void* NewtonSceneCollisionGetNodeByIndex(struct NewtonCollision* sceneCollision, int index);
     * }
     */
    public static MemorySegment NewtonSceneCollisionGetNodeByIndex(MemorySegment sceneCollision, int index) {
        var mh$ = NewtonSceneCollisionGetNodeByIndex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sceneCollision, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetNodeIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonSceneCollisionGetNodeIndex$MH,"NewtonSceneCollisionGetNodeIndex");
    }
    /**
     * {@snippet :
     * int NewtonSceneCollisionGetNodeIndex(struct NewtonCollision* sceneCollision, void* collisionNode);
     * }
     */
    public static int NewtonSceneCollisionGetNodeIndex(MemorySegment sceneCollision, MemorySegment collisionNode) {
        var mh$ = NewtonSceneCollisionGetNodeIndex$MH();
        try {
            return (int)mh$.invokeExact(sceneCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetCollisionFromNode$MH() {
        return RuntimeHelper.requireNonNull(constants$64.NewtonSceneCollisionGetCollisionFromNode$MH,"NewtonSceneCollisionGetCollisionFromNode");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonSceneCollisionGetCollisionFromNode(struct NewtonCollision* sceneCollision, void* collisionNode);
     * }
     */
    public static MemorySegment NewtonSceneCollisionGetCollisionFromNode(MemorySegment sceneCollision, MemorySegment collisionNode) {
        var mh$ = NewtonSceneCollisionGetCollisionFromNode$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sceneCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateUserMeshCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$66.NewtonCreateUserMeshCollision$MH,"NewtonCreateUserMeshCollision");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateUserMeshCollision(struct NewtonWorld* newtonWorld, float* minBox, float* maxBox, void* userData, void (*collideCallback)(struct NewtonUserMeshCollisionCollideDesc*,void*), float (*rayHitCallback)(struct NewtonUserMeshCollisionRayHitDesc*), void (*destroyCallback)(void*), void (*getInfoCallback)(void*,struct NewtonCollisionInfoRecord*), int (*getLocalAABBCallback)(void*,float*,float*), int (*facesInAABBCallback)(void*,float*,float*,float**,int*,int*,int*,int,int*), void (*serializeCallback)(void*,void (*)(void*,void*,int),void*), int shapeID);
     * }
     */
    public static MemorySegment NewtonCreateUserMeshCollision(MemorySegment newtonWorld, MemorySegment minBox, MemorySegment maxBox, MemorySegment userData, MemorySegment collideCallback, MemorySegment rayHitCallback, MemorySegment destroyCallback, MemorySegment getInfoCallback, MemorySegment getLocalAABBCallback, MemorySegment facesInAABBCallback, MemorySegment serializeCallback, int shapeID) {
        var mh$ = NewtonCreateUserMeshCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, minBox, maxBox, userData, collideCallback, rayHitCallback, destroyCallback, getInfoCallback, getLocalAABBCallback, facesInAABBCallback, serializeCallback, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserMeshCollisionContinuousOverlapTest$MH() {
        return RuntimeHelper.requireNonNull(constants$66.NewtonUserMeshCollisionContinuousOverlapTest$MH,"NewtonUserMeshCollisionContinuousOverlapTest");
    }
    /**
     * {@snippet :
     * int NewtonUserMeshCollisionContinuousOverlapTest(struct NewtonUserMeshCollisionCollideDesc* collideDescData, void* continueCollisionHandle, float* minAabb, float* maxAabb);
     * }
     */
    public static int NewtonUserMeshCollisionContinuousOverlapTest(MemorySegment collideDescData, MemorySegment continueCollisionHandle, MemorySegment minAabb, MemorySegment maxAabb) {
        var mh$ = NewtonUserMeshCollisionContinuousOverlapTest$MH();
        try {
            return (int)mh$.invokeExact(collideDescData, continueCollisionHandle, minAabb, maxAabb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCollisionFromSerialization$MH() {
        return RuntimeHelper.requireNonNull(constants$67.NewtonCreateCollisionFromSerialization$MH,"NewtonCreateCollisionFromSerialization");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateCollisionFromSerialization(struct NewtonWorld* newtonWorld, void (*deserializeFunction)(void*,void*,int), void* serializeHandle);
     * }
     */
    public static MemorySegment NewtonCreateCollisionFromSerialization(MemorySegment newtonWorld, MemorySegment deserializeFunction, MemorySegment serializeHandle) {
        var mh$ = NewtonCreateCollisionFromSerialization$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, deserializeFunction, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSerialize$MH() {
        return RuntimeHelper.requireNonNull(constants$67.NewtonCollisionSerialize$MH,"NewtonCollisionSerialize");
    }
    /**
     * {@snippet :
     * void NewtonCollisionSerialize(struct NewtonWorld* newtonWorld, struct NewtonCollision* collision, void (*serializeFunction)(void*,void*,int), void* serializeHandle);
     * }
     */
    public static void NewtonCollisionSerialize(MemorySegment newtonWorld, MemorySegment collision, MemorySegment serializeFunction, MemorySegment serializeHandle) {
        var mh$ = NewtonCollisionSerialize$MH();
        try {
            mh$.invokeExact(newtonWorld, collision, serializeFunction, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$67.NewtonCollisionGetInfo$MH,"NewtonCollisionGetInfo");
    }
    /**
     * {@snippet :
     * void NewtonCollisionGetInfo(struct NewtonCollision* collision, struct NewtonCollisionInfoRecord* collisionInfo);
     * }
     */
    public static void NewtonCollisionGetInfo(MemorySegment collision, MemorySegment collisionInfo) {
        var mh$ = NewtonCollisionGetInfo$MH();
        try {
            mh$.invokeExact(collision, collisionInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateHeightFieldCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonCreateHeightFieldCollision$MH,"NewtonCreateHeightFieldCollision");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateHeightFieldCollision(struct NewtonWorld* newtonWorld, int width, int height, int gridsDiagonals, int elevationdatType, void* elevationMap, char* attributeMap, float verticalScale, float horizontalScale_x, float horizontalScale_z, int shapeID);
     * }
     */
    public static MemorySegment NewtonCreateHeightFieldCollision(MemorySegment newtonWorld, int width, int height, int gridsDiagonals, int elevationdatType, MemorySegment elevationMap, MemorySegment attributeMap, float verticalScale, float horizontalScale_x, float horizontalScale_z, int shapeID) {
        var mh$ = NewtonCreateHeightFieldCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, width, height, gridsDiagonals, elevationdatType, elevationMap, attributeMap, verticalScale, horizontalScale_x, horizontalScale_z, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHeightFieldSetUserRayCastCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonHeightFieldSetUserRayCastCallback$MH,"NewtonHeightFieldSetUserRayCastCallback");
    }
    /**
     * {@snippet :
     * void NewtonHeightFieldSetUserRayCastCallback(struct NewtonCollision* heightfieldCollision, float (*rayHitCallback)(struct NewtonBody*,struct NewtonCollision*,float,int,int,float*,int,void*));
     * }
     */
    public static void NewtonHeightFieldSetUserRayCastCallback(MemorySegment heightfieldCollision, MemorySegment rayHitCallback) {
        var mh$ = NewtonHeightFieldSetUserRayCastCallback$MH();
        try {
            mh$.invokeExact(heightfieldCollision, rayHitCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateTreeCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonCreateTreeCollision$MH,"NewtonCreateTreeCollision");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateTreeCollision(struct NewtonWorld* newtonWorld, int shapeID);
     * }
     */
    public static MemorySegment NewtonCreateTreeCollision(MemorySegment newtonWorld, int shapeID) {
        var mh$ = NewtonCreateTreeCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateTreeCollisionFromMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonCreateTreeCollisionFromMesh$MH,"NewtonCreateTreeCollisionFromMesh");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateTreeCollisionFromMesh(struct NewtonWorld* newtonWorld, struct NewtonMesh* mesh, int shapeID);
     * }
     */
    public static MemorySegment NewtonCreateTreeCollisionFromMesh(MemorySegment newtonWorld, MemorySegment mesh, int shapeID) {
        var mh$ = NewtonCreateTreeCollisionFromMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, mesh, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionSetUserRayCastCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonTreeCollisionSetUserRayCastCallback$MH,"NewtonTreeCollisionSetUserRayCastCallback");
    }
    /**
     * {@snippet :
     * void NewtonTreeCollisionSetUserRayCastCallback(struct NewtonCollision* treeCollision, float (*rayHitCallback)(struct NewtonBody*,struct NewtonCollision*,float,float*,int,void*));
     * }
     */
    public static void NewtonTreeCollisionSetUserRayCastCallback(MemorySegment treeCollision, MemorySegment rayHitCallback) {
        var mh$ = NewtonTreeCollisionSetUserRayCastCallback$MH();
        try {
            mh$.invokeExact(treeCollision, rayHitCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionBeginBuild$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonTreeCollisionBeginBuild$MH,"NewtonTreeCollisionBeginBuild");
    }
    /**
     * {@snippet :
     * void NewtonTreeCollisionBeginBuild(struct NewtonCollision* treeCollision);
     * }
     */
    public static void NewtonTreeCollisionBeginBuild(MemorySegment treeCollision) {
        var mh$ = NewtonTreeCollisionBeginBuild$MH();
        try {
            mh$.invokeExact(treeCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionAddFace$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonTreeCollisionAddFace$MH,"NewtonTreeCollisionAddFace");
    }
    /**
     * {@snippet :
     * void NewtonTreeCollisionAddFace(struct NewtonCollision* treeCollision, int vertexCount, float* vertexPtr, int strideInBytes, int faceAttribute);
     * }
     */
    public static void NewtonTreeCollisionAddFace(MemorySegment treeCollision, int vertexCount, MemorySegment vertexPtr, int strideInBytes, int faceAttribute) {
        var mh$ = NewtonTreeCollisionAddFace$MH();
        try {
            mh$.invokeExact(treeCollision, vertexCount, vertexPtr, strideInBytes, faceAttribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionEndBuild$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonTreeCollisionEndBuild$MH,"NewtonTreeCollisionEndBuild");
    }
    /**
     * {@snippet :
     * void NewtonTreeCollisionEndBuild(struct NewtonCollision* treeCollision, int optimize);
     * }
     */
    public static void NewtonTreeCollisionEndBuild(MemorySegment treeCollision, int optimize) {
        var mh$ = NewtonTreeCollisionEndBuild$MH();
        try {
            mh$.invokeExact(treeCollision, optimize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionGetFaceAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonTreeCollisionGetFaceAttribute$MH,"NewtonTreeCollisionGetFaceAttribute");
    }
    /**
     * {@snippet :
     * int NewtonTreeCollisionGetFaceAttribute(struct NewtonCollision* treeCollision, int* faceIndexArray, int indexCount);
     * }
     */
    public static int NewtonTreeCollisionGetFaceAttribute(MemorySegment treeCollision, MemorySegment faceIndexArray, int indexCount) {
        var mh$ = NewtonTreeCollisionGetFaceAttribute$MH();
        try {
            return (int)mh$.invokeExact(treeCollision, faceIndexArray, indexCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionSetFaceAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonTreeCollisionSetFaceAttribute$MH,"NewtonTreeCollisionSetFaceAttribute");
    }
    /**
     * {@snippet :
     * void NewtonTreeCollisionSetFaceAttribute(struct NewtonCollision* treeCollision, int* faceIndexArray, int indexCount, int attribute);
     * }
     */
    public static void NewtonTreeCollisionSetFaceAttribute(MemorySegment treeCollision, MemorySegment faceIndexArray, int indexCount, int attribute) {
        var mh$ = NewtonTreeCollisionSetFaceAttribute$MH();
        try {
            mh$.invokeExact(treeCollision, faceIndexArray, indexCount, attribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionForEachFace$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonTreeCollisionForEachFace$MH,"NewtonTreeCollisionForEachFace");
    }
    /**
     * {@snippet :
     * void NewtonTreeCollisionForEachFace(struct NewtonCollision* treeCollision, int (*forEachFaceCallback)(void*,float*,int,int*,int), void* context);
     * }
     */
    public static void NewtonTreeCollisionForEachFace(MemorySegment treeCollision, MemorySegment forEachFaceCallback, MemorySegment context) {
        var mh$ = NewtonTreeCollisionForEachFace$MH();
        try {
            mh$.invokeExact(treeCollision, forEachFaceCallback, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionGetVertexListTriangleListInAABB$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonTreeCollisionGetVertexListTriangleListInAABB$MH,"NewtonTreeCollisionGetVertexListTriangleListInAABB");
    }
    /**
     * {@snippet :
     * int NewtonTreeCollisionGetVertexListTriangleListInAABB(struct NewtonCollision* treeCollision, float* p0, float* p1, float** vertexArray, int* vertexCount, int* vertexStrideInBytes, int* indexList, int maxIndexCount, int* faceAttribute);
     * }
     */
    public static int NewtonTreeCollisionGetVertexListTriangleListInAABB(MemorySegment treeCollision, MemorySegment p0, MemorySegment p1, MemorySegment vertexArray, MemorySegment vertexCount, MemorySegment vertexStrideInBytes, MemorySegment indexList, int maxIndexCount, MemorySegment faceAttribute) {
        var mh$ = NewtonTreeCollisionGetVertexListTriangleListInAABB$MH();
        try {
            return (int)mh$.invokeExact(treeCollision, p0, p1, vertexArray, vertexCount, vertexStrideInBytes, indexList, maxIndexCount, faceAttribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonStaticCollisionSetDebugCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonStaticCollisionSetDebugCallback$MH,"NewtonStaticCollisionSetDebugCallback");
    }
    /**
     * {@snippet :
     * void NewtonStaticCollisionSetDebugCallback(struct NewtonCollision* staticCollision, void (*userCallback)(struct NewtonBody*,struct NewtonBody*,int,int,float*,int));
     * }
     */
    public static void NewtonStaticCollisionSetDebugCallback(MemorySegment staticCollision, MemorySegment userCallback) {
        var mh$ = NewtonStaticCollisionSetDebugCallback$MH();
        try {
            mh$.invokeExact(staticCollision, userCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionCreateInstance$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonCollisionCreateInstance$MH,"NewtonCollisionCreateInstance");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCollisionCreateInstance(struct NewtonCollision* collision);
     * }
     */
    public static MemorySegment NewtonCollisionCreateInstance(MemorySegment collision) {
        var mh$ = NewtonCollisionCreateInstance$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonCollisionGetType$MH,"NewtonCollisionGetType");
    }
    /**
     * {@snippet :
     * int NewtonCollisionGetType(struct NewtonCollision* collision);
     * }
     */
    public static int NewtonCollisionGetType(MemorySegment collision) {
        var mh$ = NewtonCollisionGetType$MH();
        try {
            return (int)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionIsConvexShape$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonCollisionIsConvexShape$MH,"NewtonCollisionIsConvexShape");
    }
    /**
     * {@snippet :
     * int NewtonCollisionIsConvexShape(struct NewtonCollision* collision);
     * }
     */
    public static int NewtonCollisionIsConvexShape(MemorySegment collision) {
        var mh$ = NewtonCollisionIsConvexShape$MH();
        try {
            return (int)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionIsStaticShape$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonCollisionIsStaticShape$MH,"NewtonCollisionIsStaticShape");
    }
    /**
     * {@snippet :
     * int NewtonCollisionIsStaticShape(struct NewtonCollision* collision);
     * }
     */
    public static int NewtonCollisionIsStaticShape(MemorySegment collision) {
        var mh$ = NewtonCollisionIsStaticShape$MH();
        try {
            return (int)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonCollisionSetUserData$MH,"NewtonCollisionSetUserData");
    }
    /**
     * {@snippet :
     * void NewtonCollisionSetUserData(struct NewtonCollision* collision, void* userData);
     * }
     */
    public static void NewtonCollisionSetUserData(MemorySegment collision, MemorySegment userData) {
        var mh$ = NewtonCollisionSetUserData$MH();
        try {
            mh$.invokeExact(collision, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonCollisionGetUserData$MH,"NewtonCollisionGetUserData");
    }
    /**
     * {@snippet :
     * void* NewtonCollisionGetUserData(struct NewtonCollision* collision);
     * }
     */
    public static MemorySegment NewtonCollisionGetUserData(MemorySegment collision) {
        var mh$ = NewtonCollisionGetUserData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetUserID$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonCollisionSetUserID$MH,"NewtonCollisionSetUserID");
    }
    /**
     * {@snippet :
     * void NewtonCollisionSetUserID(struct NewtonCollision* collision, long long id);
     * }
     */
    public static void NewtonCollisionSetUserID(MemorySegment collision, long id) {
        var mh$ = NewtonCollisionSetUserID$MH();
        try {
            mh$.invokeExact(collision, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetUserID$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonCollisionGetUserID$MH,"NewtonCollisionGetUserID");
    }
    /**
     * {@snippet :
     * long long NewtonCollisionGetUserID(struct NewtonCollision* collision);
     * }
     */
    public static long NewtonCollisionGetUserID(MemorySegment collision) {
        var mh$ = NewtonCollisionGetUserID$MH();
        try {
            return (long)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonCollisionGetMaterial$MH,"NewtonCollisionGetMaterial");
    }
    /**
     * {@snippet :
     * void NewtonCollisionGetMaterial(struct NewtonCollision* collision, struct NewtonCollisionMaterial* userData);
     * }
     */
    public static void NewtonCollisionGetMaterial(MemorySegment collision, MemorySegment userData) {
        var mh$ = NewtonCollisionGetMaterial$MH();
        try {
            mh$.invokeExact(collision, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonCollisionSetMaterial$MH,"NewtonCollisionSetMaterial");
    }
    /**
     * {@snippet :
     * void NewtonCollisionSetMaterial(struct NewtonCollision* collision, struct NewtonCollisionMaterial* userData);
     * }
     */
    public static void NewtonCollisionSetMaterial(MemorySegment collision, MemorySegment userData) {
        var mh$ = NewtonCollisionSetMaterial$MH();
        try {
            mh$.invokeExact(collision, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetSubCollisionHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonCollisionGetSubCollisionHandle$MH,"NewtonCollisionGetSubCollisionHandle");
    }
    /**
     * {@snippet :
     * void* NewtonCollisionGetSubCollisionHandle(struct NewtonCollision* collision);
     * }
     */
    public static MemorySegment NewtonCollisionGetSubCollisionHandle(MemorySegment collision) {
        var mh$ = NewtonCollisionGetSubCollisionHandle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetParentInstance$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonCollisionGetParentInstance$MH,"NewtonCollisionGetParentInstance");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCollisionGetParentInstance(struct NewtonCollision* collision);
     * }
     */
    public static MemorySegment NewtonCollisionGetParentInstance(MemorySegment collision) {
        var mh$ = NewtonCollisionGetParentInstance$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonCollisionSetMatrix$MH,"NewtonCollisionSetMatrix");
    }
    /**
     * {@snippet :
     * void NewtonCollisionSetMatrix(struct NewtonCollision* collision, float* matrix);
     * }
     */
    public static void NewtonCollisionSetMatrix(MemorySegment collision, MemorySegment matrix) {
        var mh$ = NewtonCollisionSetMatrix$MH();
        try {
            mh$.invokeExact(collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonCollisionGetMatrix$MH,"NewtonCollisionGetMatrix");
    }
    /**
     * {@snippet :
     * void NewtonCollisionGetMatrix(struct NewtonCollision* collision, float* matrix);
     * }
     */
    public static void NewtonCollisionGetMatrix(MemorySegment collision, MemorySegment matrix) {
        var mh$ = NewtonCollisionGetMatrix$MH();
        try {
            mh$.invokeExact(collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonCollisionSetScale$MH,"NewtonCollisionSetScale");
    }
    /**
     * {@snippet :
     * void NewtonCollisionSetScale(struct NewtonCollision* collision, float scaleX, float scaleY, float scaleZ);
     * }
     */
    public static void NewtonCollisionSetScale(MemorySegment collision, float scaleX, float scaleY, float scaleZ) {
        var mh$ = NewtonCollisionSetScale$MH();
        try {
            mh$.invokeExact(collision, scaleX, scaleY, scaleZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonCollisionGetScale$MH,"NewtonCollisionGetScale");
    }
    /**
     * {@snippet :
     * void NewtonCollisionGetScale(struct NewtonCollision* collision, float* scaleX, float* scaleY, float* scaleZ);
     * }
     */
    public static void NewtonCollisionGetScale(MemorySegment collision, MemorySegment scaleX, MemorySegment scaleY, MemorySegment scaleZ) {
        var mh$ = NewtonCollisionGetScale$MH();
        try {
            mh$.invokeExact(collision, scaleX, scaleY, scaleZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroyCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonDestroyCollision$MH,"NewtonDestroyCollision");
    }
    /**
     * {@snippet :
     * void NewtonDestroyCollision(struct NewtonCollision* collision);
     * }
     */
    public static void NewtonDestroyCollision(MemorySegment collision) {
        var mh$ = NewtonDestroyCollision$MH();
        try {
            mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetSkinThickness$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonCollisionGetSkinThickness$MH,"NewtonCollisionGetSkinThickness");
    }
    /**
     * {@snippet :
     * float NewtonCollisionGetSkinThickness(struct NewtonCollision* collision);
     * }
     */
    public static float NewtonCollisionGetSkinThickness(MemorySegment collision) {
        var mh$ = NewtonCollisionGetSkinThickness$MH();
        try {
            return (float)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetSkinThickness$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonCollisionSetSkinThickness$MH,"NewtonCollisionSetSkinThickness");
    }
    /**
     * {@snippet :
     * void NewtonCollisionSetSkinThickness(struct NewtonCollision* collision, float thickness);
     * }
     */
    public static void NewtonCollisionSetSkinThickness(MemorySegment collision, float thickness) {
        var mh$ = NewtonCollisionSetSkinThickness$MH();
        try {
            mh$.invokeExact(collision, thickness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionIntersectionTest$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonCollisionIntersectionTest$MH,"NewtonCollisionIntersectionTest");
    }
    /**
     * {@snippet :
     * int NewtonCollisionIntersectionTest(struct NewtonWorld* newtonWorld, struct NewtonCollision* collisionA, float* matrixA, struct NewtonCollision* collisionB, float* matrixB, int threadIndex);
     * }
     */
    public static int NewtonCollisionIntersectionTest(MemorySegment newtonWorld, MemorySegment collisionA, MemorySegment matrixA, MemorySegment collisionB, MemorySegment matrixB, int threadIndex) {
        var mh$ = NewtonCollisionIntersectionTest$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld, collisionA, matrixA, collisionB, matrixB, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionPointDistance$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonCollisionPointDistance$MH,"NewtonCollisionPointDistance");
    }
    /**
     * {@snippet :
     * int NewtonCollisionPointDistance(struct NewtonWorld* newtonWorld, float* point, struct NewtonCollision* collision, float* matrix, float* contact, float* normal, int threadIndex);
     * }
     */
    public static int NewtonCollisionPointDistance(MemorySegment newtonWorld, MemorySegment point, MemorySegment collision, MemorySegment matrix, MemorySegment contact, MemorySegment normal, int threadIndex) {
        var mh$ = NewtonCollisionPointDistance$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld, point, collision, matrix, contact, normal, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionClosestPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonCollisionClosestPoint$MH,"NewtonCollisionClosestPoint");
    }
    /**
     * {@snippet :
     * int NewtonCollisionClosestPoint(struct NewtonWorld* newtonWorld, struct NewtonCollision* collisionA, float* matrixA, struct NewtonCollision* collisionB, float* matrixB, float* contactA, float* contactB, float* normalAB, int threadIndex);
     * }
     */
    public static int NewtonCollisionClosestPoint(MemorySegment newtonWorld, MemorySegment collisionA, MemorySegment matrixA, MemorySegment collisionB, MemorySegment matrixB, MemorySegment contactA, MemorySegment contactB, MemorySegment normalAB, int threadIndex) {
        var mh$ = NewtonCollisionClosestPoint$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld, collisionA, matrixA, collisionB, matrixB, contactA, contactB, normalAB, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionCollide$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonCollisionCollide$MH,"NewtonCollisionCollide");
    }
    /**
     * {@snippet :
     * int NewtonCollisionCollide(struct NewtonWorld* newtonWorld, int maxSize, struct NewtonCollision* collisionA, float* matrixA, struct NewtonCollision* collisionB, float* matrixB, float* contacts, float* normals, float* penetration, long long* attributeA, long long* attributeB, int threadIndex);
     * }
     */
    public static int NewtonCollisionCollide(MemorySegment newtonWorld, int maxSize, MemorySegment collisionA, MemorySegment matrixA, MemorySegment collisionB, MemorySegment matrixB, MemorySegment contacts, MemorySegment normals, MemorySegment penetration, MemorySegment attributeA, MemorySegment attributeB, int threadIndex) {
        var mh$ = NewtonCollisionCollide$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld, maxSize, collisionA, matrixA, collisionB, matrixB, contacts, normals, penetration, attributeA, attributeB, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionCollideContinue$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonCollisionCollideContinue$MH,"NewtonCollisionCollideContinue");
    }
    /**
     * {@snippet :
     * int NewtonCollisionCollideContinue(struct NewtonWorld* newtonWorld, int maxSize, float timestep, struct NewtonCollision* collisionA, float* matrixA, float* velocA, float* omegaA, struct NewtonCollision* collisionB, float* matrixB, float* velocB, float* omegaB, float* timeOfImpact, float* contacts, float* normals, float* penetration, long long* attributeA, long long* attributeB, int threadIndex);
     * }
     */
    public static int NewtonCollisionCollideContinue(MemorySegment newtonWorld, int maxSize, float timestep, MemorySegment collisionA, MemorySegment matrixA, MemorySegment velocA, MemorySegment omegaA, MemorySegment collisionB, MemorySegment matrixB, MemorySegment velocB, MemorySegment omegaB, MemorySegment timeOfImpact, MemorySegment contacts, MemorySegment normals, MemorySegment penetration, MemorySegment attributeA, MemorySegment attributeB, int threadIndex) {
        var mh$ = NewtonCollisionCollideContinue$MH();
        try {
            return (int)mh$.invokeExact(newtonWorld, maxSize, timestep, collisionA, matrixA, velocA, omegaA, collisionB, matrixB, velocB, omegaB, timeOfImpact, contacts, normals, penetration, attributeA, attributeB, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSupportVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonCollisionSupportVertex$MH,"NewtonCollisionSupportVertex");
    }
    /**
     * {@snippet :
     * void NewtonCollisionSupportVertex(struct NewtonCollision* collision, float* dir, float* vertex);
     * }
     */
    public static void NewtonCollisionSupportVertex(MemorySegment collision, MemorySegment dir, MemorySegment vertex) {
        var mh$ = NewtonCollisionSupportVertex$MH();
        try {
            mh$.invokeExact(collision, dir, vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionRayCast$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonCollisionRayCast$MH,"NewtonCollisionRayCast");
    }
    /**
     * {@snippet :
     * float NewtonCollisionRayCast(struct NewtonCollision* collision, float* p0, float* p1, float* normal, long long* attribute);
     * }
     */
    public static float NewtonCollisionRayCast(MemorySegment collision, MemorySegment p0, MemorySegment p1, MemorySegment normal, MemorySegment attribute) {
        var mh$ = NewtonCollisionRayCast$MH();
        try {
            return (float)mh$.invokeExact(collision, p0, p1, normal, attribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionCalculateAABB$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonCollisionCalculateAABB$MH,"NewtonCollisionCalculateAABB");
    }
    /**
     * {@snippet :
     * void NewtonCollisionCalculateAABB(struct NewtonCollision* collision, float* matrix, float* p0, float* p1);
     * }
     */
    public static void NewtonCollisionCalculateAABB(MemorySegment collision, MemorySegment matrix, MemorySegment p0, MemorySegment p1) {
        var mh$ = NewtonCollisionCalculateAABB$MH();
        try {
            mh$.invokeExact(collision, matrix, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionForEachPolygonDo$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonCollisionForEachPolygonDo$MH,"NewtonCollisionForEachPolygonDo");
    }
    /**
     * {@snippet :
     * void NewtonCollisionForEachPolygonDo(struct NewtonCollision* collision, float* matrix, void (*callback)(void*,int,float*,int), void* userData);
     * }
     */
    public static void NewtonCollisionForEachPolygonDo(MemorySegment collision, MemorySegment matrix, MemorySegment callback, MemorySegment userData) {
        var mh$ = NewtonCollisionForEachPolygonDo$MH();
        try {
            mh$.invokeExact(collision, matrix, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonCollisionAggregateCreate$MH,"NewtonCollisionAggregateCreate");
    }
    /**
     * {@snippet :
     * void* NewtonCollisionAggregateCreate(struct NewtonWorld* world);
     * }
     */
    public static MemorySegment NewtonCollisionAggregateCreate(MemorySegment world) {
        var mh$ = NewtonCollisionAggregateCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(world);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonCollisionAggregateDestroy$MH,"NewtonCollisionAggregateDestroy");
    }
    /**
     * {@snippet :
     * void NewtonCollisionAggregateDestroy(void* aggregate);
     * }
     */
    public static void NewtonCollisionAggregateDestroy(MemorySegment aggregate) {
        var mh$ = NewtonCollisionAggregateDestroy$MH();
        try {
            mh$.invokeExact(aggregate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateAddBody$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonCollisionAggregateAddBody$MH,"NewtonCollisionAggregateAddBody");
    }
    /**
     * {@snippet :
     * void NewtonCollisionAggregateAddBody(void* aggregate, struct NewtonBody* body);
     * }
     */
    public static void NewtonCollisionAggregateAddBody(MemorySegment aggregate, MemorySegment body) {
        var mh$ = NewtonCollisionAggregateAddBody$MH();
        try {
            mh$.invokeExact(aggregate, body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateRemoveBody$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonCollisionAggregateRemoveBody$MH,"NewtonCollisionAggregateRemoveBody");
    }
    /**
     * {@snippet :
     * void NewtonCollisionAggregateRemoveBody(void* aggregate, struct NewtonBody* body);
     * }
     */
    public static void NewtonCollisionAggregateRemoveBody(MemorySegment aggregate, MemorySegment body) {
        var mh$ = NewtonCollisionAggregateRemoveBody$MH();
        try {
            mh$.invokeExact(aggregate, body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateGetSelfCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonCollisionAggregateGetSelfCollision$MH,"NewtonCollisionAggregateGetSelfCollision");
    }
    /**
     * {@snippet :
     * int NewtonCollisionAggregateGetSelfCollision(void* aggregate);
     * }
     */
    public static int NewtonCollisionAggregateGetSelfCollision(MemorySegment aggregate) {
        var mh$ = NewtonCollisionAggregateGetSelfCollision$MH();
        try {
            return (int)mh$.invokeExact(aggregate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateSetSelfCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonCollisionAggregateSetSelfCollision$MH,"NewtonCollisionAggregateSetSelfCollision");
    }
    /**
     * {@snippet :
     * void NewtonCollisionAggregateSetSelfCollision(void* aggregate, int state);
     * }
     */
    public static void NewtonCollisionAggregateSetSelfCollision(MemorySegment aggregate, int state) {
        var mh$ = NewtonCollisionAggregateSetSelfCollision$MH();
        try {
            mh$.invokeExact(aggregate, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetEulerAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonSetEulerAngle$MH,"NewtonSetEulerAngle");
    }
    /**
     * {@snippet :
     * void NewtonSetEulerAngle(float* eulersAngles, float* matrix);
     * }
     */
    public static void NewtonSetEulerAngle(MemorySegment eulersAngles, MemorySegment matrix) {
        var mh$ = NewtonSetEulerAngle$MH();
        try {
            mh$.invokeExact(eulersAngles, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetEulerAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonGetEulerAngle$MH,"NewtonGetEulerAngle");
    }
    /**
     * {@snippet :
     * void NewtonGetEulerAngle(float* matrix, float* eulersAngles0, float* eulersAngles1);
     * }
     */
    public static void NewtonGetEulerAngle(MemorySegment matrix, MemorySegment eulersAngles0, MemorySegment eulersAngles1) {
        var mh$ = NewtonGetEulerAngle$MH();
        try {
            mh$.invokeExact(matrix, eulersAngles0, eulersAngles1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCalculateSpringDamperAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonCalculateSpringDamperAcceleration$MH,"NewtonCalculateSpringDamperAcceleration");
    }
    /**
     * {@snippet :
     * float NewtonCalculateSpringDamperAcceleration(float dt, float ks, float x, float kd, float s);
     * }
     */
    public static float NewtonCalculateSpringDamperAcceleration(float dt, float ks, float x, float kd, float s) {
        var mh$ = NewtonCalculateSpringDamperAcceleration$MH();
        try {
            return (float)mh$.invokeExact(dt, ks, x, kd, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateDynamicBody$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonCreateDynamicBody$MH,"NewtonCreateDynamicBody");
    }
    /**
     * {@snippet :
     * struct NewtonBody* NewtonCreateDynamicBody(struct NewtonWorld* newtonWorld, struct NewtonCollision* collision, float* matrix);
     * }
     */
    public static MemorySegment NewtonCreateDynamicBody(MemorySegment newtonWorld, MemorySegment collision, MemorySegment matrix) {
        var mh$ = NewtonCreateDynamicBody$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateKinematicBody$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonCreateKinematicBody$MH,"NewtonCreateKinematicBody");
    }
    /**
     * {@snippet :
     * struct NewtonBody* NewtonCreateKinematicBody(struct NewtonWorld* newtonWorld, struct NewtonCollision* collision, float* matrix);
     * }
     */
    public static MemorySegment NewtonCreateKinematicBody(MemorySegment newtonWorld, MemorySegment collision, MemorySegment matrix) {
        var mh$ = NewtonCreateKinematicBody$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateAsymetricDynamicBody$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonCreateAsymetricDynamicBody$MH,"NewtonCreateAsymetricDynamicBody");
    }
    /**
     * {@snippet :
     * struct NewtonBody* NewtonCreateAsymetricDynamicBody(struct NewtonWorld* newtonWorld, struct NewtonCollision* collision, float* matrix);
     * }
     */
    public static MemorySegment NewtonCreateAsymetricDynamicBody(MemorySegment newtonWorld, MemorySegment collision, MemorySegment matrix) {
        var mh$ = NewtonCreateAsymetricDynamicBody$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroyBody$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonDestroyBody$MH,"NewtonDestroyBody");
    }
    /**
     * {@snippet :
     * void NewtonDestroyBody(struct NewtonBody* body);
     * }
     */
    public static void NewtonDestroyBody(MemorySegment body) {
        var mh$ = NewtonDestroyBody$MH();
        try {
            mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetSimulationState$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonBodyGetSimulationState$MH,"NewtonBodyGetSimulationState");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetSimulationState(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetSimulationState(MemorySegment body) {
        var mh$ = NewtonBodyGetSimulationState$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetSimulationState$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonBodySetSimulationState$MH,"NewtonBodySetSimulationState");
    }
    /**
     * {@snippet :
     * void NewtonBodySetSimulationState(struct NewtonBody* bodyPtr, int state);
     * }
     */
    public static void NewtonBodySetSimulationState(MemorySegment bodyPtr, int state) {
        var mh$ = NewtonBodySetSimulationState$MH();
        try {
            mh$.invokeExact(bodyPtr, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonBodyGetType$MH,"NewtonBodyGetType");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetType(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetType(MemorySegment body) {
        var mh$ = NewtonBodyGetType$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetCollidable$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonBodyGetCollidable$MH,"NewtonBodyGetCollidable");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetCollidable(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetCollidable(MemorySegment body) {
        var mh$ = NewtonBodyGetCollidable$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetCollidable$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonBodySetCollidable$MH,"NewtonBodySetCollidable");
    }
    /**
     * {@snippet :
     * void NewtonBodySetCollidable(struct NewtonBody* body, int collidableState);
     * }
     */
    public static void NewtonBodySetCollidable(MemorySegment body, int collidableState) {
        var mh$ = NewtonBodySetCollidable$MH();
        try {
            mh$.invokeExact(body, collidableState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyAddForce$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonBodyAddForce$MH,"NewtonBodyAddForce");
    }
    /**
     * {@snippet :
     * void NewtonBodyAddForce(struct NewtonBody* body, float* force);
     * }
     */
    public static void NewtonBodyAddForce(MemorySegment body, MemorySegment force) {
        var mh$ = NewtonBodyAddForce$MH();
        try {
            mh$.invokeExact(body, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyAddTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonBodyAddTorque$MH,"NewtonBodyAddTorque");
    }
    /**
     * {@snippet :
     * void NewtonBodyAddTorque(struct NewtonBody* body, float* torque);
     * }
     */
    public static void NewtonBodyAddTorque(MemorySegment body, MemorySegment torque) {
        var mh$ = NewtonBodyAddTorque$MH();
        try {
            mh$.invokeExact(body, torque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetCentreOfMass$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonBodySetCentreOfMass$MH,"NewtonBodySetCentreOfMass");
    }
    /**
     * {@snippet :
     * void NewtonBodySetCentreOfMass(struct NewtonBody* body, float* com);
     * }
     */
    public static void NewtonBodySetCentreOfMass(MemorySegment body, MemorySegment com) {
        var mh$ = NewtonBodySetCentreOfMass$MH();
        try {
            mh$.invokeExact(body, com);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMassMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonBodySetMassMatrix$MH,"NewtonBodySetMassMatrix");
    }
    /**
     * {@snippet :
     * void NewtonBodySetMassMatrix(struct NewtonBody* body, float mass, float Ixx, float Iyy, float Izz);
     * }
     */
    public static void NewtonBodySetMassMatrix(MemorySegment body, float mass, float Ixx, float Iyy, float Izz) {
        var mh$ = NewtonBodySetMassMatrix$MH();
        try {
            mh$.invokeExact(body, mass, Ixx, Iyy, Izz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetFullMassMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonBodySetFullMassMatrix$MH,"NewtonBodySetFullMassMatrix");
    }
    /**
     * {@snippet :
     * void NewtonBodySetFullMassMatrix(struct NewtonBody* body, float mass, float* inertiaMatrix);
     * }
     */
    public static void NewtonBodySetFullMassMatrix(MemorySegment body, float mass, MemorySegment inertiaMatrix) {
        var mh$ = NewtonBodySetFullMassMatrix$MH();
        try {
            mh$.invokeExact(body, mass, inertiaMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMassProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonBodySetMassProperties$MH,"NewtonBodySetMassProperties");
    }
    /**
     * {@snippet :
     * void NewtonBodySetMassProperties(struct NewtonBody* body, float mass, struct NewtonCollision* collision);
     * }
     */
    public static void NewtonBodySetMassProperties(MemorySegment body, float mass, MemorySegment collision) {
        var mh$ = NewtonBodySetMassProperties$MH();
        try {
            mh$.invokeExact(body, mass, collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonBodySetMatrix$MH,"NewtonBodySetMatrix");
    }
    /**
     * {@snippet :
     * void NewtonBodySetMatrix(struct NewtonBody* body, float* matrix);
     * }
     */
    public static void NewtonBodySetMatrix(MemorySegment body, MemorySegment matrix) {
        var mh$ = NewtonBodySetMatrix$MH();
        try {
            mh$.invokeExact(body, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMatrixNoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonBodySetMatrixNoSleep$MH,"NewtonBodySetMatrixNoSleep");
    }
    /**
     * {@snippet :
     * void NewtonBodySetMatrixNoSleep(struct NewtonBody* body, float* matrix);
     * }
     */
    public static void NewtonBodySetMatrixNoSleep(MemorySegment body, MemorySegment matrix) {
        var mh$ = NewtonBodySetMatrixNoSleep$MH();
        try {
            mh$.invokeExact(body, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMatrixRecursive$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonBodySetMatrixRecursive$MH,"NewtonBodySetMatrixRecursive");
    }
    /**
     * {@snippet :
     * void NewtonBodySetMatrixRecursive(struct NewtonBody* body, float* matrix);
     * }
     */
    public static void NewtonBodySetMatrixRecursive(MemorySegment body, MemorySegment matrix) {
        var mh$ = NewtonBodySetMatrixRecursive$MH();
        try {
            mh$.invokeExact(body, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMaterialGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonBodySetMaterialGroupID$MH,"NewtonBodySetMaterialGroupID");
    }
    /**
     * {@snippet :
     * void NewtonBodySetMaterialGroupID(struct NewtonBody* body, int id);
     * }
     */
    public static void NewtonBodySetMaterialGroupID(MemorySegment body, int id) {
        var mh$ = NewtonBodySetMaterialGroupID$MH();
        try {
            mh$.invokeExact(body, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetContinuousCollisionMode$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonBodySetContinuousCollisionMode$MH,"NewtonBodySetContinuousCollisionMode");
    }
    /**
     * {@snippet :
     * void NewtonBodySetContinuousCollisionMode(struct NewtonBody* body, unsigned int state);
     * }
     */
    public static void NewtonBodySetContinuousCollisionMode(MemorySegment body, int state) {
        var mh$ = NewtonBodySetContinuousCollisionMode$MH();
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetJointRecursiveCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonBodySetJointRecursiveCollision$MH,"NewtonBodySetJointRecursiveCollision");
    }
    /**
     * {@snippet :
     * void NewtonBodySetJointRecursiveCollision(struct NewtonBody* body, unsigned int state);
     * }
     */
    public static void NewtonBodySetJointRecursiveCollision(MemorySegment body, int state) {
        var mh$ = NewtonBodySetJointRecursiveCollision$MH();
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonBodySetOmega$MH,"NewtonBodySetOmega");
    }
    /**
     * {@snippet :
     * void NewtonBodySetOmega(struct NewtonBody* body, float* omega);
     * }
     */
    public static void NewtonBodySetOmega(MemorySegment body, MemorySegment omega) {
        var mh$ = NewtonBodySetOmega$MH();
        try {
            mh$.invokeExact(body, omega);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetOmegaNoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonBodySetOmegaNoSleep$MH,"NewtonBodySetOmegaNoSleep");
    }
    /**
     * {@snippet :
     * void NewtonBodySetOmegaNoSleep(struct NewtonBody* body, float* omega);
     * }
     */
    public static void NewtonBodySetOmegaNoSleep(MemorySegment body, MemorySegment omega) {
        var mh$ = NewtonBodySetOmegaNoSleep$MH();
        try {
            mh$.invokeExact(body, omega);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetVelocity$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonBodySetVelocity$MH,"NewtonBodySetVelocity");
    }
    /**
     * {@snippet :
     * void NewtonBodySetVelocity(struct NewtonBody* body, float* velocity);
     * }
     */
    public static void NewtonBodySetVelocity(MemorySegment body, MemorySegment velocity) {
        var mh$ = NewtonBodySetVelocity$MH();
        try {
            mh$.invokeExact(body, velocity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetVelocityNoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonBodySetVelocityNoSleep$MH,"NewtonBodySetVelocityNoSleep");
    }
    /**
     * {@snippet :
     * void NewtonBodySetVelocityNoSleep(struct NewtonBody* body, float* velocity);
     * }
     */
    public static void NewtonBodySetVelocityNoSleep(MemorySegment body, MemorySegment velocity) {
        var mh$ = NewtonBodySetVelocityNoSleep$MH();
        try {
            mh$.invokeExact(body, velocity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetForce$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonBodySetForce$MH,"NewtonBodySetForce");
    }
    /**
     * {@snippet :
     * void NewtonBodySetForce(struct NewtonBody* body, float* force);
     * }
     */
    public static void NewtonBodySetForce(MemorySegment body, MemorySegment force) {
        var mh$ = NewtonBodySetForce$MH();
        try {
            mh$.invokeExact(body, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonBodySetTorque$MH,"NewtonBodySetTorque");
    }
    /**
     * {@snippet :
     * void NewtonBodySetTorque(struct NewtonBody* body, float* torque);
     * }
     */
    public static void NewtonBodySetTorque(MemorySegment body, MemorySegment torque) {
        var mh$ = NewtonBodySetTorque$MH();
        try {
            mh$.invokeExact(body, torque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetLinearDamping$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonBodySetLinearDamping$MH,"NewtonBodySetLinearDamping");
    }
    /**
     * {@snippet :
     * void NewtonBodySetLinearDamping(struct NewtonBody* body, float linearDamp);
     * }
     */
    public static void NewtonBodySetLinearDamping(MemorySegment body, float linearDamp) {
        var mh$ = NewtonBodySetLinearDamping$MH();
        try {
            mh$.invokeExact(body, linearDamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetAngularDamping$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonBodySetAngularDamping$MH,"NewtonBodySetAngularDamping");
    }
    /**
     * {@snippet :
     * void NewtonBodySetAngularDamping(struct NewtonBody* body, float* angularDamp);
     * }
     */
    public static void NewtonBodySetAngularDamping(MemorySegment body, MemorySegment angularDamp) {
        var mh$ = NewtonBodySetAngularDamping$MH();
        try {
            mh$.invokeExact(body, angularDamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonBodySetCollision$MH,"NewtonBodySetCollision");
    }
    /**
     * {@snippet :
     * void NewtonBodySetCollision(struct NewtonBody* body, struct NewtonCollision* collision);
     * }
     */
    public static void NewtonBodySetCollision(MemorySegment body, MemorySegment collision) {
        var mh$ = NewtonBodySetCollision$MH();
        try {
            mh$.invokeExact(body, collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetCollisionScale$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonBodySetCollisionScale$MH,"NewtonBodySetCollisionScale");
    }
    /**
     * {@snippet :
     * void NewtonBodySetCollisionScale(struct NewtonBody* body, float scaleX, float scaleY, float scaleZ);
     * }
     */
    public static void NewtonBodySetCollisionScale(MemorySegment body, float scaleX, float scaleY, float scaleZ) {
        var mh$ = NewtonBodySetCollisionScale$MH();
        try {
            mh$.invokeExact(body, scaleX, scaleY, scaleZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetSleepState$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonBodyGetSleepState$MH,"NewtonBodyGetSleepState");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetSleepState(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetSleepState(MemorySegment body) {
        var mh$ = NewtonBodyGetSleepState$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetSleepState$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonBodySetSleepState$MH,"NewtonBodySetSleepState");
    }
    /**
     * {@snippet :
     * void NewtonBodySetSleepState(struct NewtonBody* body, int state);
     * }
     */
    public static void NewtonBodySetSleepState(MemorySegment body, int state) {
        var mh$ = NewtonBodySetSleepState$MH();
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAutoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonBodyGetAutoSleep$MH,"NewtonBodyGetAutoSleep");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetAutoSleep(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetAutoSleep(MemorySegment body) {
        var mh$ = NewtonBodyGetAutoSleep$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetAutoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonBodySetAutoSleep$MH,"NewtonBodySetAutoSleep");
    }
    /**
     * {@snippet :
     * void NewtonBodySetAutoSleep(struct NewtonBody* body, int state);
     * }
     */
    public static void NewtonBodySetAutoSleep(MemorySegment body, int state) {
        var mh$ = NewtonBodySetAutoSleep$MH();
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetFreezeState$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonBodyGetFreezeState$MH,"NewtonBodyGetFreezeState");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetFreezeState(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetFreezeState(MemorySegment body) {
        var mh$ = NewtonBodyGetFreezeState$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetFreezeState$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonBodySetFreezeState$MH,"NewtonBodySetFreezeState");
    }
    /**
     * {@snippet :
     * void NewtonBodySetFreezeState(struct NewtonBody* body, int state);
     * }
     */
    public static void NewtonBodySetFreezeState(MemorySegment body, int state) {
        var mh$ = NewtonBodySetFreezeState$MH();
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetGyroscopicTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonBodyGetGyroscopicTorque$MH,"NewtonBodyGetGyroscopicTorque");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetGyroscopicTorque(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetGyroscopicTorque(MemorySegment body) {
        var mh$ = NewtonBodyGetGyroscopicTorque$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetGyroscopicTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonBodySetGyroscopicTorque$MH,"NewtonBodySetGyroscopicTorque");
    }
    /**
     * {@snippet :
     * void NewtonBodySetGyroscopicTorque(struct NewtonBody* body, int state);
     * }
     */
    public static void NewtonBodySetGyroscopicTorque(MemorySegment body, int state) {
        var mh$ = NewtonBodySetGyroscopicTorque$MH();
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonBodySetDestructorCallback$MH,"NewtonBodySetDestructorCallback");
    }
    /**
     * {@snippet :
     * void NewtonBodySetDestructorCallback(struct NewtonBody* body, void (*callback)(struct NewtonBody*));
     * }
     */
    public static void NewtonBodySetDestructorCallback(MemorySegment body, MemorySegment callback) {
        var mh$ = NewtonBodySetDestructorCallback$MH();
        try {
            mh$.invokeExact(body, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$85.NewtonBodyGetDestructorCallback$MH,"NewtonBodyGetDestructorCallback");
    }
    /**
     * {@snippet :
     * void (*NewtonBodyGetDestructorCallback(struct NewtonBody* body))(struct NewtonBody*);
     * }
     */
    public static MemorySegment NewtonBodyGetDestructorCallback(MemorySegment body) {
        var mh$ = NewtonBodyGetDestructorCallback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetTransformCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$85.NewtonBodySetTransformCallback$MH,"NewtonBodySetTransformCallback");
    }
    /**
     * {@snippet :
     * void NewtonBodySetTransformCallback(struct NewtonBody* body, void (*callback)(struct NewtonBody*,float*,int));
     * }
     */
    public static void NewtonBodySetTransformCallback(MemorySegment body, MemorySegment callback) {
        var mh$ = NewtonBodySetTransformCallback$MH();
        try {
            mh$.invokeExact(body, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetTransformCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$86.NewtonBodyGetTransformCallback$MH,"NewtonBodyGetTransformCallback");
    }
    /**
     * {@snippet :
     * void (*NewtonBodyGetTransformCallback(struct NewtonBody* body))(struct NewtonBody*,float*,int);
     * }
     */
    public static MemorySegment NewtonBodyGetTransformCallback(MemorySegment body) {
        var mh$ = NewtonBodyGetTransformCallback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetForceAndTorqueCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$86.NewtonBodySetForceAndTorqueCallback$MH,"NewtonBodySetForceAndTorqueCallback");
    }
    /**
     * {@snippet :
     * void NewtonBodySetForceAndTorqueCallback(struct NewtonBody* body, void (*callback)(struct NewtonBody*,float,int));
     * }
     */
    public static void NewtonBodySetForceAndTorqueCallback(MemorySegment body, MemorySegment callback) {
        var mh$ = NewtonBodySetForceAndTorqueCallback$MH();
        try {
            mh$.invokeExact(body, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetForceAndTorqueCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonBodyGetForceAndTorqueCallback$MH,"NewtonBodyGetForceAndTorqueCallback");
    }
    /**
     * {@snippet :
     * void (*NewtonBodyGetForceAndTorqueCallback(struct NewtonBody* body))(struct NewtonBody*,float,int);
     * }
     */
    public static MemorySegment NewtonBodyGetForceAndTorqueCallback(MemorySegment body) {
        var mh$ = NewtonBodyGetForceAndTorqueCallback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetID$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonBodyGetID$MH,"NewtonBodyGetID");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetID(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetID(MemorySegment body) {
        var mh$ = NewtonBodyGetID$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonBodySetUserData$MH,"NewtonBodySetUserData");
    }
    /**
     * {@snippet :
     * void NewtonBodySetUserData(struct NewtonBody* body, void* userData);
     * }
     */
    public static void NewtonBodySetUserData(MemorySegment body, MemorySegment userData) {
        var mh$ = NewtonBodySetUserData$MH();
        try {
            mh$.invokeExact(body, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonBodyGetUserData$MH,"NewtonBodyGetUserData");
    }
    /**
     * {@snippet :
     * void* NewtonBodyGetUserData(struct NewtonBody* body);
     * }
     */
    public static MemorySegment NewtonBodyGetUserData(MemorySegment body) {
        var mh$ = NewtonBodyGetUserData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetWorld$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonBodyGetWorld$MH,"NewtonBodyGetWorld");
    }
    /**
     * {@snippet :
     * struct NewtonWorld* NewtonBodyGetWorld(struct NewtonBody* body);
     * }
     */
    public static MemorySegment NewtonBodyGetWorld(MemorySegment body) {
        var mh$ = NewtonBodyGetWorld$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonBodyGetCollision$MH,"NewtonBodyGetCollision");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonBodyGetCollision(struct NewtonBody* body);
     * }
     */
    public static MemorySegment NewtonBodyGetCollision(MemorySegment body) {
        var mh$ = NewtonBodyGetCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetMaterialGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonBodyGetMaterialGroupID$MH,"NewtonBodyGetMaterialGroupID");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetMaterialGroupID(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetMaterialGroupID(MemorySegment body) {
        var mh$ = NewtonBodyGetMaterialGroupID$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetSerializedID$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonBodyGetSerializedID$MH,"NewtonBodyGetSerializedID");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetSerializedID(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetSerializedID(MemorySegment body) {
        var mh$ = NewtonBodyGetSerializedID$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetContinuousCollisionMode$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonBodyGetContinuousCollisionMode$MH,"NewtonBodyGetContinuousCollisionMode");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetContinuousCollisionMode(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetContinuousCollisionMode(MemorySegment body) {
        var mh$ = NewtonBodyGetContinuousCollisionMode$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetJointRecursiveCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonBodyGetJointRecursiveCollision$MH,"NewtonBodyGetJointRecursiveCollision");
    }
    /**
     * {@snippet :
     * int NewtonBodyGetJointRecursiveCollision(struct NewtonBody* body);
     * }
     */
    public static int NewtonBodyGetJointRecursiveCollision(MemorySegment body) {
        var mh$ = NewtonBodyGetJointRecursiveCollision$MH();
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonBodyGetPosition$MH,"NewtonBodyGetPosition");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetPosition(struct NewtonBody* body, float* pos);
     * }
     */
    public static void NewtonBodyGetPosition(MemorySegment body, MemorySegment pos) {
        var mh$ = NewtonBodyGetPosition$MH();
        try {
            mh$.invokeExact(body, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonBodyGetMatrix$MH,"NewtonBodyGetMatrix");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetMatrix(struct NewtonBody* body, float* matrix);
     * }
     */
    public static void NewtonBodyGetMatrix(MemorySegment body, MemorySegment matrix) {
        var mh$ = NewtonBodyGetMatrix$MH();
        try {
            mh$.invokeExact(body, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetRotation$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonBodyGetRotation$MH,"NewtonBodyGetRotation");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetRotation(struct NewtonBody* body, float* rotation);
     * }
     */
    public static void NewtonBodyGetRotation(MemorySegment body, MemorySegment rotation) {
        var mh$ = NewtonBodyGetRotation$MH();
        try {
            mh$.invokeExact(body, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetMass$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonBodyGetMass$MH,"NewtonBodyGetMass");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetMass(struct NewtonBody* body, float* mass, float* Ixx, float* Iyy, float* Izz);
     * }
     */
    public static void NewtonBodyGetMass(MemorySegment body, MemorySegment mass, MemorySegment Ixx, MemorySegment Iyy, MemorySegment Izz) {
        var mh$ = NewtonBodyGetMass$MH();
        try {
            mh$.invokeExact(body, mass, Ixx, Iyy, Izz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetInvMass$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonBodyGetInvMass$MH,"NewtonBodyGetInvMass");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetInvMass(struct NewtonBody* body, float* invMass, float* invIxx, float* invIyy, float* invIzz);
     * }
     */
    public static void NewtonBodyGetInvMass(MemorySegment body, MemorySegment invMass, MemorySegment invIxx, MemorySegment invIyy, MemorySegment invIzz) {
        var mh$ = NewtonBodyGetInvMass$MH();
        try {
            mh$.invokeExact(body, invMass, invIxx, invIyy, invIzz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetInertiaMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonBodyGetInertiaMatrix$MH,"NewtonBodyGetInertiaMatrix");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetInertiaMatrix(struct NewtonBody* body, float* inertiaMatrix);
     * }
     */
    public static void NewtonBodyGetInertiaMatrix(MemorySegment body, MemorySegment inertiaMatrix) {
        var mh$ = NewtonBodyGetInertiaMatrix$MH();
        try {
            mh$.invokeExact(body, inertiaMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetInvInertiaMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonBodyGetInvInertiaMatrix$MH,"NewtonBodyGetInvInertiaMatrix");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetInvInertiaMatrix(struct NewtonBody* body, float* invInertiaMatrix);
     * }
     */
    public static void NewtonBodyGetInvInertiaMatrix(MemorySegment body, MemorySegment invInertiaMatrix) {
        var mh$ = NewtonBodyGetInvInertiaMatrix$MH();
        try {
            mh$.invokeExact(body, invInertiaMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonBodyGetOmega$MH,"NewtonBodyGetOmega");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetOmega(struct NewtonBody* body, float* vector);
     * }
     */
    public static void NewtonBodyGetOmega(MemorySegment body, MemorySegment vector) {
        var mh$ = NewtonBodyGetOmega$MH();
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetVelocity$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonBodyGetVelocity$MH,"NewtonBodyGetVelocity");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetVelocity(struct NewtonBody* body, float* vector);
     * }
     */
    public static void NewtonBodyGetVelocity(MemorySegment body, MemorySegment vector) {
        var mh$ = NewtonBodyGetVelocity$MH();
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonBodyGetAlpha$MH,"NewtonBodyGetAlpha");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetAlpha(struct NewtonBody* body, float* vector);
     * }
     */
    public static void NewtonBodyGetAlpha(MemorySegment body, MemorySegment vector) {
        var mh$ = NewtonBodyGetAlpha$MH();
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonBodyGetAcceleration$MH,"NewtonBodyGetAcceleration");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetAcceleration(struct NewtonBody* body, float* vector);
     * }
     */
    public static void NewtonBodyGetAcceleration(MemorySegment body, MemorySegment vector) {
        var mh$ = NewtonBodyGetAcceleration$MH();
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetForce$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonBodyGetForce$MH,"NewtonBodyGetForce");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetForce(struct NewtonBody* body, float* vector);
     * }
     */
    public static void NewtonBodyGetForce(MemorySegment body, MemorySegment vector) {
        var mh$ = NewtonBodyGetForce$MH();
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonBodyGetTorque$MH,"NewtonBodyGetTorque");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetTorque(struct NewtonBody* body, float* vector);
     * }
     */
    public static void NewtonBodyGetTorque(MemorySegment body, MemorySegment vector) {
        var mh$ = NewtonBodyGetTorque$MH();
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetCentreOfMass$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonBodyGetCentreOfMass$MH,"NewtonBodyGetCentreOfMass");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetCentreOfMass(struct NewtonBody* body, float* com);
     * }
     */
    public static void NewtonBodyGetCentreOfMass(MemorySegment body, MemorySegment com) {
        var mh$ = NewtonBodyGetCentreOfMass$MH();
        try {
            mh$.invokeExact(body, com);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetPointVelocity$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonBodyGetPointVelocity$MH,"NewtonBodyGetPointVelocity");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetPointVelocity(struct NewtonBody* body, float* point, float* velocOut);
     * }
     */
    public static void NewtonBodyGetPointVelocity(MemorySegment body, MemorySegment point, MemorySegment velocOut) {
        var mh$ = NewtonBodyGetPointVelocity$MH();
        try {
            mh$.invokeExact(body, point, velocOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyApplyImpulsePair$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonBodyApplyImpulsePair$MH,"NewtonBodyApplyImpulsePair");
    }
    /**
     * {@snippet :
     * void NewtonBodyApplyImpulsePair(struct NewtonBody* body, float* linearImpulse, float* angularImpulse, float timestep);
     * }
     */
    public static void NewtonBodyApplyImpulsePair(MemorySegment body, MemorySegment linearImpulse, MemorySegment angularImpulse, float timestep) {
        var mh$ = NewtonBodyApplyImpulsePair$MH();
        try {
            mh$.invokeExact(body, linearImpulse, angularImpulse, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyAddImpulse$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonBodyAddImpulse$MH,"NewtonBodyAddImpulse");
    }
    /**
     * {@snippet :
     * void NewtonBodyAddImpulse(struct NewtonBody* body, float* pointDeltaVeloc, float* pointPosit, float timestep);
     * }
     */
    public static void NewtonBodyAddImpulse(MemorySegment body, MemorySegment pointDeltaVeloc, MemorySegment pointPosit, float timestep) {
        var mh$ = NewtonBodyAddImpulse$MH();
        try {
            mh$.invokeExact(body, pointDeltaVeloc, pointPosit, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyApplyImpulseArray$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonBodyApplyImpulseArray$MH,"NewtonBodyApplyImpulseArray");
    }
    /**
     * {@snippet :
     * void NewtonBodyApplyImpulseArray(struct NewtonBody* body, int impuleCount, int strideInByte, float* impulseArray, float* pointArray, float timestep);
     * }
     */
    public static void NewtonBodyApplyImpulseArray(MemorySegment body, int impuleCount, int strideInByte, MemorySegment impulseArray, MemorySegment pointArray, float timestep) {
        var mh$ = NewtonBodyApplyImpulseArray$MH();
        try {
            mh$.invokeExact(body, impuleCount, strideInByte, impulseArray, pointArray, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyIntegrateVelocity$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonBodyIntegrateVelocity$MH,"NewtonBodyIntegrateVelocity");
    }
    /**
     * {@snippet :
     * void NewtonBodyIntegrateVelocity(struct NewtonBody* body, float timestep);
     * }
     */
    public static void NewtonBodyIntegrateVelocity(MemorySegment body, float timestep) {
        var mh$ = NewtonBodyIntegrateVelocity$MH();
        try {
            mh$.invokeExact(body, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetLinearDamping$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonBodyGetLinearDamping$MH,"NewtonBodyGetLinearDamping");
    }
    /**
     * {@snippet :
     * float NewtonBodyGetLinearDamping(struct NewtonBody* body);
     * }
     */
    public static float NewtonBodyGetLinearDamping(MemorySegment body) {
        var mh$ = NewtonBodyGetLinearDamping$MH();
        try {
            return (float)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAngularDamping$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonBodyGetAngularDamping$MH,"NewtonBodyGetAngularDamping");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetAngularDamping(struct NewtonBody* body, float* vector);
     * }
     */
    public static void NewtonBodyGetAngularDamping(MemorySegment body, MemorySegment vector) {
        var mh$ = NewtonBodyGetAngularDamping$MH();
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAABB$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonBodyGetAABB$MH,"NewtonBodyGetAABB");
    }
    /**
     * {@snippet :
     * void NewtonBodyGetAABB(struct NewtonBody* body, float* p0, float* p1);
     * }
     */
    public static void NewtonBodyGetAABB(MemorySegment body, MemorySegment p0, MemorySegment p1) {
        var mh$ = NewtonBodyGetAABB$MH();
        try {
            mh$.invokeExact(body, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetFirstJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonBodyGetFirstJoint$MH,"NewtonBodyGetFirstJoint");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonBodyGetFirstJoint(struct NewtonBody* body);
     * }
     */
    public static MemorySegment NewtonBodyGetFirstJoint(MemorySegment body) {
        var mh$ = NewtonBodyGetFirstJoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetNextJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonBodyGetNextJoint$MH,"NewtonBodyGetNextJoint");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonBodyGetNextJoint(struct NewtonBody* body, struct NewtonJoint* joint);
     * }
     */
    public static MemorySegment NewtonBodyGetNextJoint(MemorySegment body, MemorySegment joint) {
        var mh$ = NewtonBodyGetNextJoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body, joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetFirstContactJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonBodyGetFirstContactJoint$MH,"NewtonBodyGetFirstContactJoint");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonBodyGetFirstContactJoint(struct NewtonBody* body);
     * }
     */
    public static MemorySegment NewtonBodyGetFirstContactJoint(MemorySegment body) {
        var mh$ = NewtonBodyGetFirstContactJoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetNextContactJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonBodyGetNextContactJoint$MH,"NewtonBodyGetNextContactJoint");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonBodyGetNextContactJoint(struct NewtonBody* body, struct NewtonJoint* contactJoint);
     * }
     */
    public static MemorySegment NewtonBodyGetNextContactJoint(MemorySegment body, MemorySegment contactJoint) {
        var mh$ = NewtonBodyGetNextContactJoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body, contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyFindContact$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonBodyFindContact$MH,"NewtonBodyFindContact");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonBodyFindContact(struct NewtonBody* body0, struct NewtonBody* body1);
     * }
     */
    public static MemorySegment NewtonBodyFindContact(MemorySegment body0, MemorySegment body1) {
        var mh$ = NewtonBodyFindContact$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(body0, body1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointGetFirstContact$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonContactJointGetFirstContact$MH,"NewtonContactJointGetFirstContact");
    }
    /**
     * {@snippet :
     * void* NewtonContactJointGetFirstContact(struct NewtonJoint* contactJoint);
     * }
     */
    public static MemorySegment NewtonContactJointGetFirstContact(MemorySegment contactJoint) {
        var mh$ = NewtonContactJointGetFirstContact$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointGetNextContact$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonContactJointGetNextContact$MH,"NewtonContactJointGetNextContact");
    }
    /**
     * {@snippet :
     * void* NewtonContactJointGetNextContact(struct NewtonJoint* contactJoint, void* contact);
     * }
     */
    public static MemorySegment NewtonContactJointGetNextContact(MemorySegment contactJoint, MemorySegment contact) {
        var mh$ = NewtonContactJointGetNextContact$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(contactJoint, contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointGetContactCount$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonContactJointGetContactCount$MH,"NewtonContactJointGetContactCount");
    }
    /**
     * {@snippet :
     * int NewtonContactJointGetContactCount(struct NewtonJoint* contactJoint);
     * }
     */
    public static int NewtonContactJointGetContactCount(MemorySegment contactJoint) {
        var mh$ = NewtonContactJointGetContactCount$MH();
        try {
            return (int)mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointRemoveContact$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonContactJointRemoveContact$MH,"NewtonContactJointRemoveContact");
    }
    /**
     * {@snippet :
     * void NewtonContactJointRemoveContact(struct NewtonJoint* contactJoint, void* contact);
     * }
     */
    public static void NewtonContactJointRemoveContact(MemorySegment contactJoint, MemorySegment contact) {
        var mh$ = NewtonContactJointRemoveContact$MH();
        try {
            mh$.invokeExact(contactJoint, contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointGetClosestDistance$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonContactJointGetClosestDistance$MH,"NewtonContactJointGetClosestDistance");
    }
    /**
     * {@snippet :
     * float NewtonContactJointGetClosestDistance(struct NewtonJoint* contactJoint);
     * }
     */
    public static float NewtonContactJointGetClosestDistance(MemorySegment contactJoint) {
        var mh$ = NewtonContactJointGetClosestDistance$MH();
        try {
            return (float)mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointResetSelftJointCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonContactJointResetSelftJointCollision$MH,"NewtonContactJointResetSelftJointCollision");
    }
    /**
     * {@snippet :
     * void NewtonContactJointResetSelftJointCollision(struct NewtonJoint* contactJoint);
     * }
     */
    public static void NewtonContactJointResetSelftJointCollision(MemorySegment contactJoint) {
        var mh$ = NewtonContactJointResetSelftJointCollision$MH();
        try {
            mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointResetIntraJointCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonContactJointResetIntraJointCollision$MH,"NewtonContactJointResetIntraJointCollision");
    }
    /**
     * {@snippet :
     * void NewtonContactJointResetIntraJointCollision(struct NewtonJoint* contactJoint);
     * }
     */
    public static void NewtonContactJointResetIntraJointCollision(MemorySegment contactJoint) {
        var mh$ = NewtonContactJointResetIntraJointCollision$MH();
        try {
            mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonContactGetMaterial$MH,"NewtonContactGetMaterial");
    }
    /**
     * {@snippet :
     * struct NewtonMaterial* NewtonContactGetMaterial(void* contact);
     * }
     */
    public static MemorySegment NewtonContactGetMaterial(MemorySegment contact) {
        var mh$ = NewtonContactGetMaterial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetCollision0$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonContactGetCollision0$MH,"NewtonContactGetCollision0");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonContactGetCollision0(void* contact);
     * }
     */
    public static MemorySegment NewtonContactGetCollision0(MemorySegment contact) {
        var mh$ = NewtonContactGetCollision0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetCollision1$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonContactGetCollision1$MH,"NewtonContactGetCollision1");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonContactGetCollision1(void* contact);
     * }
     */
    public static MemorySegment NewtonContactGetCollision1(MemorySegment contact) {
        var mh$ = NewtonContactGetCollision1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetCollisionID0$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonContactGetCollisionID0$MH,"NewtonContactGetCollisionID0");
    }
    /**
     * {@snippet :
     * void* NewtonContactGetCollisionID0(void* contact);
     * }
     */
    public static MemorySegment NewtonContactGetCollisionID0(MemorySegment contact) {
        var mh$ = NewtonContactGetCollisionID0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetCollisionID1$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonContactGetCollisionID1$MH,"NewtonContactGetCollisionID1");
    }
    /**
     * {@snippet :
     * void* NewtonContactGetCollisionID1(void* contact);
     * }
     */
    public static MemorySegment NewtonContactGetCollisionID1(MemorySegment contact) {
        var mh$ = NewtonContactGetCollisionID1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonJointGetUserData$MH,"NewtonJointGetUserData");
    }
    /**
     * {@snippet :
     * void* NewtonJointGetUserData(struct NewtonJoint* joint);
     * }
     */
    public static MemorySegment NewtonJointGetUserData(MemorySegment joint) {
        var mh$ = NewtonJointGetUserData$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointSetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonJointSetUserData$MH,"NewtonJointSetUserData");
    }
    /**
     * {@snippet :
     * void NewtonJointSetUserData(struct NewtonJoint* joint, void* userData);
     * }
     */
    public static void NewtonJointSetUserData(MemorySegment joint, MemorySegment userData) {
        var mh$ = NewtonJointSetUserData$MH();
        try {
            mh$.invokeExact(joint, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetBody0$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonJointGetBody0$MH,"NewtonJointGetBody0");
    }
    /**
     * {@snippet :
     * struct NewtonBody* NewtonJointGetBody0(struct NewtonJoint* joint);
     * }
     */
    public static MemorySegment NewtonJointGetBody0(MemorySegment joint) {
        var mh$ = NewtonJointGetBody0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetBody1$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonJointGetBody1$MH,"NewtonJointGetBody1");
    }
    /**
     * {@snippet :
     * struct NewtonBody* NewtonJointGetBody1(struct NewtonJoint* joint);
     * }
     */
    public static MemorySegment NewtonJointGetBody1(MemorySegment joint) {
        var mh$ = NewtonJointGetBody1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonJointGetInfo$MH,"NewtonJointGetInfo");
    }
    /**
     * {@snippet :
     * void NewtonJointGetInfo(struct NewtonJoint* joint, struct NewtonJointRecord* info);
     * }
     */
    public static void NewtonJointGetInfo(MemorySegment joint, MemorySegment info) {
        var mh$ = NewtonJointGetInfo$MH();
        try {
            mh$.invokeExact(joint, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetCollisionState$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonJointGetCollisionState$MH,"NewtonJointGetCollisionState");
    }
    /**
     * {@snippet :
     * int NewtonJointGetCollisionState(struct NewtonJoint* joint);
     * }
     */
    public static int NewtonJointGetCollisionState(MemorySegment joint) {
        var mh$ = NewtonJointGetCollisionState$MH();
        try {
            return (int)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointSetCollisionState$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonJointSetCollisionState$MH,"NewtonJointSetCollisionState");
    }
    /**
     * {@snippet :
     * void NewtonJointSetCollisionState(struct NewtonJoint* joint, int state);
     * }
     */
    public static void NewtonJointSetCollisionState(MemorySegment joint, int state) {
        var mh$ = NewtonJointSetCollisionState$MH();
        try {
            mh$.invokeExact(joint, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetStiffness$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonJointGetStiffness$MH,"NewtonJointGetStiffness");
    }
    /**
     * {@snippet :
     * float NewtonJointGetStiffness(struct NewtonJoint* joint);
     * }
     */
    public static float NewtonJointGetStiffness(MemorySegment joint) {
        var mh$ = NewtonJointGetStiffness$MH();
        try {
            return (float)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointSetStiffness$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonJointSetStiffness$MH,"NewtonJointSetStiffness");
    }
    /**
     * {@snippet :
     * void NewtonJointSetStiffness(struct NewtonJoint* joint, float state);
     * }
     */
    public static void NewtonJointSetStiffness(MemorySegment joint, float state) {
        var mh$ = NewtonJointSetStiffness$MH();
        try {
            mh$.invokeExact(joint, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroyJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonDestroyJoint$MH,"NewtonDestroyJoint");
    }
    /**
     * {@snippet :
     * void NewtonDestroyJoint(struct NewtonWorld* newtonWorld, struct NewtonJoint* joint);
     * }
     */
    public static void NewtonDestroyJoint(MemorySegment newtonWorld, MemorySegment joint) {
        var mh$ = NewtonDestroyJoint$MH();
        try {
            mh$.invokeExact(newtonWorld, joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointSetDestructor$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonJointSetDestructor$MH,"NewtonJointSetDestructor");
    }
    /**
     * {@snippet :
     * void NewtonJointSetDestructor(struct NewtonJoint* joint, void (*destructor)(struct NewtonJoint*));
     * }
     */
    public static void NewtonJointSetDestructor(MemorySegment joint, MemorySegment destructor) {
        var mh$ = NewtonJointSetDestructor$MH();
        try {
            mh$.invokeExact(joint, destructor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointIsActive$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonJointIsActive$MH,"NewtonJointIsActive");
    }
    /**
     * {@snippet :
     * int NewtonJointIsActive(struct NewtonJoint* joint);
     * }
     */
    public static int NewtonJointIsActive(MemorySegment joint) {
        var mh$ = NewtonJointIsActive$MH();
        try {
            return (int)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateMassSpringDamperSystem$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonCreateMassSpringDamperSystem$MH,"NewtonCreateMassSpringDamperSystem");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateMassSpringDamperSystem(struct NewtonWorld* newtonWorld, int shapeID, float* points, int pointCount, int strideInBytes, float* pointMass, int* links, int linksCount, float* linksSpring, float* linksDamper);
     * }
     */
    public static MemorySegment NewtonCreateMassSpringDamperSystem(MemorySegment newtonWorld, int shapeID, MemorySegment points, int pointCount, int strideInBytes, MemorySegment pointMass, MemorySegment links, int linksCount, MemorySegment linksSpring, MemorySegment linksDamper) {
        var mh$ = NewtonCreateMassSpringDamperSystem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, shapeID, points, pointCount, strideInBytes, pointMass, links, linksCount, linksSpring, linksDamper);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateDeformableSolid$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonCreateDeformableSolid$MH,"NewtonCreateDeformableSolid");
    }
    /**
     * {@snippet :
     * struct NewtonCollision* NewtonCreateDeformableSolid(struct NewtonWorld* newtonWorld, struct NewtonMesh* mesh, int shapeID);
     * }
     */
    public static MemorySegment NewtonCreateDeformableSolid(MemorySegment newtonWorld, MemorySegment mesh, int shapeID) {
        var mh$ = NewtonCreateDeformableSolid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, mesh, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeformableMeshGetParticleCount$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonDeformableMeshGetParticleCount$MH,"NewtonDeformableMeshGetParticleCount");
    }
    /**
     * {@snippet :
     * int NewtonDeformableMeshGetParticleCount(struct NewtonCollision* deformableMesh);
     * }
     */
    public static int NewtonDeformableMeshGetParticleCount(MemorySegment deformableMesh) {
        var mh$ = NewtonDeformableMeshGetParticleCount$MH();
        try {
            return (int)mh$.invokeExact(deformableMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeformableMeshGetParticleStrideInBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonDeformableMeshGetParticleStrideInBytes$MH,"NewtonDeformableMeshGetParticleStrideInBytes");
    }
    /**
     * {@snippet :
     * int NewtonDeformableMeshGetParticleStrideInBytes(struct NewtonCollision* deformableMesh);
     * }
     */
    public static int NewtonDeformableMeshGetParticleStrideInBytes(MemorySegment deformableMesh) {
        var mh$ = NewtonDeformableMeshGetParticleStrideInBytes$MH();
        try {
            return (int)mh$.invokeExact(deformableMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeformableMeshGetParticleArray$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonDeformableMeshGetParticleArray$MH,"NewtonDeformableMeshGetParticleArray");
    }
    /**
     * {@snippet :
     * float* NewtonDeformableMeshGetParticleArray(struct NewtonCollision* deformableMesh);
     * }
     */
    public static MemorySegment NewtonDeformableMeshGetParticleArray(MemorySegment deformableMesh) {
        var mh$ = NewtonDeformableMeshGetParticleArray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(deformableMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateBall$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonConstraintCreateBall$MH,"NewtonConstraintCreateBall");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonConstraintCreateBall(struct NewtonWorld* newtonWorld, float* pivotPoint, struct NewtonBody* childBody, struct NewtonBody* parentBody);
     * }
     */
    public static MemorySegment NewtonConstraintCreateBall(MemorySegment newtonWorld, MemorySegment pivotPoint, MemorySegment childBody, MemorySegment parentBody) {
        var mh$ = NewtonConstraintCreateBall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, pivotPoint, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonBallSetUserCallback$MH,"NewtonBallSetUserCallback");
    }
    /**
     * {@snippet :
     * void NewtonBallSetUserCallback(struct NewtonJoint* ball, void (*callback)(struct NewtonJoint*,float));
     * }
     */
    public static void NewtonBallSetUserCallback(MemorySegment ball, MemorySegment callback) {
        var mh$ = NewtonBallSetUserCallback$MH();
        try {
            mh$.invokeExact(ball, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallGetJointAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonBallGetJointAngle$MH,"NewtonBallGetJointAngle");
    }
    /**
     * {@snippet :
     * void NewtonBallGetJointAngle(struct NewtonJoint* ball, float* angle);
     * }
     */
    public static void NewtonBallGetJointAngle(MemorySegment ball, MemorySegment angle) {
        var mh$ = NewtonBallGetJointAngle$MH();
        try {
            mh$.invokeExact(ball, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallGetJointOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonBallGetJointOmega$MH,"NewtonBallGetJointOmega");
    }
    /**
     * {@snippet :
     * void NewtonBallGetJointOmega(struct NewtonJoint* ball, float* omega);
     * }
     */
    public static void NewtonBallGetJointOmega(MemorySegment ball, MemorySegment omega) {
        var mh$ = NewtonBallGetJointOmega$MH();
        try {
            mh$.invokeExact(ball, omega);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonBallGetJointForce$MH,"NewtonBallGetJointForce");
    }
    /**
     * {@snippet :
     * void NewtonBallGetJointForce(struct NewtonJoint* ball, float* force);
     * }
     */
    public static void NewtonBallGetJointForce(MemorySegment ball, MemorySegment force) {
        var mh$ = NewtonBallGetJointForce$MH();
        try {
            mh$.invokeExact(ball, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallSetConeLimits$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonBallSetConeLimits$MH,"NewtonBallSetConeLimits");
    }
    /**
     * {@snippet :
     * void NewtonBallSetConeLimits(struct NewtonJoint* ball, float* pin, float maxConeAngle, float maxTwistAngle);
     * }
     */
    public static void NewtonBallSetConeLimits(MemorySegment ball, MemorySegment pin, float maxConeAngle, float maxTwistAngle) {
        var mh$ = NewtonBallSetConeLimits$MH();
        try {
            mh$.invokeExact(ball, pin, maxConeAngle, maxTwistAngle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateHinge$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonConstraintCreateHinge$MH,"NewtonConstraintCreateHinge");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonConstraintCreateHinge(struct NewtonWorld* newtonWorld, float* pivotPoint, float* pinDir, struct NewtonBody* childBody, struct NewtonBody* parentBody);
     * }
     */
    public static MemorySegment NewtonConstraintCreateHinge(MemorySegment newtonWorld, MemorySegment pivotPoint, MemorySegment pinDir, MemorySegment childBody, MemorySegment parentBody) {
        var mh$ = NewtonConstraintCreateHinge$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, pivotPoint, pinDir, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonHingeSetUserCallback$MH,"NewtonHingeSetUserCallback");
    }
    /**
     * {@snippet :
     * void NewtonHingeSetUserCallback(struct NewtonJoint* hinge, unsigned int (*callback)(struct NewtonJoint*,struct NewtonHingeSliderUpdateDesc*));
     * }
     */
    public static void NewtonHingeSetUserCallback(MemorySegment hinge, MemorySegment callback) {
        var mh$ = NewtonHingeSetUserCallback$MH();
        try {
            mh$.invokeExact(hinge, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeGetJointAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonHingeGetJointAngle$MH,"NewtonHingeGetJointAngle");
    }
    /**
     * {@snippet :
     * float NewtonHingeGetJointAngle(struct NewtonJoint* hinge);
     * }
     */
    public static float NewtonHingeGetJointAngle(MemorySegment hinge) {
        var mh$ = NewtonHingeGetJointAngle$MH();
        try {
            return (float)mh$.invokeExact(hinge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeGetJointOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonHingeGetJointOmega$MH,"NewtonHingeGetJointOmega");
    }
    /**
     * {@snippet :
     * float NewtonHingeGetJointOmega(struct NewtonJoint* hinge);
     * }
     */
    public static float NewtonHingeGetJointOmega(MemorySegment hinge) {
        var mh$ = NewtonHingeGetJointOmega$MH();
        try {
            return (float)mh$.invokeExact(hinge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonHingeGetJointForce$MH,"NewtonHingeGetJointForce");
    }
    /**
     * {@snippet :
     * void NewtonHingeGetJointForce(struct NewtonJoint* hinge, float* force);
     * }
     */
    public static void NewtonHingeGetJointForce(MemorySegment hinge, MemorySegment force) {
        var mh$ = NewtonHingeGetJointForce$MH();
        try {
            mh$.invokeExact(hinge, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeCalculateStopAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonHingeCalculateStopAlpha$MH,"NewtonHingeCalculateStopAlpha");
    }
    /**
     * {@snippet :
     * float NewtonHingeCalculateStopAlpha(struct NewtonJoint* hinge, struct NewtonHingeSliderUpdateDesc* desc, float angle);
     * }
     */
    public static float NewtonHingeCalculateStopAlpha(MemorySegment hinge, MemorySegment desc, float angle) {
        var mh$ = NewtonHingeCalculateStopAlpha$MH();
        try {
            return (float)mh$.invokeExact(hinge, desc, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateSlider$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonConstraintCreateSlider$MH,"NewtonConstraintCreateSlider");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonConstraintCreateSlider(struct NewtonWorld* newtonWorld, float* pivotPoint, float* pinDir, struct NewtonBody* childBody, struct NewtonBody* parentBody);
     * }
     */
    public static MemorySegment NewtonConstraintCreateSlider(MemorySegment newtonWorld, MemorySegment pivotPoint, MemorySegment pinDir, MemorySegment childBody, MemorySegment parentBody) {
        var mh$ = NewtonConstraintCreateSlider$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, pivotPoint, pinDir, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonSliderSetUserCallback$MH,"NewtonSliderSetUserCallback");
    }
    /**
     * {@snippet :
     * void NewtonSliderSetUserCallback(struct NewtonJoint* slider, unsigned int (*callback)(struct NewtonJoint*,struct NewtonHingeSliderUpdateDesc*));
     * }
     */
    public static void NewtonSliderSetUserCallback(MemorySegment slider, MemorySegment callback) {
        var mh$ = NewtonSliderSetUserCallback$MH();
        try {
            mh$.invokeExact(slider, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderGetJointPosit$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonSliderGetJointPosit$MH,"NewtonSliderGetJointPosit");
    }
    /**
     * {@snippet :
     * float NewtonSliderGetJointPosit(struct NewtonJoint* slider);
     * }
     */
    public static float NewtonSliderGetJointPosit(MemorySegment slider) {
        var mh$ = NewtonSliderGetJointPosit$MH();
        try {
            return (float)mh$.invokeExact(slider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderGetJointVeloc$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonSliderGetJointVeloc$MH,"NewtonSliderGetJointVeloc");
    }
    /**
     * {@snippet :
     * float NewtonSliderGetJointVeloc(struct NewtonJoint* slider);
     * }
     */
    public static float NewtonSliderGetJointVeloc(MemorySegment slider) {
        var mh$ = NewtonSliderGetJointVeloc$MH();
        try {
            return (float)mh$.invokeExact(slider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonSliderGetJointForce$MH,"NewtonSliderGetJointForce");
    }
    /**
     * {@snippet :
     * void NewtonSliderGetJointForce(struct NewtonJoint* slider, float* force);
     * }
     */
    public static void NewtonSliderGetJointForce(MemorySegment slider, MemorySegment force) {
        var mh$ = NewtonSliderGetJointForce$MH();
        try {
            mh$.invokeExact(slider, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderCalculateStopAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonSliderCalculateStopAccel$MH,"NewtonSliderCalculateStopAccel");
    }
    /**
     * {@snippet :
     * float NewtonSliderCalculateStopAccel(struct NewtonJoint* slider, struct NewtonHingeSliderUpdateDesc* desc, float position);
     * }
     */
    public static float NewtonSliderCalculateStopAccel(MemorySegment slider, MemorySegment desc, float position) {
        var mh$ = NewtonSliderCalculateStopAccel$MH();
        try {
            return (float)mh$.invokeExact(slider, desc, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateCorkscrew$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonConstraintCreateCorkscrew$MH,"NewtonConstraintCreateCorkscrew");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonConstraintCreateCorkscrew(struct NewtonWorld* newtonWorld, float* pivotPoint, float* pinDir, struct NewtonBody* childBody, struct NewtonBody* parentBody);
     * }
     */
    public static MemorySegment NewtonConstraintCreateCorkscrew(MemorySegment newtonWorld, MemorySegment pivotPoint, MemorySegment pinDir, MemorySegment childBody, MemorySegment parentBody) {
        var mh$ = NewtonConstraintCreateCorkscrew$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, pivotPoint, pinDir, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$103.NewtonCorkscrewSetUserCallback$MH,"NewtonCorkscrewSetUserCallback");
    }
    /**
     * {@snippet :
     * void NewtonCorkscrewSetUserCallback(struct NewtonJoint* corkscrew, unsigned int (*callback)(struct NewtonJoint*,struct NewtonHingeSliderUpdateDesc*));
     * }
     */
    public static void NewtonCorkscrewSetUserCallback(MemorySegment corkscrew, MemorySegment callback) {
        var mh$ = NewtonCorkscrewSetUserCallback$MH();
        try {
            mh$.invokeExact(corkscrew, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointPosit$MH() {
        return RuntimeHelper.requireNonNull(constants$103.NewtonCorkscrewGetJointPosit$MH,"NewtonCorkscrewGetJointPosit");
    }
    /**
     * {@snippet :
     * float NewtonCorkscrewGetJointPosit(struct NewtonJoint* corkscrew);
     * }
     */
    public static float NewtonCorkscrewGetJointPosit(MemorySegment corkscrew) {
        var mh$ = NewtonCorkscrewGetJointPosit$MH();
        try {
            return (float)mh$.invokeExact(corkscrew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$103.NewtonCorkscrewGetJointAngle$MH,"NewtonCorkscrewGetJointAngle");
    }
    /**
     * {@snippet :
     * float NewtonCorkscrewGetJointAngle(struct NewtonJoint* corkscrew);
     * }
     */
    public static float NewtonCorkscrewGetJointAngle(MemorySegment corkscrew) {
        var mh$ = NewtonCorkscrewGetJointAngle$MH();
        try {
            return (float)mh$.invokeExact(corkscrew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointVeloc$MH() {
        return RuntimeHelper.requireNonNull(constants$103.NewtonCorkscrewGetJointVeloc$MH,"NewtonCorkscrewGetJointVeloc");
    }
    /**
     * {@snippet :
     * float NewtonCorkscrewGetJointVeloc(struct NewtonJoint* corkscrew);
     * }
     */
    public static float NewtonCorkscrewGetJointVeloc(MemorySegment corkscrew) {
        var mh$ = NewtonCorkscrewGetJointVeloc$MH();
        try {
            return (float)mh$.invokeExact(corkscrew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$103.NewtonCorkscrewGetJointOmega$MH,"NewtonCorkscrewGetJointOmega");
    }
    /**
     * {@snippet :
     * float NewtonCorkscrewGetJointOmega(struct NewtonJoint* corkscrew);
     * }
     */
    public static float NewtonCorkscrewGetJointOmega(MemorySegment corkscrew) {
        var mh$ = NewtonCorkscrewGetJointOmega$MH();
        try {
            return (float)mh$.invokeExact(corkscrew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$104.NewtonCorkscrewGetJointForce$MH,"NewtonCorkscrewGetJointForce");
    }
    /**
     * {@snippet :
     * void NewtonCorkscrewGetJointForce(struct NewtonJoint* corkscrew, float* force);
     * }
     */
    public static void NewtonCorkscrewGetJointForce(MemorySegment corkscrew, MemorySegment force) {
        var mh$ = NewtonCorkscrewGetJointForce$MH();
        try {
            mh$.invokeExact(corkscrew, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewCalculateStopAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$104.NewtonCorkscrewCalculateStopAlpha$MH,"NewtonCorkscrewCalculateStopAlpha");
    }
    /**
     * {@snippet :
     * float NewtonCorkscrewCalculateStopAlpha(struct NewtonJoint* corkscrew, struct NewtonHingeSliderUpdateDesc* desc, float angle);
     * }
     */
    public static float NewtonCorkscrewCalculateStopAlpha(MemorySegment corkscrew, MemorySegment desc, float angle) {
        var mh$ = NewtonCorkscrewCalculateStopAlpha$MH();
        try {
            return (float)mh$.invokeExact(corkscrew, desc, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewCalculateStopAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$104.NewtonCorkscrewCalculateStopAccel$MH,"NewtonCorkscrewCalculateStopAccel");
    }
    /**
     * {@snippet :
     * float NewtonCorkscrewCalculateStopAccel(struct NewtonJoint* corkscrew, struct NewtonHingeSliderUpdateDesc* desc, float position);
     * }
     */
    public static float NewtonCorkscrewCalculateStopAccel(MemorySegment corkscrew, MemorySegment desc, float position) {
        var mh$ = NewtonCorkscrewCalculateStopAccel$MH();
        try {
            return (float)mh$.invokeExact(corkscrew, desc, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateUniversal$MH() {
        return RuntimeHelper.requireNonNull(constants$104.NewtonConstraintCreateUniversal$MH,"NewtonConstraintCreateUniversal");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonConstraintCreateUniversal(struct NewtonWorld* newtonWorld, float* pivotPoint, float* pinDir0, float* pinDir1, struct NewtonBody* childBody, struct NewtonBody* parentBody);
     * }
     */
    public static MemorySegment NewtonConstraintCreateUniversal(MemorySegment newtonWorld, MemorySegment pivotPoint, MemorySegment pinDir0, MemorySegment pinDir1, MemorySegment childBody, MemorySegment parentBody) {
        var mh$ = NewtonConstraintCreateUniversal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, pivotPoint, pinDir0, pinDir1, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$105.NewtonUniversalSetUserCallback$MH,"NewtonUniversalSetUserCallback");
    }
    /**
     * {@snippet :
     * void NewtonUniversalSetUserCallback(struct NewtonJoint* universal, unsigned int (*callback)(struct NewtonJoint*,struct NewtonHingeSliderUpdateDesc*));
     * }
     */
    public static void NewtonUniversalSetUserCallback(MemorySegment universal, MemorySegment callback) {
        var mh$ = NewtonUniversalSetUserCallback$MH();
        try {
            mh$.invokeExact(universal, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointAngle0$MH() {
        return RuntimeHelper.requireNonNull(constants$105.NewtonUniversalGetJointAngle0$MH,"NewtonUniversalGetJointAngle0");
    }
    /**
     * {@snippet :
     * float NewtonUniversalGetJointAngle0(struct NewtonJoint* universal);
     * }
     */
    public static float NewtonUniversalGetJointAngle0(MemorySegment universal) {
        var mh$ = NewtonUniversalGetJointAngle0$MH();
        try {
            return (float)mh$.invokeExact(universal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointAngle1$MH() {
        return RuntimeHelper.requireNonNull(constants$105.NewtonUniversalGetJointAngle1$MH,"NewtonUniversalGetJointAngle1");
    }
    /**
     * {@snippet :
     * float NewtonUniversalGetJointAngle1(struct NewtonJoint* universal);
     * }
     */
    public static float NewtonUniversalGetJointAngle1(MemorySegment universal) {
        var mh$ = NewtonUniversalGetJointAngle1$MH();
        try {
            return (float)mh$.invokeExact(universal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointOmega0$MH() {
        return RuntimeHelper.requireNonNull(constants$105.NewtonUniversalGetJointOmega0$MH,"NewtonUniversalGetJointOmega0");
    }
    /**
     * {@snippet :
     * float NewtonUniversalGetJointOmega0(struct NewtonJoint* universal);
     * }
     */
    public static float NewtonUniversalGetJointOmega0(MemorySegment universal) {
        var mh$ = NewtonUniversalGetJointOmega0$MH();
        try {
            return (float)mh$.invokeExact(universal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointOmega1$MH() {
        return RuntimeHelper.requireNonNull(constants$105.NewtonUniversalGetJointOmega1$MH,"NewtonUniversalGetJointOmega1");
    }
    /**
     * {@snippet :
     * float NewtonUniversalGetJointOmega1(struct NewtonJoint* universal);
     * }
     */
    public static float NewtonUniversalGetJointOmega1(MemorySegment universal) {
        var mh$ = NewtonUniversalGetJointOmega1$MH();
        try {
            return (float)mh$.invokeExact(universal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$105.NewtonUniversalGetJointForce$MH,"NewtonUniversalGetJointForce");
    }
    /**
     * {@snippet :
     * void NewtonUniversalGetJointForce(struct NewtonJoint* universal, float* force);
     * }
     */
    public static void NewtonUniversalGetJointForce(MemorySegment universal, MemorySegment force) {
        var mh$ = NewtonUniversalGetJointForce$MH();
        try {
            mh$.invokeExact(universal, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalCalculateStopAlpha0$MH() {
        return RuntimeHelper.requireNonNull(constants$106.NewtonUniversalCalculateStopAlpha0$MH,"NewtonUniversalCalculateStopAlpha0");
    }
    /**
     * {@snippet :
     * float NewtonUniversalCalculateStopAlpha0(struct NewtonJoint* universal, struct NewtonHingeSliderUpdateDesc* desc, float angle);
     * }
     */
    public static float NewtonUniversalCalculateStopAlpha0(MemorySegment universal, MemorySegment desc, float angle) {
        var mh$ = NewtonUniversalCalculateStopAlpha0$MH();
        try {
            return (float)mh$.invokeExact(universal, desc, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalCalculateStopAlpha1$MH() {
        return RuntimeHelper.requireNonNull(constants$106.NewtonUniversalCalculateStopAlpha1$MH,"NewtonUniversalCalculateStopAlpha1");
    }
    /**
     * {@snippet :
     * float NewtonUniversalCalculateStopAlpha1(struct NewtonJoint* universal, struct NewtonHingeSliderUpdateDesc* desc, float angle);
     * }
     */
    public static float NewtonUniversalCalculateStopAlpha1(MemorySegment universal, MemorySegment desc, float angle) {
        var mh$ = NewtonUniversalCalculateStopAlpha1$MH();
        try {
            return (float)mh$.invokeExact(universal, desc, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateUpVector$MH() {
        return RuntimeHelper.requireNonNull(constants$106.NewtonConstraintCreateUpVector$MH,"NewtonConstraintCreateUpVector");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonConstraintCreateUpVector(struct NewtonWorld* newtonWorld, float* pinDir, struct NewtonBody* body);
     * }
     */
    public static MemorySegment NewtonConstraintCreateUpVector(MemorySegment newtonWorld, MemorySegment pinDir, MemorySegment body) {
        var mh$ = NewtonConstraintCreateUpVector$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, pinDir, body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUpVectorGetPin$MH() {
        return RuntimeHelper.requireNonNull(constants$106.NewtonUpVectorGetPin$MH,"NewtonUpVectorGetPin");
    }
    /**
     * {@snippet :
     * void NewtonUpVectorGetPin(struct NewtonJoint* upVector, float* pin);
     * }
     */
    public static void NewtonUpVectorGetPin(MemorySegment upVector, MemorySegment pin) {
        var mh$ = NewtonUpVectorGetPin$MH();
        try {
            mh$.invokeExact(upVector, pin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUpVectorSetPin$MH() {
        return RuntimeHelper.requireNonNull(constants$106.NewtonUpVectorSetPin$MH,"NewtonUpVectorSetPin");
    }
    /**
     * {@snippet :
     * void NewtonUpVectorSetPin(struct NewtonJoint* upVector, float* pin);
     * }
     */
    public static void NewtonUpVectorSetPin(MemorySegment upVector, MemorySegment pin) {
        var mh$ = NewtonUpVectorSetPin$MH();
        try {
            mh$.invokeExact(upVector, pin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateUserJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$107.NewtonConstraintCreateUserJoint$MH,"NewtonConstraintCreateUserJoint");
    }
    /**
     * {@snippet :
     * struct NewtonJoint* NewtonConstraintCreateUserJoint(struct NewtonWorld* newtonWorld, int maxDOF, void (*callback)(struct NewtonJoint*,float,int), struct NewtonBody* childBody, struct NewtonBody* parentBody);
     * }
     */
    public static MemorySegment NewtonConstraintCreateUserJoint(MemorySegment newtonWorld, int maxDOF, MemorySegment callback, MemorySegment childBody, MemorySegment parentBody) {
        var mh$ = NewtonConstraintCreateUserJoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, maxDOF, callback, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetSolverModel$MH() {
        return RuntimeHelper.requireNonNull(constants$107.NewtonUserJointGetSolverModel$MH,"NewtonUserJointGetSolverModel");
    }
    /**
     * {@snippet :
     * int NewtonUserJointGetSolverModel(struct NewtonJoint* joint);
     * }
     */
    public static int NewtonUserJointGetSolverModel(MemorySegment joint) {
        var mh$ = NewtonUserJointGetSolverModel$MH();
        try {
            return (int)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetSolverModel$MH() {
        return RuntimeHelper.requireNonNull(constants$107.NewtonUserJointSetSolverModel$MH,"NewtonUserJointSetSolverModel");
    }
    /**
     * {@snippet :
     * void NewtonUserJointSetSolverModel(struct NewtonJoint* joint, int model);
     * }
     */
    public static void NewtonUserJointSetSolverModel(MemorySegment joint, int model) {
        var mh$ = NewtonUserJointSetSolverModel$MH();
        try {
            mh$.invokeExact(joint, model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointMassScale$MH() {
        return RuntimeHelper.requireNonNull(constants$107.NewtonUserJointMassScale$MH,"NewtonUserJointMassScale");
    }
    /**
     * {@snippet :
     * void NewtonUserJointMassScale(struct NewtonJoint* joint, float scaleBody0, float scaleBody1);
     * }
     */
    public static void NewtonUserJointMassScale(MemorySegment joint, float scaleBody0, float scaleBody1) {
        var mh$ = NewtonUserJointMassScale$MH();
        try {
            mh$.invokeExact(joint, scaleBody0, scaleBody1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetFeedbackCollectorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$108.NewtonUserJointSetFeedbackCollectorCallback$MH,"NewtonUserJointSetFeedbackCollectorCallback");
    }
    /**
     * {@snippet :
     * void NewtonUserJointSetFeedbackCollectorCallback(struct NewtonJoint* joint, void (*getFeedback)(struct NewtonJoint*,float,int));
     * }
     */
    public static void NewtonUserJointSetFeedbackCollectorCallback(MemorySegment joint, MemorySegment getFeedback) {
        var mh$ = NewtonUserJointSetFeedbackCollectorCallback$MH();
        try {
            mh$.invokeExact(joint, getFeedback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointAddLinearRow$MH() {
        return RuntimeHelper.requireNonNull(constants$108.NewtonUserJointAddLinearRow$MH,"NewtonUserJointAddLinearRow");
    }
    /**
     * {@snippet :
     * void NewtonUserJointAddLinearRow(struct NewtonJoint* joint, float* pivot0, float* pivot1, float* dir);
     * }
     */
    public static void NewtonUserJointAddLinearRow(MemorySegment joint, MemorySegment pivot0, MemorySegment pivot1, MemorySegment dir) {
        var mh$ = NewtonUserJointAddLinearRow$MH();
        try {
            mh$.invokeExact(joint, pivot0, pivot1, dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointAddAngularRow$MH() {
        return RuntimeHelper.requireNonNull(constants$108.NewtonUserJointAddAngularRow$MH,"NewtonUserJointAddAngularRow");
    }
    /**
     * {@snippet :
     * void NewtonUserJointAddAngularRow(struct NewtonJoint* joint, float relativeAngle, float* dir);
     * }
     */
    public static void NewtonUserJointAddAngularRow(MemorySegment joint, float relativeAngle, MemorySegment dir) {
        var mh$ = NewtonUserJointAddAngularRow$MH();
        try {
            mh$.invokeExact(joint, relativeAngle, dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointAddGeneralRow$MH() {
        return RuntimeHelper.requireNonNull(constants$108.NewtonUserJointAddGeneralRow$MH,"NewtonUserJointAddGeneralRow");
    }
    /**
     * {@snippet :
     * void NewtonUserJointAddGeneralRow(struct NewtonJoint* joint, float* jacobian0, float* jacobian1);
     * }
     */
    public static void NewtonUserJointAddGeneralRow(MemorySegment joint, MemorySegment jacobian0, MemorySegment jacobian1) {
        var mh$ = NewtonUserJointAddGeneralRow$MH();
        try {
            mh$.invokeExact(joint, jacobian0, jacobian1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowMinimumFriction$MH() {
        return RuntimeHelper.requireNonNull(constants$108.NewtonUserJointSetRowMinimumFriction$MH,"NewtonUserJointSetRowMinimumFriction");
    }
    /**
     * {@snippet :
     * void NewtonUserJointSetRowMinimumFriction(struct NewtonJoint* joint, float friction);
     * }
     */
    public static void NewtonUserJointSetRowMinimumFriction(MemorySegment joint, float friction) {
        var mh$ = NewtonUserJointSetRowMinimumFriction$MH();
        try {
            mh$.invokeExact(joint, friction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowMaximumFriction$MH() {
        return RuntimeHelper.requireNonNull(constants$109.NewtonUserJointSetRowMaximumFriction$MH,"NewtonUserJointSetRowMaximumFriction");
    }
    /**
     * {@snippet :
     * void NewtonUserJointSetRowMaximumFriction(struct NewtonJoint* joint, float friction);
     * }
     */
    public static void NewtonUserJointSetRowMaximumFriction(MemorySegment joint, float friction) {
        var mh$ = NewtonUserJointSetRowMaximumFriction$MH();
        try {
            mh$.invokeExact(joint, friction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointCalculateRowZeroAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$109.NewtonUserJointCalculateRowZeroAcceleration$MH,"NewtonUserJointCalculateRowZeroAcceleration");
    }
    /**
     * {@snippet :
     * float NewtonUserJointCalculateRowZeroAcceleration(struct NewtonJoint* joint);
     * }
     */
    public static float NewtonUserJointCalculateRowZeroAcceleration(MemorySegment joint) {
        var mh$ = NewtonUserJointCalculateRowZeroAcceleration$MH();
        try {
            return (float)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetRowAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$109.NewtonUserJointGetRowAcceleration$MH,"NewtonUserJointGetRowAcceleration");
    }
    /**
     * {@snippet :
     * float NewtonUserJointGetRowAcceleration(struct NewtonJoint* joint);
     * }
     */
    public static float NewtonUserJointGetRowAcceleration(MemorySegment joint) {
        var mh$ = NewtonUserJointGetRowAcceleration$MH();
        try {
            return (float)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetRowJacobian$MH() {
        return RuntimeHelper.requireNonNull(constants$109.NewtonUserJointGetRowJacobian$MH,"NewtonUserJointGetRowJacobian");
    }
    /**
     * {@snippet :
     * void NewtonUserJointGetRowJacobian(struct NewtonJoint* joint, float* linear0, float* angula0, float* linear1, float* angula1);
     * }
     */
    public static void NewtonUserJointGetRowJacobian(MemorySegment joint, MemorySegment linear0, MemorySegment angula0, MemorySegment linear1, MemorySegment angula1) {
        var mh$ = NewtonUserJointGetRowJacobian$MH();
        try {
            mh$.invokeExact(joint, linear0, angula0, linear1, angula1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$109.NewtonUserJointSetRowAcceleration$MH,"NewtonUserJointSetRowAcceleration");
    }
    /**
     * {@snippet :
     * void NewtonUserJointSetRowAcceleration(struct NewtonJoint* joint, float acceleration);
     * }
     */
    public static void NewtonUserJointSetRowAcceleration(MemorySegment joint, float acceleration) {
        var mh$ = NewtonUserJointSetRowAcceleration$MH();
        try {
            mh$.invokeExact(joint, acceleration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowMassDependentSpringDamperAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$109.NewtonUserJointSetRowMassDependentSpringDamperAcceleration$MH,"NewtonUserJointSetRowMassDependentSpringDamperAcceleration");
    }
    /**
     * {@snippet :
     * void NewtonUserJointSetRowMassDependentSpringDamperAcceleration(struct NewtonJoint* joint, float spring, float damper);
     * }
     */
    public static void NewtonUserJointSetRowMassDependentSpringDamperAcceleration(MemorySegment joint, float spring, float damper) {
        var mh$ = NewtonUserJointSetRowMassDependentSpringDamperAcceleration$MH();
        try {
            mh$.invokeExact(joint, spring, damper);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowMassIndependentSpringDamperAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$110.NewtonUserJointSetRowMassIndependentSpringDamperAcceleration$MH,"NewtonUserJointSetRowMassIndependentSpringDamperAcceleration");
    }
    /**
     * {@snippet :
     * void NewtonUserJointSetRowMassIndependentSpringDamperAcceleration(struct NewtonJoint* joint, float rowStiffness, float spring, float damper);
     * }
     */
    public static void NewtonUserJointSetRowMassIndependentSpringDamperAcceleration(MemorySegment joint, float rowStiffness, float spring, float damper) {
        var mh$ = NewtonUserJointSetRowMassIndependentSpringDamperAcceleration$MH();
        try {
            mh$.invokeExact(joint, rowStiffness, spring, damper);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowStiffness$MH() {
        return RuntimeHelper.requireNonNull(constants$110.NewtonUserJointSetRowStiffness$MH,"NewtonUserJointSetRowStiffness");
    }
    /**
     * {@snippet :
     * void NewtonUserJointSetRowStiffness(struct NewtonJoint* joint, float stiffness);
     * }
     */
    public static void NewtonUserJointSetRowStiffness(MemorySegment joint, float stiffness) {
        var mh$ = NewtonUserJointSetRowStiffness$MH();
        try {
            mh$.invokeExact(joint, stiffness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJoinRowsCount$MH() {
        return RuntimeHelper.requireNonNull(constants$110.NewtonUserJoinRowsCount$MH,"NewtonUserJoinRowsCount");
    }
    /**
     * {@snippet :
     * int NewtonUserJoinRowsCount(struct NewtonJoint* joint);
     * }
     */
    public static int NewtonUserJoinRowsCount(MemorySegment joint) {
        var mh$ = NewtonUserJoinRowsCount$MH();
        try {
            return (int)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetGeneralRow$MH() {
        return RuntimeHelper.requireNonNull(constants$110.NewtonUserJointGetGeneralRow$MH,"NewtonUserJointGetGeneralRow");
    }
    /**
     * {@snippet :
     * void NewtonUserJointGetGeneralRow(struct NewtonJoint* joint, int index, float* jacobian0, float* jacobian1);
     * }
     */
    public static void NewtonUserJointGetGeneralRow(MemorySegment joint, int index, MemorySegment jacobian0, MemorySegment jacobian1) {
        var mh$ = NewtonUserJointGetGeneralRow$MH();
        try {
            mh$.invokeExact(joint, index, jacobian0, jacobian1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetRowForce$MH() {
        return RuntimeHelper.requireNonNull(constants$110.NewtonUserJointGetRowForce$MH,"NewtonUserJointGetRowForce");
    }
    /**
     * {@snippet :
     * float NewtonUserJointGetRowForce(struct NewtonJoint* joint, int row);
     * }
     */
    public static float NewtonUserJointGetRowForce(MemorySegment joint, int row) {
        var mh$ = NewtonUserJointGetRowForce$MH();
        try {
            return (float)mh$.invokeExact(joint, row);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$110.NewtonMeshCreate$MH,"NewtonMeshCreate");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreate(struct NewtonWorld* newtonWorld);
     * }
     */
    public static MemorySegment NewtonMeshCreate(MemorySegment newtonWorld) {
        var mh$ = NewtonMeshCreate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFromMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$111.NewtonMeshCreateFromMesh$MH,"NewtonMeshCreateFromMesh");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateFromMesh(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshCreateFromMesh(MemorySegment mesh) {
        var mh$ = NewtonMeshCreateFromMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFromCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$111.NewtonMeshCreateFromCollision$MH,"NewtonMeshCreateFromCollision");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateFromCollision(struct NewtonCollision* collision);
     * }
     */
    public static MemorySegment NewtonMeshCreateFromCollision(MemorySegment collision) {
        var mh$ = NewtonMeshCreateFromCollision$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateTetrahedraIsoSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$111.NewtonMeshCreateTetrahedraIsoSurface$MH,"NewtonMeshCreateTetrahedraIsoSurface");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateTetrahedraIsoSurface(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshCreateTetrahedraIsoSurface(MemorySegment mesh) {
        var mh$ = NewtonMeshCreateTetrahedraIsoSurface$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateConvexHull$MH() {
        return RuntimeHelper.requireNonNull(constants$111.NewtonMeshCreateConvexHull$MH,"NewtonMeshCreateConvexHull");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateConvexHull(struct NewtonWorld* newtonWorld, int pointCount, float* vertexCloud, int strideInBytes, float tolerance);
     * }
     */
    public static MemorySegment NewtonMeshCreateConvexHull(MemorySegment newtonWorld, int pointCount, MemorySegment vertexCloud, int strideInBytes, float tolerance) {
        var mh$ = NewtonMeshCreateConvexHull$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, pointCount, vertexCloud, strideInBytes, tolerance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateVoronoiConvexDecomposition$MH() {
        return RuntimeHelper.requireNonNull(constants$111.NewtonMeshCreateVoronoiConvexDecomposition$MH,"NewtonMeshCreateVoronoiConvexDecomposition");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateVoronoiConvexDecomposition(struct NewtonWorld* newtonWorld, int pointCount, float* vertexCloud, int strideInBytes, int materialID, float* textureMatrix);
     * }
     */
    public static MemorySegment NewtonMeshCreateVoronoiConvexDecomposition(MemorySegment newtonWorld, int pointCount, MemorySegment vertexCloud, int strideInBytes, int materialID, MemorySegment textureMatrix) {
        var mh$ = NewtonMeshCreateVoronoiConvexDecomposition$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, pointCount, vertexCloud, strideInBytes, materialID, textureMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFromSerialization$MH() {
        return RuntimeHelper.requireNonNull(constants$112.NewtonMeshCreateFromSerialization$MH,"NewtonMeshCreateFromSerialization");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateFromSerialization(struct NewtonWorld* newtonWorld, void (*deserializeFunction)(void*,void*,int), void* serializeHandle);
     * }
     */
    public static MemorySegment NewtonMeshCreateFromSerialization(MemorySegment newtonWorld, MemorySegment deserializeFunction, MemorySegment serializeHandle) {
        var mh$ = NewtonMeshCreateFromSerialization$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, deserializeFunction, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$112.NewtonMeshDestroy$MH,"NewtonMeshDestroy");
    }
    /**
     * {@snippet :
     * void NewtonMeshDestroy(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshDestroy(MemorySegment mesh) {
        var mh$ = NewtonMeshDestroy$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSerialize$MH() {
        return RuntimeHelper.requireNonNull(constants$112.NewtonMeshSerialize$MH,"NewtonMeshSerialize");
    }
    /**
     * {@snippet :
     * void NewtonMeshSerialize(struct NewtonMesh* mesh, void (*serializeFunction)(void*,void*,int), void* serializeHandle);
     * }
     */
    public static void NewtonMeshSerialize(MemorySegment mesh, MemorySegment serializeFunction, MemorySegment serializeHandle) {
        var mh$ = NewtonMeshSerialize$MH();
        try {
            mh$.invokeExact(mesh, serializeFunction, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSaveOFF$MH() {
        return RuntimeHelper.requireNonNull(constants$113.NewtonMeshSaveOFF$MH,"NewtonMeshSaveOFF");
    }
    /**
     * {@snippet :
     * void NewtonMeshSaveOFF(struct NewtonMesh* mesh, char* filename);
     * }
     */
    public static void NewtonMeshSaveOFF(MemorySegment mesh, MemorySegment filename) {
        var mh$ = NewtonMeshSaveOFF$MH();
        try {
            mh$.invokeExact(mesh, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshLoadOFF$MH() {
        return RuntimeHelper.requireNonNull(constants$113.NewtonMeshLoadOFF$MH,"NewtonMeshLoadOFF");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshLoadOFF(struct NewtonWorld* newtonWorld, char* filename);
     * }
     */
    public static MemorySegment NewtonMeshLoadOFF(MemorySegment newtonWorld, MemorySegment filename) {
        var mh$ = NewtonMeshLoadOFF$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshLoadTetrahedraMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$113.NewtonMeshLoadTetrahedraMesh$MH,"NewtonMeshLoadTetrahedraMesh");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshLoadTetrahedraMesh(struct NewtonWorld* newtonWorld, char* filename);
     * }
     */
    public static MemorySegment NewtonMeshLoadTetrahedraMesh(MemorySegment newtonWorld, MemorySegment filename) {
        var mh$ = NewtonMeshLoadTetrahedraMesh$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(newtonWorld, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshFlipWinding$MH() {
        return RuntimeHelper.requireNonNull(constants$113.NewtonMeshFlipWinding$MH,"NewtonMeshFlipWinding");
    }
    /**
     * {@snippet :
     * void NewtonMeshFlipWinding(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshFlipWinding(MemorySegment mesh) {
        var mh$ = NewtonMeshFlipWinding$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplyTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$113.NewtonMeshApplyTransform$MH,"NewtonMeshApplyTransform");
    }
    /**
     * {@snippet :
     * void NewtonMeshApplyTransform(struct NewtonMesh* mesh, float* matrix);
     * }
     */
    public static void NewtonMeshApplyTransform(MemorySegment mesh, MemorySegment matrix) {
        var mh$ = NewtonMeshApplyTransform$MH();
        try {
            mh$.invokeExact(mesh, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCalculateOOBB$MH() {
        return RuntimeHelper.requireNonNull(constants$113.NewtonMeshCalculateOOBB$MH,"NewtonMeshCalculateOOBB");
    }
    /**
     * {@snippet :
     * void NewtonMeshCalculateOOBB(struct NewtonMesh* mesh, float* matrix, float* x, float* y, float* z);
     * }
     */
    public static void NewtonMeshCalculateOOBB(MemorySegment mesh, MemorySegment matrix, MemorySegment x, MemorySegment y, MemorySegment z) {
        var mh$ = NewtonMeshCalculateOOBB$MH();
        try {
            mh$.invokeExact(mesh, matrix, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCalculateVertexNormals$MH() {
        return RuntimeHelper.requireNonNull(constants$114.NewtonMeshCalculateVertexNormals$MH,"NewtonMeshCalculateVertexNormals");
    }
    /**
     * {@snippet :
     * void NewtonMeshCalculateVertexNormals(struct NewtonMesh* mesh, float angleInRadians);
     * }
     */
    public static void NewtonMeshCalculateVertexNormals(MemorySegment mesh, float angleInRadians) {
        var mh$ = NewtonMeshCalculateVertexNormals$MH();
        try {
            mh$.invokeExact(mesh, angleInRadians);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplySphericalMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$114.NewtonMeshApplySphericalMapping$MH,"NewtonMeshApplySphericalMapping");
    }
    /**
     * {@snippet :
     * void NewtonMeshApplySphericalMapping(struct NewtonMesh* mesh, int material, float* aligmentMatrix);
     * }
     */
    public static void NewtonMeshApplySphericalMapping(MemorySegment mesh, int material, MemorySegment aligmentMatrix) {
        var mh$ = NewtonMeshApplySphericalMapping$MH();
        try {
            mh$.invokeExact(mesh, material, aligmentMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplyCylindricalMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$114.NewtonMeshApplyCylindricalMapping$MH,"NewtonMeshApplyCylindricalMapping");
    }
    /**
     * {@snippet :
     * void NewtonMeshApplyCylindricalMapping(struct NewtonMesh* mesh, int cylinderMaterial, int capMaterial, float* aligmentMatrix);
     * }
     */
    public static void NewtonMeshApplyCylindricalMapping(MemorySegment mesh, int cylinderMaterial, int capMaterial, MemorySegment aligmentMatrix) {
        var mh$ = NewtonMeshApplyCylindricalMapping$MH();
        try {
            mh$.invokeExact(mesh, cylinderMaterial, capMaterial, aligmentMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplyBoxMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$114.NewtonMeshApplyBoxMapping$MH,"NewtonMeshApplyBoxMapping");
    }
    /**
     * {@snippet :
     * void NewtonMeshApplyBoxMapping(struct NewtonMesh* mesh, int frontMaterial, int sideMaterial, int topMaterial, float* aligmentMatrix);
     * }
     */
    public static void NewtonMeshApplyBoxMapping(MemorySegment mesh, int frontMaterial, int sideMaterial, int topMaterial, MemorySegment aligmentMatrix) {
        var mh$ = NewtonMeshApplyBoxMapping$MH();
        try {
            mh$.invokeExact(mesh, frontMaterial, sideMaterial, topMaterial, aligmentMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplyAngleBasedMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$115.NewtonMeshApplyAngleBasedMapping$MH,"NewtonMeshApplyAngleBasedMapping");
    }
    /**
     * {@snippet :
     * void NewtonMeshApplyAngleBasedMapping(struct NewtonMesh* mesh, int material, int (*reportPrograssCallback)(float,void*), void* reportPrgressUserData, float* aligmentMatrix);
     * }
     */
    public static void NewtonMeshApplyAngleBasedMapping(MemorySegment mesh, int material, MemorySegment reportPrograssCallback, MemorySegment reportPrgressUserData, MemorySegment aligmentMatrix) {
        var mh$ = NewtonMeshApplyAngleBasedMapping$MH();
        try {
            mh$.invokeExact(mesh, material, reportPrograssCallback, reportPrgressUserData, aligmentMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateTetrahedraLinearBlendSkinWeightsChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$115.NewtonCreateTetrahedraLinearBlendSkinWeightsChannel$MH,"NewtonCreateTetrahedraLinearBlendSkinWeightsChannel");
    }
    /**
     * {@snippet :
     * void NewtonCreateTetrahedraLinearBlendSkinWeightsChannel(struct NewtonMesh* tetrahedraMesh, struct NewtonMesh* skinMesh);
     * }
     */
    public static void NewtonCreateTetrahedraLinearBlendSkinWeightsChannel(MemorySegment tetrahedraMesh, MemorySegment skinMesh) {
        var mh$ = NewtonCreateTetrahedraLinearBlendSkinWeightsChannel$MH();
        try {
            mh$.invokeExact(tetrahedraMesh, skinMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshOptimize$MH() {
        return RuntimeHelper.requireNonNull(constants$115.NewtonMeshOptimize$MH,"NewtonMeshOptimize");
    }
    /**
     * {@snippet :
     * void NewtonMeshOptimize(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshOptimize(MemorySegment mesh) {
        var mh$ = NewtonMeshOptimize$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshOptimizePoints$MH() {
        return RuntimeHelper.requireNonNull(constants$115.NewtonMeshOptimizePoints$MH,"NewtonMeshOptimizePoints");
    }
    /**
     * {@snippet :
     * void NewtonMeshOptimizePoints(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshOptimizePoints(MemorySegment mesh) {
        var mh$ = NewtonMeshOptimizePoints$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshOptimizeVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$115.NewtonMeshOptimizeVertex$MH,"NewtonMeshOptimizeVertex");
    }
    /**
     * {@snippet :
     * void NewtonMeshOptimizeVertex(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshOptimizeVertex(MemorySegment mesh) {
        var mh$ = NewtonMeshOptimizeVertex$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshIsOpenMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$115.NewtonMeshIsOpenMesh$MH,"NewtonMeshIsOpenMesh");
    }
    /**
     * {@snippet :
     * int NewtonMeshIsOpenMesh(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshIsOpenMesh(MemorySegment mesh) {
        var mh$ = NewtonMeshIsOpenMesh$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshFixTJoints$MH() {
        return RuntimeHelper.requireNonNull(constants$116.NewtonMeshFixTJoints$MH,"NewtonMeshFixTJoints");
    }
    /**
     * {@snippet :
     * void NewtonMeshFixTJoints(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshFixTJoints(MemorySegment mesh) {
        var mh$ = NewtonMeshFixTJoints$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshPolygonize$MH() {
        return RuntimeHelper.requireNonNull(constants$116.NewtonMeshPolygonize$MH,"NewtonMeshPolygonize");
    }
    /**
     * {@snippet :
     * void NewtonMeshPolygonize(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshPolygonize(MemorySegment mesh) {
        var mh$ = NewtonMeshPolygonize$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshTriangulate$MH() {
        return RuntimeHelper.requireNonNull(constants$116.NewtonMeshTriangulate$MH,"NewtonMeshTriangulate");
    }
    /**
     * {@snippet :
     * void NewtonMeshTriangulate(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshTriangulate(MemorySegment mesh) {
        var mh$ = NewtonMeshTriangulate$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshUnion$MH() {
        return RuntimeHelper.requireNonNull(constants$116.NewtonMeshUnion$MH,"NewtonMeshUnion");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshUnion(struct NewtonMesh* mesh, struct NewtonMesh* clipper, float* clipperMatrix);
     * }
     */
    public static MemorySegment NewtonMeshUnion(MemorySegment mesh, MemorySegment clipper, MemorySegment clipperMatrix) {
        var mh$ = NewtonMeshUnion$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, clipper, clipperMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshDifference$MH() {
        return RuntimeHelper.requireNonNull(constants$116.NewtonMeshDifference$MH,"NewtonMeshDifference");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshDifference(struct NewtonMesh* mesh, struct NewtonMesh* clipper, float* clipperMatrix);
     * }
     */
    public static MemorySegment NewtonMeshDifference(MemorySegment mesh, MemorySegment clipper, MemorySegment clipperMatrix) {
        var mh$ = NewtonMeshDifference$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, clipper, clipperMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshIntersection$MH() {
        return RuntimeHelper.requireNonNull(constants$116.NewtonMeshIntersection$MH,"NewtonMeshIntersection");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshIntersection(struct NewtonMesh* mesh, struct NewtonMesh* clipper, float* clipperMatrix);
     * }
     */
    public static MemorySegment NewtonMeshIntersection(MemorySegment mesh, MemorySegment clipper, MemorySegment clipperMatrix) {
        var mh$ = NewtonMeshIntersection$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, clipper, clipperMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshClip$MH() {
        return RuntimeHelper.requireNonNull(constants$117.NewtonMeshClip$MH,"NewtonMeshClip");
    }
    /**
     * {@snippet :
     * void NewtonMeshClip(struct NewtonMesh* mesh, struct NewtonMesh* clipper, float* clipperMatrix, struct NewtonMesh** topMesh, struct NewtonMesh** bottomMesh);
     * }
     */
    public static void NewtonMeshClip(MemorySegment mesh, MemorySegment clipper, MemorySegment clipperMatrix, MemorySegment topMesh, MemorySegment bottomMesh) {
        var mh$ = NewtonMeshClip$MH();
        try {
            mh$.invokeExact(mesh, clipper, clipperMatrix, topMesh, bottomMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshConvexMeshIntersection$MH() {
        return RuntimeHelper.requireNonNull(constants$117.NewtonMeshConvexMeshIntersection$MH,"NewtonMeshConvexMeshIntersection");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshConvexMeshIntersection(struct NewtonMesh* mesh, struct NewtonMesh* convexMesh);
     * }
     */
    public static MemorySegment NewtonMeshConvexMeshIntersection(MemorySegment mesh, MemorySegment convexMesh) {
        var mh$ = NewtonMeshConvexMeshIntersection$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, convexMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSimplify$MH() {
        return RuntimeHelper.requireNonNull(constants$117.NewtonMeshSimplify$MH,"NewtonMeshSimplify");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshSimplify(struct NewtonMesh* mesh, int maxVertexCount, int (*reportPrograssCallback)(float,void*), void* reportPrgressUserData);
     * }
     */
    public static MemorySegment NewtonMeshSimplify(MemorySegment mesh, int maxVertexCount, MemorySegment reportPrograssCallback, MemorySegment reportPrgressUserData) {
        var mh$ = NewtonMeshSimplify$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, maxVertexCount, reportPrograssCallback, reportPrgressUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApproximateConvexDecomposition$MH() {
        return RuntimeHelper.requireNonNull(constants$118.NewtonMeshApproximateConvexDecomposition$MH,"NewtonMeshApproximateConvexDecomposition");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshApproximateConvexDecomposition(struct NewtonMesh* mesh, float maxConcavity, float backFaceDistanceFactor, int maxCount, int maxVertexPerHull, int (*reportProgressCallback)(float,void*), void* reportProgressUserData);
     * }
     */
    public static MemorySegment NewtonMeshApproximateConvexDecomposition(MemorySegment mesh, float maxConcavity, float backFaceDistanceFactor, int maxCount, int maxVertexPerHull, MemorySegment reportProgressCallback, MemorySegment reportProgressUserData) {
        var mh$ = NewtonMeshApproximateConvexDecomposition$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, maxConcavity, backFaceDistanceFactor, maxCount, maxVertexPerHull, reportProgressCallback, reportProgressUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonRemoveUnusedVertices$MH() {
        return RuntimeHelper.requireNonNull(constants$118.NewtonRemoveUnusedVertices$MH,"NewtonRemoveUnusedVertices");
    }
    /**
     * {@snippet :
     * void NewtonRemoveUnusedVertices(struct NewtonMesh* mesh, int* vertexRemapTable);
     * }
     */
    public static void NewtonRemoveUnusedVertices(MemorySegment mesh, MemorySegment vertexRemapTable) {
        var mh$ = NewtonRemoveUnusedVertices$MH();
        try {
            mh$.invokeExact(mesh, vertexRemapTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshBeginBuild$MH() {
        return RuntimeHelper.requireNonNull(constants$118.NewtonMeshBeginBuild$MH,"NewtonMeshBeginBuild");
    }
    /**
     * {@snippet :
     * void NewtonMeshBeginBuild(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshBeginBuild(MemorySegment mesh) {
        var mh$ = NewtonMeshBeginBuild$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshBeginFace$MH() {
        return RuntimeHelper.requireNonNull(constants$118.NewtonMeshBeginFace$MH,"NewtonMeshBeginFace");
    }
    /**
     * {@snippet :
     * void NewtonMeshBeginFace(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshBeginFace(MemorySegment mesh) {
        var mh$ = NewtonMeshBeginFace$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$118.NewtonMeshAddPoint$MH,"NewtonMeshAddPoint");
    }
    /**
     * {@snippet :
     * void NewtonMeshAddPoint(struct NewtonMesh* mesh, double x, double y, double z);
     * }
     */
    public static void NewtonMeshAddPoint(MemorySegment mesh, double x, double y, double z) {
        var mh$ = NewtonMeshAddPoint$MH();
        try {
            mh$.invokeExact(mesh, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$119.NewtonMeshAddLayer$MH,"NewtonMeshAddLayer");
    }
    /**
     * {@snippet :
     * void NewtonMeshAddLayer(struct NewtonMesh* mesh, int layerIndex);
     * }
     */
    public static void NewtonMeshAddLayer(MemorySegment mesh, int layerIndex) {
        var mh$ = NewtonMeshAddLayer$MH();
        try {
            mh$.invokeExact(mesh, layerIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$119.NewtonMeshAddMaterial$MH,"NewtonMeshAddMaterial");
    }
    /**
     * {@snippet :
     * void NewtonMeshAddMaterial(struct NewtonMesh* mesh, int materialIndex);
     * }
     */
    public static void NewtonMeshAddMaterial(MemorySegment mesh, int materialIndex) {
        var mh$ = NewtonMeshAddMaterial$MH();
        try {
            mh$.invokeExact(mesh, materialIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$119.NewtonMeshAddNormal$MH,"NewtonMeshAddNormal");
    }
    /**
     * {@snippet :
     * void NewtonMeshAddNormal(struct NewtonMesh* mesh, float x, float y, float z);
     * }
     */
    public static void NewtonMeshAddNormal(MemorySegment mesh, float x, float y, float z) {
        var mh$ = NewtonMeshAddNormal$MH();
        try {
            mh$.invokeExact(mesh, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddBinormal$MH() {
        return RuntimeHelper.requireNonNull(constants$119.NewtonMeshAddBinormal$MH,"NewtonMeshAddBinormal");
    }
    /**
     * {@snippet :
     * void NewtonMeshAddBinormal(struct NewtonMesh* mesh, float x, float y, float z);
     * }
     */
    public static void NewtonMeshAddBinormal(MemorySegment mesh, float x, float y, float z) {
        var mh$ = NewtonMeshAddBinormal$MH();
        try {
            mh$.invokeExact(mesh, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddUV0$MH() {
        return RuntimeHelper.requireNonNull(constants$119.NewtonMeshAddUV0$MH,"NewtonMeshAddUV0");
    }
    /**
     * {@snippet :
     * void NewtonMeshAddUV0(struct NewtonMesh* mesh, float u, float v);
     * }
     */
    public static void NewtonMeshAddUV0(MemorySegment mesh, float u, float v) {
        var mh$ = NewtonMeshAddUV0$MH();
        try {
            mh$.invokeExact(mesh, u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddUV1$MH() {
        return RuntimeHelper.requireNonNull(constants$119.NewtonMeshAddUV1$MH,"NewtonMeshAddUV1");
    }
    /**
     * {@snippet :
     * void NewtonMeshAddUV1(struct NewtonMesh* mesh, float u, float v);
     * }
     */
    public static void NewtonMeshAddUV1(MemorySegment mesh, float u, float v) {
        var mh$ = NewtonMeshAddUV1$MH();
        try {
            mh$.invokeExact(mesh, u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddVertexColor$MH() {
        return RuntimeHelper.requireNonNull(constants$120.NewtonMeshAddVertexColor$MH,"NewtonMeshAddVertexColor");
    }
    /**
     * {@snippet :
     * void NewtonMeshAddVertexColor(struct NewtonMesh* mesh, float r, float g, float b, float a);
     * }
     */
    public static void NewtonMeshAddVertexColor(MemorySegment mesh, float r, float g, float b, float a) {
        var mh$ = NewtonMeshAddVertexColor$MH();
        try {
            mh$.invokeExact(mesh, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshEndFace$MH() {
        return RuntimeHelper.requireNonNull(constants$120.NewtonMeshEndFace$MH,"NewtonMeshEndFace");
    }
    /**
     * {@snippet :
     * void NewtonMeshEndFace(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshEndFace(MemorySegment mesh) {
        var mh$ = NewtonMeshEndFace$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshEndBuild$MH() {
        return RuntimeHelper.requireNonNull(constants$120.NewtonMeshEndBuild$MH,"NewtonMeshEndBuild");
    }
    /**
     * {@snippet :
     * void NewtonMeshEndBuild(struct NewtonMesh* mesh);
     * }
     */
    public static void NewtonMeshEndBuild(MemorySegment mesh) {
        var mh$ = NewtonMeshEndBuild$MH();
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshClearVertexFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$120.NewtonMeshClearVertexFormat$MH,"NewtonMeshClearVertexFormat");
    }
    /**
     * {@snippet :
     * void NewtonMeshClearVertexFormat(struct NewtonMeshVertexFormat* format);
     * }
     */
    public static void NewtonMeshClearVertexFormat(MemorySegment format) {
        var mh$ = NewtonMeshClearVertexFormat$MH();
        try {
            mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshBuildFromVertexListIndexList$MH() {
        return RuntimeHelper.requireNonNull(constants$120.NewtonMeshBuildFromVertexListIndexList$MH,"NewtonMeshBuildFromVertexListIndexList");
    }
    /**
     * {@snippet :
     * void NewtonMeshBuildFromVertexListIndexList(struct NewtonMesh* mesh, struct NewtonMeshVertexFormat* format);
     * }
     */
    public static void NewtonMeshBuildFromVertexListIndexList(MemorySegment mesh, MemorySegment format) {
        var mh$ = NewtonMeshBuildFromVertexListIndexList$MH();
        try {
            mh$.invokeExact(mesh, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetPointCount$MH() {
        return RuntimeHelper.requireNonNull(constants$120.NewtonMeshGetPointCount$MH,"NewtonMeshGetPointCount");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetPointCount(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshGetPointCount(MemorySegment mesh) {
        var mh$ = NewtonMeshGetPointCount$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetIndexToVertexMap$MH() {
        return RuntimeHelper.requireNonNull(constants$121.NewtonMeshGetIndexToVertexMap$MH,"NewtonMeshGetIndexToVertexMap");
    }
    /**
     * {@snippet :
     * int* NewtonMeshGetIndexToVertexMap(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshGetIndexToVertexMap(MemorySegment mesh) {
        var mh$ = NewtonMeshGetIndexToVertexMap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexDoubleChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$121.NewtonMeshGetVertexDoubleChannel$MH,"NewtonMeshGetVertexDoubleChannel");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetVertexDoubleChannel(struct NewtonMesh* mesh, int vertexStrideInByte, double* outBuffer);
     * }
     */
    public static void NewtonMeshGetVertexDoubleChannel(MemorySegment mesh, int vertexStrideInByte, MemorySegment outBuffer) {
        var mh$ = NewtonMeshGetVertexDoubleChannel$MH();
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$121.NewtonMeshGetVertexChannel$MH,"NewtonMeshGetVertexChannel");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetVertexChannel(struct NewtonMesh* mesh, int vertexStrideInByte, float* outBuffer);
     * }
     */
    public static void NewtonMeshGetVertexChannel(MemorySegment mesh, int vertexStrideInByte, MemorySegment outBuffer) {
        var mh$ = NewtonMeshGetVertexChannel$MH();
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNormalChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$121.NewtonMeshGetNormalChannel$MH,"NewtonMeshGetNormalChannel");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetNormalChannel(struct NewtonMesh* mesh, int vertexStrideInByte, float* outBuffer);
     * }
     */
    public static void NewtonMeshGetNormalChannel(MemorySegment mesh, int vertexStrideInByte, MemorySegment outBuffer) {
        var mh$ = NewtonMeshGetNormalChannel$MH();
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetBinormalChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$121.NewtonMeshGetBinormalChannel$MH,"NewtonMeshGetBinormalChannel");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetBinormalChannel(struct NewtonMesh* mesh, int vertexStrideInByte, float* outBuffer);
     * }
     */
    public static void NewtonMeshGetBinormalChannel(MemorySegment mesh, int vertexStrideInByte, MemorySegment outBuffer) {
        var mh$ = NewtonMeshGetBinormalChannel$MH();
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetUV0Channel$MH() {
        return RuntimeHelper.requireNonNull(constants$121.NewtonMeshGetUV0Channel$MH,"NewtonMeshGetUV0Channel");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetUV0Channel(struct NewtonMesh* mesh, int vertexStrideInByte, float* outBuffer);
     * }
     */
    public static void NewtonMeshGetUV0Channel(MemorySegment mesh, int vertexStrideInByte, MemorySegment outBuffer) {
        var mh$ = NewtonMeshGetUV0Channel$MH();
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetUV1Channel$MH() {
        return RuntimeHelper.requireNonNull(constants$122.NewtonMeshGetUV1Channel$MH,"NewtonMeshGetUV1Channel");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetUV1Channel(struct NewtonMesh* mesh, int vertexStrideInByte, float* outBuffer);
     * }
     */
    public static void NewtonMeshGetUV1Channel(MemorySegment mesh, int vertexStrideInByte, MemorySegment outBuffer) {
        var mh$ = NewtonMeshGetUV1Channel$MH();
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexColorChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$122.NewtonMeshGetVertexColorChannel$MH,"NewtonMeshGetVertexColorChannel");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetVertexColorChannel(struct NewtonMesh* mesh, int vertexStrideInByte, float* outBuffer);
     * }
     */
    public static void NewtonMeshGetVertexColorChannel(MemorySegment mesh, int vertexStrideInByte, MemorySegment outBuffer) {
        var mh$ = NewtonMeshGetVertexColorChannel$MH();
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasNormalChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$122.NewtonMeshHasNormalChannel$MH,"NewtonMeshHasNormalChannel");
    }
    /**
     * {@snippet :
     * int NewtonMeshHasNormalChannel(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshHasNormalChannel(MemorySegment mesh) {
        var mh$ = NewtonMeshHasNormalChannel$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasBinormalChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$122.NewtonMeshHasBinormalChannel$MH,"NewtonMeshHasBinormalChannel");
    }
    /**
     * {@snippet :
     * int NewtonMeshHasBinormalChannel(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshHasBinormalChannel(MemorySegment mesh) {
        var mh$ = NewtonMeshHasBinormalChannel$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasUV0Channel$MH() {
        return RuntimeHelper.requireNonNull(constants$122.NewtonMeshHasUV0Channel$MH,"NewtonMeshHasUV0Channel");
    }
    /**
     * {@snippet :
     * int NewtonMeshHasUV0Channel(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshHasUV0Channel(MemorySegment mesh) {
        var mh$ = NewtonMeshHasUV0Channel$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasUV1Channel$MH() {
        return RuntimeHelper.requireNonNull(constants$122.NewtonMeshHasUV1Channel$MH,"NewtonMeshHasUV1Channel");
    }
    /**
     * {@snippet :
     * int NewtonMeshHasUV1Channel(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshHasUV1Channel(MemorySegment mesh) {
        var mh$ = NewtonMeshHasUV1Channel$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasVertexColorChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$123.NewtonMeshHasVertexColorChannel$MH,"NewtonMeshHasVertexColorChannel");
    }
    /**
     * {@snippet :
     * int NewtonMeshHasVertexColorChannel(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshHasVertexColorChannel(MemorySegment mesh) {
        var mh$ = NewtonMeshHasVertexColorChannel$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshBeginHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$123.NewtonMeshBeginHandle$MH,"NewtonMeshBeginHandle");
    }
    /**
     * {@snippet :
     * void* NewtonMeshBeginHandle(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshBeginHandle(MemorySegment mesh) {
        var mh$ = NewtonMeshBeginHandle$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshEndHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$123.NewtonMeshEndHandle$MH,"NewtonMeshEndHandle");
    }
    /**
     * {@snippet :
     * void NewtonMeshEndHandle(struct NewtonMesh* mesh, void* handle);
     * }
     */
    public static void NewtonMeshEndHandle(MemorySegment mesh, MemorySegment handle) {
        var mh$ = NewtonMeshEndHandle$MH();
        try {
            mh$.invokeExact(mesh, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshFirstMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$123.NewtonMeshFirstMaterial$MH,"NewtonMeshFirstMaterial");
    }
    /**
     * {@snippet :
     * int NewtonMeshFirstMaterial(struct NewtonMesh* mesh, void* handle);
     * }
     */
    public static int NewtonMeshFirstMaterial(MemorySegment mesh, MemorySegment handle) {
        var mh$ = NewtonMeshFirstMaterial$MH();
        try {
            return (int)mh$.invokeExact(mesh, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshNextMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$123.NewtonMeshNextMaterial$MH,"NewtonMeshNextMaterial");
    }
    /**
     * {@snippet :
     * int NewtonMeshNextMaterial(struct NewtonMesh* mesh, void* handle, int materialId);
     * }
     */
    public static int NewtonMeshNextMaterial(MemorySegment mesh, MemorySegment handle, int materialId) {
        var mh$ = NewtonMeshNextMaterial$MH();
        try {
            return (int)mh$.invokeExact(mesh, handle, materialId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshMaterialGetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$123.NewtonMeshMaterialGetMaterial$MH,"NewtonMeshMaterialGetMaterial");
    }
    /**
     * {@snippet :
     * int NewtonMeshMaterialGetMaterial(struct NewtonMesh* mesh, void* handle, int materialId);
     * }
     */
    public static int NewtonMeshMaterialGetMaterial(MemorySegment mesh, MemorySegment handle, int materialId) {
        var mh$ = NewtonMeshMaterialGetMaterial$MH();
        try {
            return (int)mh$.invokeExact(mesh, handle, materialId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshMaterialGetIndexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$124.NewtonMeshMaterialGetIndexCount$MH,"NewtonMeshMaterialGetIndexCount");
    }
    /**
     * {@snippet :
     * int NewtonMeshMaterialGetIndexCount(struct NewtonMesh* mesh, void* handle, int materialId);
     * }
     */
    public static int NewtonMeshMaterialGetIndexCount(MemorySegment mesh, MemorySegment handle, int materialId) {
        var mh$ = NewtonMeshMaterialGetIndexCount$MH();
        try {
            return (int)mh$.invokeExact(mesh, handle, materialId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshMaterialGetIndexStream$MH() {
        return RuntimeHelper.requireNonNull(constants$124.NewtonMeshMaterialGetIndexStream$MH,"NewtonMeshMaterialGetIndexStream");
    }
    /**
     * {@snippet :
     * void NewtonMeshMaterialGetIndexStream(struct NewtonMesh* mesh, void* handle, int materialId, int* index);
     * }
     */
    public static void NewtonMeshMaterialGetIndexStream(MemorySegment mesh, MemorySegment handle, int materialId, MemorySegment index) {
        var mh$ = NewtonMeshMaterialGetIndexStream$MH();
        try {
            mh$.invokeExact(mesh, handle, materialId, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshMaterialGetIndexStreamShort$MH() {
        return RuntimeHelper.requireNonNull(constants$124.NewtonMeshMaterialGetIndexStreamShort$MH,"NewtonMeshMaterialGetIndexStreamShort");
    }
    /**
     * {@snippet :
     * void NewtonMeshMaterialGetIndexStreamShort(struct NewtonMesh* mesh, void* handle, int materialId, short* index);
     * }
     */
    public static void NewtonMeshMaterialGetIndexStreamShort(MemorySegment mesh, MemorySegment handle, int materialId, MemorySegment index) {
        var mh$ = NewtonMeshMaterialGetIndexStreamShort$MH();
        try {
            mh$.invokeExact(mesh, handle, materialId, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFirstSingleSegment$MH() {
        return RuntimeHelper.requireNonNull(constants$124.NewtonMeshCreateFirstSingleSegment$MH,"NewtonMeshCreateFirstSingleSegment");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateFirstSingleSegment(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshCreateFirstSingleSegment(MemorySegment mesh) {
        var mh$ = NewtonMeshCreateFirstSingleSegment$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateNextSingleSegment$MH() {
        return RuntimeHelper.requireNonNull(constants$124.NewtonMeshCreateNextSingleSegment$MH,"NewtonMeshCreateNextSingleSegment");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateNextSingleSegment(struct NewtonMesh* mesh, struct NewtonMesh* segment);
     * }
     */
    public static MemorySegment NewtonMeshCreateNextSingleSegment(MemorySegment mesh, MemorySegment segment) {
        var mh$ = NewtonMeshCreateNextSingleSegment$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFirstLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$124.NewtonMeshCreateFirstLayer$MH,"NewtonMeshCreateFirstLayer");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateFirstLayer(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshCreateFirstLayer(MemorySegment mesh) {
        var mh$ = NewtonMeshCreateFirstLayer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateNextLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$125.NewtonMeshCreateNextLayer$MH,"NewtonMeshCreateNextLayer");
    }
    /**
     * {@snippet :
     * struct NewtonMesh* NewtonMeshCreateNextLayer(struct NewtonMesh* mesh, struct NewtonMesh* segment);
     * }
     */
    public static MemorySegment NewtonMeshCreateNextLayer(MemorySegment mesh, MemorySegment segment) {
        var mh$ = NewtonMeshCreateNextLayer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetTotalFaceCount$MH() {
        return RuntimeHelper.requireNonNull(constants$125.NewtonMeshGetTotalFaceCount$MH,"NewtonMeshGetTotalFaceCount");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetTotalFaceCount(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshGetTotalFaceCount(MemorySegment mesh) {
        var mh$ = NewtonMeshGetTotalFaceCount$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetTotalIndexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$125.NewtonMeshGetTotalIndexCount$MH,"NewtonMeshGetTotalIndexCount");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetTotalIndexCount(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshGetTotalIndexCount(MemorySegment mesh) {
        var mh$ = NewtonMeshGetTotalIndexCount$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFaces$MH() {
        return RuntimeHelper.requireNonNull(constants$125.NewtonMeshGetFaces$MH,"NewtonMeshGetFaces");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetFaces(struct NewtonMesh* mesh, int* faceIndexCount, int* faceMaterial, void** faceIndices);
     * }
     */
    public static void NewtonMeshGetFaces(MemorySegment mesh, MemorySegment faceIndexCount, MemorySegment faceMaterial, MemorySegment faceIndices) {
        var mh$ = NewtonMeshGetFaces$MH();
        try {
            mh$.invokeExact(mesh, faceIndexCount, faceMaterial, faceIndices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$125.NewtonMeshGetVertexCount$MH,"NewtonMeshGetVertexCount");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetVertexCount(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshGetVertexCount(MemorySegment mesh) {
        var mh$ = NewtonMeshGetVertexCount$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexStrideInByte$MH() {
        return RuntimeHelper.requireNonNull(constants$125.NewtonMeshGetVertexStrideInByte$MH,"NewtonMeshGetVertexStrideInByte");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetVertexStrideInByte(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshGetVertexStrideInByte(MemorySegment mesh) {
        var mh$ = NewtonMeshGetVertexStrideInByte$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexArray$MH() {
        return RuntimeHelper.requireNonNull(constants$126.NewtonMeshGetVertexArray$MH,"NewtonMeshGetVertexArray");
    }
    /**
     * {@snippet :
     * double* NewtonMeshGetVertexArray(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshGetVertexArray(MemorySegment mesh) {
        var mh$ = NewtonMeshGetVertexArray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexBaseCount$MH() {
        return RuntimeHelper.requireNonNull(constants$126.NewtonMeshGetVertexBaseCount$MH,"NewtonMeshGetVertexBaseCount");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetVertexBaseCount(struct NewtonMesh* mesh);
     * }
     */
    public static int NewtonMeshGetVertexBaseCount(MemorySegment mesh) {
        var mh$ = NewtonMeshGetVertexBaseCount$MH();
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSetVertexBaseCount$MH() {
        return RuntimeHelper.requireNonNull(constants$126.NewtonMeshSetVertexBaseCount$MH,"NewtonMeshSetVertexBaseCount");
    }
    /**
     * {@snippet :
     * void NewtonMeshSetVertexBaseCount(struct NewtonMesh* mesh, int baseCount);
     * }
     */
    public static void NewtonMeshSetVertexBaseCount(MemorySegment mesh, int baseCount) {
        var mh$ = NewtonMeshSetVertexBaseCount$MH();
        try {
            mh$.invokeExact(mesh, baseCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFirstVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$126.NewtonMeshGetFirstVertex$MH,"NewtonMeshGetFirstVertex");
    }
    /**
     * {@snippet :
     * void* NewtonMeshGetFirstVertex(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshGetFirstVertex(MemorySegment mesh) {
        var mh$ = NewtonMeshGetFirstVertex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNextVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$126.NewtonMeshGetNextVertex$MH,"NewtonMeshGetNextVertex");
    }
    /**
     * {@snippet :
     * void* NewtonMeshGetNextVertex(struct NewtonMesh* mesh, void* vertex);
     * }
     */
    public static MemorySegment NewtonMeshGetNextVertex(MemorySegment mesh, MemorySegment vertex) {
        var mh$ = NewtonMeshGetNextVertex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$126.NewtonMeshGetVertexIndex$MH,"NewtonMeshGetVertexIndex");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetVertexIndex(struct NewtonMesh* mesh, void* vertex);
     * }
     */
    public static int NewtonMeshGetVertexIndex(MemorySegment mesh, MemorySegment vertex) {
        var mh$ = NewtonMeshGetVertexIndex$MH();
        try {
            return (int)mh$.invokeExact(mesh, vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFirstPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$127.NewtonMeshGetFirstPoint$MH,"NewtonMeshGetFirstPoint");
    }
    /**
     * {@snippet :
     * void* NewtonMeshGetFirstPoint(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshGetFirstPoint(MemorySegment mesh) {
        var mh$ = NewtonMeshGetFirstPoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNextPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$127.NewtonMeshGetNextPoint$MH,"NewtonMeshGetNextPoint");
    }
    /**
     * {@snippet :
     * void* NewtonMeshGetNextPoint(struct NewtonMesh* mesh, void* point);
     * }
     */
    public static MemorySegment NewtonMeshGetNextPoint(MemorySegment mesh, MemorySegment point) {
        var mh$ = NewtonMeshGetNextPoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetPointIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$127.NewtonMeshGetPointIndex$MH,"NewtonMeshGetPointIndex");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetPointIndex(struct NewtonMesh* mesh, void* point);
     * }
     */
    public static int NewtonMeshGetPointIndex(MemorySegment mesh, MemorySegment point) {
        var mh$ = NewtonMeshGetPointIndex$MH();
        try {
            return (int)mh$.invokeExact(mesh, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexIndexFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$127.NewtonMeshGetVertexIndexFromPoint$MH,"NewtonMeshGetVertexIndexFromPoint");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetVertexIndexFromPoint(struct NewtonMesh* mesh, void* point);
     * }
     */
    public static int NewtonMeshGetVertexIndexFromPoint(MemorySegment mesh, MemorySegment point) {
        var mh$ = NewtonMeshGetVertexIndexFromPoint$MH();
        try {
            return (int)mh$.invokeExact(mesh, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFirstEdge$MH() {
        return RuntimeHelper.requireNonNull(constants$127.NewtonMeshGetFirstEdge$MH,"NewtonMeshGetFirstEdge");
    }
    /**
     * {@snippet :
     * void* NewtonMeshGetFirstEdge(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshGetFirstEdge(MemorySegment mesh) {
        var mh$ = NewtonMeshGetFirstEdge$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNextEdge$MH() {
        return RuntimeHelper.requireNonNull(constants$127.NewtonMeshGetNextEdge$MH,"NewtonMeshGetNextEdge");
    }
    /**
     * {@snippet :
     * void* NewtonMeshGetNextEdge(struct NewtonMesh* mesh, void* edge);
     * }
     */
    public static MemorySegment NewtonMeshGetNextEdge(MemorySegment mesh, MemorySegment edge) {
        var mh$ = NewtonMeshGetNextEdge$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, edge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetEdgeIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$128.NewtonMeshGetEdgeIndices$MH,"NewtonMeshGetEdgeIndices");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetEdgeIndices(struct NewtonMesh* mesh, void* edge, int* v0, int* v1);
     * }
     */
    public static void NewtonMeshGetEdgeIndices(MemorySegment mesh, MemorySegment edge, MemorySegment v0, MemorySegment v1) {
        var mh$ = NewtonMeshGetEdgeIndices$MH();
        try {
            mh$.invokeExact(mesh, edge, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFirstFace$MH() {
        return RuntimeHelper.requireNonNull(constants$128.NewtonMeshGetFirstFace$MH,"NewtonMeshGetFirstFace");
    }
    /**
     * {@snippet :
     * void* NewtonMeshGetFirstFace(struct NewtonMesh* mesh);
     * }
     */
    public static MemorySegment NewtonMeshGetFirstFace(MemorySegment mesh) {
        var mh$ = NewtonMeshGetFirstFace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNextFace$MH() {
        return RuntimeHelper.requireNonNull(constants$128.NewtonMeshGetNextFace$MH,"NewtonMeshGetNextFace");
    }
    /**
     * {@snippet :
     * void* NewtonMeshGetNextFace(struct NewtonMesh* mesh, void* face);
     * }
     */
    public static MemorySegment NewtonMeshGetNextFace(MemorySegment mesh, MemorySegment face) {
        var mh$ = NewtonMeshGetNextFace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mesh, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshIsFaceOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$128.NewtonMeshIsFaceOpen$MH,"NewtonMeshIsFaceOpen");
    }
    /**
     * {@snippet :
     * int NewtonMeshIsFaceOpen(struct NewtonMesh* mesh, void* face);
     * }
     */
    public static int NewtonMeshIsFaceOpen(MemorySegment mesh, MemorySegment face) {
        var mh$ = NewtonMeshIsFaceOpen$MH();
        try {
            return (int)mh$.invokeExact(mesh, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFaceMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$128.NewtonMeshGetFaceMaterial$MH,"NewtonMeshGetFaceMaterial");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetFaceMaterial(struct NewtonMesh* mesh, void* face);
     * }
     */
    public static int NewtonMeshGetFaceMaterial(MemorySegment mesh, MemorySegment face) {
        var mh$ = NewtonMeshGetFaceMaterial$MH();
        try {
            return (int)mh$.invokeExact(mesh, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFaceIndexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$128.NewtonMeshGetFaceIndexCount$MH,"NewtonMeshGetFaceIndexCount");
    }
    /**
     * {@snippet :
     * int NewtonMeshGetFaceIndexCount(struct NewtonMesh* mesh, void* face);
     * }
     */
    public static int NewtonMeshGetFaceIndexCount(MemorySegment mesh, MemorySegment face) {
        var mh$ = NewtonMeshGetFaceIndexCount$MH();
        try {
            return (int)mh$.invokeExact(mesh, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFaceIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$129.NewtonMeshGetFaceIndices$MH,"NewtonMeshGetFaceIndices");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetFaceIndices(struct NewtonMesh* mesh, void* face, int* indices);
     * }
     */
    public static void NewtonMeshGetFaceIndices(MemorySegment mesh, MemorySegment face, MemorySegment indices) {
        var mh$ = NewtonMeshGetFaceIndices$MH();
        try {
            mh$.invokeExact(mesh, face, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFacePointIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$129.NewtonMeshGetFacePointIndices$MH,"NewtonMeshGetFacePointIndices");
    }
    /**
     * {@snippet :
     * void NewtonMeshGetFacePointIndices(struct NewtonMesh* mesh, void* face, int* indices);
     * }
     */
    public static void NewtonMeshGetFacePointIndices(MemorySegment mesh, MemorySegment face, MemorySegment indices) {
        var mh$ = NewtonMeshGetFacePointIndices$MH();
        try {
            mh$.invokeExact(mesh, face, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCalculateFaceNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$129.NewtonMeshCalculateFaceNormal$MH,"NewtonMeshCalculateFaceNormal");
    }
    /**
     * {@snippet :
     * void NewtonMeshCalculateFaceNormal(struct NewtonMesh* mesh, void* face, double* normal);
     * }
     */
    public static void NewtonMeshCalculateFaceNormal(MemorySegment mesh, MemorySegment face, MemorySegment normal) {
        var mh$ = NewtonMeshCalculateFaceNormal$MH();
        try {
            mh$.invokeExact(mesh, face, normal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSetFaceMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$129.NewtonMeshSetFaceMaterial$MH,"NewtonMeshSetFaceMaterial");
    }
    /**
     * {@snippet :
     * void NewtonMeshSetFaceMaterial(struct NewtonMesh* mesh, void* face, int matId);
     * }
     */
    public static void NewtonMeshSetFaceMaterial(MemorySegment mesh, MemorySegment face, int matId) {
        var mh$ = NewtonMeshSetFaceMaterial$MH();
        try {
            mh$.invokeExact(mesh, face, matId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


