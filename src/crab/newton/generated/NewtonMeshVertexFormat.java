// Generated by jextract

package crab.newton.generated;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class NewtonMeshVertexFormat {
	
    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("m_faceCount"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("m_faceIndexCount"),
        Constants$root.C_POINTER$LAYOUT.withName("m_faceMaterial"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_vertex"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_normal"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_binormal"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_uv0"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_uv1"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_vertexColor")
    ).withName("NewtonMeshVertexFormat");
    public static MemoryLayout $LAYOUT() {
        return NewtonMeshVertexFormat.$struct$LAYOUT;
    }
    static final VarHandle m_faceCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceCount"));
    public static VarHandle m_faceCount$VH() {
        return NewtonMeshVertexFormat.m_faceCount$VH;
    }
    public static int m_faceCount$get(MemorySegment seg) {
        return (int)NewtonMeshVertexFormat.m_faceCount$VH.get(seg);
    }
    public static void m_faceCount$set( MemorySegment seg, int x) {
        NewtonMeshVertexFormat.m_faceCount$VH.set(seg, x);
    }
    public static int m_faceCount$get(MemorySegment seg, long index) {
        return (int)NewtonMeshVertexFormat.m_faceCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceCount$set(MemorySegment seg, long index, int x) {
        NewtonMeshVertexFormat.m_faceCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_faceIndexCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceIndexCount"));
    public static VarHandle m_faceIndexCount$VH() {
        return NewtonMeshVertexFormat.m_faceIndexCount$VH;
    }
    public static MemoryAddress m_faceIndexCount$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)NewtonMeshVertexFormat.m_faceIndexCount$VH.get(seg);
    }
    public static void m_faceIndexCount$set( MemorySegment seg, MemoryAddress x) {
        NewtonMeshVertexFormat.m_faceIndexCount$VH.set(seg, x);
    }
    public static MemoryAddress m_faceIndexCount$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)NewtonMeshVertexFormat.m_faceIndexCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceIndexCount$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonMeshVertexFormat.m_faceIndexCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_faceMaterial$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceMaterial"));
    public static VarHandle m_faceMaterial$VH() {
        return NewtonMeshVertexFormat.m_faceMaterial$VH;
    }
    public static MemoryAddress m_faceMaterial$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)NewtonMeshVertexFormat.m_faceMaterial$VH.get(seg);
    }
    public static void m_faceMaterial$set( MemorySegment seg, MemoryAddress x) {
        NewtonMeshVertexFormat.m_faceMaterial$VH.set(seg, x);
    }
    public static MemoryAddress m_faceMaterial$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)NewtonMeshVertexFormat.m_faceMaterial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceMaterial$set(MemorySegment seg, long index, MemoryAddress x) {
        NewtonMeshVertexFormat.m_faceMaterial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment m_vertex$slice(MemorySegment seg) {
        return seg.asSlice(24, 24);
    }
    public static MemorySegment m_normal$slice(MemorySegment seg) {
        return seg.asSlice(48, 24);
    }
    public static MemorySegment m_binormal$slice(MemorySegment seg) {
        return seg.asSlice(72, 24);
    }
    public static MemorySegment m_uv0$slice(MemorySegment seg) {
        return seg.asSlice(96, 24);
    }
    public static MemorySegment m_uv1$slice(MemorySegment seg) {
        return seg.asSlice(120, 24);
    }
    public static MemorySegment m_vertexColor$slice(MemorySegment seg) {
        return seg.asSlice(144, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


