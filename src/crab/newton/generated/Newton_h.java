// Generated by jextract

package crab.newton.generated;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class Newton_h  {
	/* package-private */ Newton_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_LONG$LAYOUT;
    public static OfInt C_LONG = Constants$root.C_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int NEWTON_MAJOR_VERSION() {
        return (int)3L;
    }
    public static int NEWTON_MINOR_VERSION() {
        return (int)14L;
    }
    public static int NEWTON_BROADPHASE_DEFAULT() {
        return (int)0L;
    }
    public static int NEWTON_BROADPHASE_PERSINTENT() {
        return (int)1L;
    }
    public static int NEWTON_DYNAMIC_BODY() {
        return (int)0L;
    }
    public static int NEWTON_KINEMATIC_BODY() {
        return (int)1L;
    }
    public static int NEWTON_DYNAMIC_ASYMETRIC_BODY() {
        return (int)2L;
    }
    public static int SERIALIZE_ID_SPHERE() {
        return (int)0L;
    }
    public static int SERIALIZE_ID_CAPSULE() {
        return (int)1L;
    }
    public static int SERIALIZE_ID_CYLINDER() {
        return (int)2L;
    }
    public static int SERIALIZE_ID_CHAMFERCYLINDER() {
        return (int)3L;
    }
    public static int SERIALIZE_ID_BOX() {
        return (int)4L;
    }
    public static int SERIALIZE_ID_CONE() {
        return (int)5L;
    }
    public static int SERIALIZE_ID_CONVEXHULL() {
        return (int)6L;
    }
    public static int SERIALIZE_ID_NULL() {
        return (int)7L;
    }
    public static int SERIALIZE_ID_COMPOUND() {
        return (int)8L;
    }
    public static int SERIALIZE_ID_TREE() {
        return (int)9L;
    }
    public static int SERIALIZE_ID_HEIGHTFIELD() {
        return (int)10L;
    }
    public static int SERIALIZE_ID_CLOTH_PATCH() {
        return (int)11L;
    }
    public static int SERIALIZE_ID_DEFORMABLE_SOLID() {
        return (int)12L;
    }
    public static int SERIALIZE_ID_USERMESH() {
        return (int)13L;
    }
    public static int SERIALIZE_ID_SCENE() {
        return (int)14L;
    }
    public static int SERIALIZE_ID_FRACTURED_COMPOUND() {
        return (int)15L;
    }
    public static MethodHandle NewtonWorldGetVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$18.NewtonWorldGetVersion$MH,"NewtonWorldGetVersion");
    }
    public static int NewtonWorldGetVersion (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.NewtonWorldGetVersion$MH, "NewtonWorldGetVersion");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldFloatSize$MH() {
        return RuntimeHelper.requireNonNull(constants$18.NewtonWorldFloatSize$MH,"NewtonWorldFloatSize");
    }
    public static int NewtonWorldFloatSize (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.NewtonWorldFloatSize$MH, "NewtonWorldFloatSize");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetMemoryUsed$MH() {
        return RuntimeHelper.requireNonNull(constants$19.NewtonGetMemoryUsed$MH,"NewtonGetMemoryUsed");
    }
    public static int NewtonGetMemoryUsed (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.NewtonGetMemoryUsed$MH, "NewtonGetMemoryUsed");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetMemorySystem$MH() {
        return RuntimeHelper.requireNonNull(constants$19.NewtonSetMemorySystem$MH,"NewtonSetMemorySystem");
    }
    public static void NewtonSetMemorySystem ( Addressable malloc,  Addressable free) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.NewtonSetMemorySystem$MH, "NewtonSetMemorySystem");
        try {
            mh$.invokeExact(malloc, free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$19.NewtonCreate$MH,"NewtonCreate");
    }
    public static MemoryAddress NewtonCreate (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.NewtonCreate$MH, "NewtonCreate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$19.NewtonDestroy$MH,"NewtonDestroy");
    }
    public static void NewtonDestroy ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.NewtonDestroy$MH, "NewtonDestroy");
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroyAllBodies$MH() {
        return RuntimeHelper.requireNonNull(constants$19.NewtonDestroyAllBodies$MH,"NewtonDestroyAllBodies");
    }
    public static void NewtonDestroyAllBodies ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.NewtonDestroyAllBodies$MH, "NewtonDestroyAllBodies");
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetPostUpdateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$19.NewtonGetPostUpdateCallback$MH,"NewtonGetPostUpdateCallback");
    }
    public static MemoryAddress NewtonGetPostUpdateCallback ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.NewtonGetPostUpdateCallback$MH, "NewtonGetPostUpdateCallback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetPostUpdateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonSetPostUpdateCallback$MH,"NewtonSetPostUpdateCallback");
    }
    public static void NewtonSetPostUpdateCallback ( Addressable newtonWorld,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.NewtonSetPostUpdateCallback$MH, "NewtonSetPostUpdateCallback");
        try {
            mh$.invokeExact(newtonWorld, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonAlloc$MH,"NewtonAlloc");
    }
    public static MemoryAddress NewtonAlloc ( int sizeInBytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.NewtonAlloc$MH, "NewtonAlloc");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sizeInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFree$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonFree$MH,"NewtonFree");
    }
    public static void NewtonFree ( Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.NewtonFree$MH, "NewtonFree");
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonLoadPlugins$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonLoadPlugins$MH,"NewtonLoadPlugins");
    }
    public static void NewtonLoadPlugins ( Addressable newtonWorld,  Addressable plugInPath) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.NewtonLoadPlugins$MH, "NewtonLoadPlugins");
        try {
            mh$.invokeExact(newtonWorld, plugInPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUnloadPlugins$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonUnloadPlugins$MH,"NewtonUnloadPlugins");
    }
    public static void NewtonUnloadPlugins ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.NewtonUnloadPlugins$MH, "NewtonUnloadPlugins");
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCurrentPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$20.NewtonCurrentPlugin$MH,"NewtonCurrentPlugin");
    }
    public static MemoryAddress NewtonCurrentPlugin ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20.NewtonCurrentPlugin$MH, "NewtonCurrentPlugin");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetFirstPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonGetFirstPlugin$MH,"NewtonGetFirstPlugin");
    }
    public static MemoryAddress NewtonGetFirstPlugin ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.NewtonGetFirstPlugin$MH, "NewtonGetFirstPlugin");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetPreferedPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonGetPreferedPlugin$MH,"NewtonGetPreferedPlugin");
    }
    public static MemoryAddress NewtonGetPreferedPlugin ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.NewtonGetPreferedPlugin$MH, "NewtonGetPreferedPlugin");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetNextPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonGetNextPlugin$MH,"NewtonGetNextPlugin");
    }
    public static MemoryAddress NewtonGetNextPlugin ( Addressable newtonWorld,  Addressable plugin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.NewtonGetNextPlugin$MH, "NewtonGetNextPlugin");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetPluginString$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonGetPluginString$MH,"NewtonGetPluginString");
    }
    public static MemoryAddress NewtonGetPluginString ( Addressable newtonWorld,  Addressable plugin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.NewtonGetPluginString$MH, "NewtonGetPluginString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSelectPlugin$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonSelectPlugin$MH,"NewtonSelectPlugin");
    }
    public static void NewtonSelectPlugin ( Addressable newtonWorld,  Addressable plugin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.NewtonSelectPlugin$MH, "NewtonSelectPlugin");
        try {
            mh$.invokeExact(newtonWorld, plugin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetContactMergeTolerance$MH() {
        return RuntimeHelper.requireNonNull(constants$21.NewtonGetContactMergeTolerance$MH,"NewtonGetContactMergeTolerance");
    }
    public static float NewtonGetContactMergeTolerance ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.NewtonGetContactMergeTolerance$MH, "NewtonGetContactMergeTolerance");
        try {
            return (float)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetContactMergeTolerance$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonSetContactMergeTolerance$MH,"NewtonSetContactMergeTolerance");
    }
    public static void NewtonSetContactMergeTolerance ( Addressable newtonWorld,  float tolerance) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.NewtonSetContactMergeTolerance$MH, "NewtonSetContactMergeTolerance");
        try {
            mh$.invokeExact(newtonWorld, tolerance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonInvalidateCache$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonInvalidateCache$MH,"NewtonInvalidateCache");
    }
    public static void NewtonInvalidateCache ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.NewtonInvalidateCache$MH, "NewtonInvalidateCache");
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetSolverIterations$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonSetSolverIterations$MH,"NewtonSetSolverIterations");
    }
    public static void NewtonSetSolverIterations ( Addressable newtonWorld,  int model) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.NewtonSetSolverIterations$MH, "NewtonSetSolverIterations");
        try {
            mh$.invokeExact(newtonWorld, model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetSolverIterations$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonGetSolverIterations$MH,"NewtonGetSolverIterations");
    }
    public static int NewtonGetSolverIterations ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.NewtonGetSolverIterations$MH, "NewtonGetSolverIterations");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetParallelSolverOnLargeIsland$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonSetParallelSolverOnLargeIsland$MH,"NewtonSetParallelSolverOnLargeIsland");
    }
    public static void NewtonSetParallelSolverOnLargeIsland ( Addressable newtonWorld,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.NewtonSetParallelSolverOnLargeIsland$MH, "NewtonSetParallelSolverOnLargeIsland");
        try {
            mh$.invokeExact(newtonWorld, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetParallelSolverOnLargeIsland$MH() {
        return RuntimeHelper.requireNonNull(constants$22.NewtonGetParallelSolverOnLargeIsland$MH,"NewtonGetParallelSolverOnLargeIsland");
    }
    public static int NewtonGetParallelSolverOnLargeIsland ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.NewtonGetParallelSolverOnLargeIsland$MH, "NewtonGetParallelSolverOnLargeIsland");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetBroadphaseAlgorithm$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonGetBroadphaseAlgorithm$MH,"NewtonGetBroadphaseAlgorithm");
    }
    public static int NewtonGetBroadphaseAlgorithm ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.NewtonGetBroadphaseAlgorithm$MH, "NewtonGetBroadphaseAlgorithm");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSelectBroadphaseAlgorithm$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonSelectBroadphaseAlgorithm$MH,"NewtonSelectBroadphaseAlgorithm");
    }
    public static void NewtonSelectBroadphaseAlgorithm ( Addressable newtonWorld,  int algorithmType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.NewtonSelectBroadphaseAlgorithm$MH, "NewtonSelectBroadphaseAlgorithm");
        try {
            mh$.invokeExact(newtonWorld, algorithmType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonResetBroadphase$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonResetBroadphase$MH,"NewtonResetBroadphase");
    }
    public static void NewtonResetBroadphase ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.NewtonResetBroadphase$MH, "NewtonResetBroadphase");
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonUpdate$MH,"NewtonUpdate");
    }
    public static void NewtonUpdate ( Addressable newtonWorld,  float timestep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.NewtonUpdate$MH, "NewtonUpdate");
        try {
            mh$.invokeExact(newtonWorld, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUpdateAsync$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonUpdateAsync$MH,"NewtonUpdateAsync");
    }
    public static void NewtonUpdateAsync ( Addressable newtonWorld,  float timestep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.NewtonUpdateAsync$MH, "NewtonUpdateAsync");
        try {
            mh$.invokeExact(newtonWorld, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWaitForUpdateToFinish$MH() {
        return RuntimeHelper.requireNonNull(constants$23.NewtonWaitForUpdateToFinish$MH,"NewtonWaitForUpdateToFinish");
    }
    public static void NewtonWaitForUpdateToFinish ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.NewtonWaitForUpdateToFinish$MH, "NewtonWaitForUpdateToFinish");
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetNumberOfSubsteps$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonGetNumberOfSubsteps$MH,"NewtonGetNumberOfSubsteps");
    }
    public static int NewtonGetNumberOfSubsteps ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.NewtonGetNumberOfSubsteps$MH, "NewtonGetNumberOfSubsteps");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetNumberOfSubsteps$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonSetNumberOfSubsteps$MH,"NewtonSetNumberOfSubsteps");
    }
    public static void NewtonSetNumberOfSubsteps ( Addressable newtonWorld,  int subSteps) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.NewtonSetNumberOfSubsteps$MH, "NewtonSetNumberOfSubsteps");
        try {
            mh$.invokeExact(newtonWorld, subSteps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetLastUpdateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonGetLastUpdateTime$MH,"NewtonGetLastUpdateTime");
    }
    public static float NewtonGetLastUpdateTime ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.NewtonGetLastUpdateTime$MH, "NewtonGetLastUpdateTime");
        try {
            return (float)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSerializeToFile$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonSerializeToFile$MH,"NewtonSerializeToFile");
    }
    public static void NewtonSerializeToFile ( Addressable newtonWorld,  Addressable filename,  Addressable bodyCallback,  Addressable bodyUserData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.NewtonSerializeToFile$MH, "NewtonSerializeToFile");
        try {
            mh$.invokeExact(newtonWorld, filename, bodyCallback, bodyUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeserializeFromFile$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonDeserializeFromFile$MH,"NewtonDeserializeFromFile");
    }
    public static void NewtonDeserializeFromFile ( Addressable newtonWorld,  Addressable filename,  Addressable bodyCallback,  Addressable bodyUserData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.NewtonDeserializeFromFile$MH, "NewtonDeserializeFromFile");
        try {
            mh$.invokeExact(newtonWorld, filename, bodyCallback, bodyUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSerializeScene$MH() {
        return RuntimeHelper.requireNonNull(constants$24.NewtonSerializeScene$MH,"NewtonSerializeScene");
    }
    public static void NewtonSerializeScene ( Addressable newtonWorld,  Addressable bodyCallback,  Addressable bodyUserData,  Addressable serializeCallback,  Addressable serializeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.NewtonSerializeScene$MH, "NewtonSerializeScene");
        try {
            mh$.invokeExact(newtonWorld, bodyCallback, bodyUserData, serializeCallback, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeserializeScene$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonDeserializeScene$MH,"NewtonDeserializeScene");
    }
    public static void NewtonDeserializeScene ( Addressable newtonWorld,  Addressable bodyCallback,  Addressable bodyUserData,  Addressable serializeCallback,  Addressable serializeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.NewtonDeserializeScene$MH, "NewtonDeserializeScene");
        try {
            mh$.invokeExact(newtonWorld, bodyCallback, bodyUserData, serializeCallback, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFindSerializedBody$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonFindSerializedBody$MH,"NewtonFindSerializedBody");
    }
    public static MemoryAddress NewtonFindSerializedBody ( Addressable newtonWorld,  int bodySerializedID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.NewtonFindSerializedBody$MH, "NewtonFindSerializedBody");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, bodySerializedID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetJointSerializationCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonSetJointSerializationCallbacks$MH,"NewtonSetJointSerializationCallbacks");
    }
    public static void NewtonSetJointSerializationCallbacks ( Addressable newtonWorld,  Addressable serializeJoint,  Addressable deserializeJoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.NewtonSetJointSerializationCallbacks$MH, "NewtonSetJointSerializationCallbacks");
        try {
            mh$.invokeExact(newtonWorld, serializeJoint, deserializeJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetJointSerializationCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonGetJointSerializationCallbacks$MH,"NewtonGetJointSerializationCallbacks");
    }
    public static void NewtonGetJointSerializationCallbacks ( Addressable newtonWorld,  Addressable serializeJoint,  Addressable deserializeJoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.NewtonGetJointSerializationCallbacks$MH, "NewtonGetJointSerializationCallbacks");
        try {
            mh$.invokeExact(newtonWorld, serializeJoint, deserializeJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldCriticalSectionLock$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonWorldCriticalSectionLock$MH,"NewtonWorldCriticalSectionLock");
    }
    public static void NewtonWorldCriticalSectionLock ( Addressable newtonWorld,  int threadIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.NewtonWorldCriticalSectionLock$MH, "NewtonWorldCriticalSectionLock");
        try {
            mh$.invokeExact(newtonWorld, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldCriticalSectionUnlock$MH() {
        return RuntimeHelper.requireNonNull(constants$25.NewtonWorldCriticalSectionUnlock$MH,"NewtonWorldCriticalSectionUnlock");
    }
    public static void NewtonWorldCriticalSectionUnlock ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.NewtonWorldCriticalSectionUnlock$MH, "NewtonWorldCriticalSectionUnlock");
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetThreadsCount$MH() {
        return RuntimeHelper.requireNonNull(constants$26.NewtonSetThreadsCount$MH,"NewtonSetThreadsCount");
    }
    public static void NewtonSetThreadsCount ( Addressable newtonWorld,  int threads) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.NewtonSetThreadsCount$MH, "NewtonSetThreadsCount");
        try {
            mh$.invokeExact(newtonWorld, threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetThreadsCount$MH() {
        return RuntimeHelper.requireNonNull(constants$26.NewtonGetThreadsCount$MH,"NewtonGetThreadsCount");
    }
    public static int NewtonGetThreadsCount ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.NewtonGetThreadsCount$MH, "NewtonGetThreadsCount");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetMaxThreadsCount$MH() {
        return RuntimeHelper.requireNonNull(constants$26.NewtonGetMaxThreadsCount$MH,"NewtonGetMaxThreadsCount");
    }
    public static int NewtonGetMaxThreadsCount ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.NewtonGetMaxThreadsCount$MH, "NewtonGetMaxThreadsCount");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDispachThreadJob$MH() {
        return RuntimeHelper.requireNonNull(constants$26.NewtonDispachThreadJob$MH,"NewtonDispachThreadJob");
    }
    public static void NewtonDispachThreadJob ( Addressable newtonWorld,  Addressable task,  Addressable usedData,  Addressable functionName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.NewtonDispachThreadJob$MH, "NewtonDispachThreadJob");
        try {
            mh$.invokeExact(newtonWorld, task, usedData, functionName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSyncThreadJobs$MH() {
        return RuntimeHelper.requireNonNull(constants$26.NewtonSyncThreadJobs$MH,"NewtonSyncThreadJobs");
    }
    public static void NewtonSyncThreadJobs ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.NewtonSyncThreadJobs$MH, "NewtonSyncThreadJobs");
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonAtomicAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$26.NewtonAtomicAdd$MH,"NewtonAtomicAdd");
    }
    public static int NewtonAtomicAdd ( Addressable ptr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.NewtonAtomicAdd$MH, "NewtonAtomicAdd");
        try {
            return (int)mh$.invokeExact(ptr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonAtomicSwap$MH() {
        return RuntimeHelper.requireNonNull(constants$27.NewtonAtomicSwap$MH,"NewtonAtomicSwap");
    }
    public static int NewtonAtomicSwap ( Addressable ptr,  int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.NewtonAtomicSwap$MH, "NewtonAtomicSwap");
        try {
            return (int)mh$.invokeExact(ptr, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonYield$MH() {
        return RuntimeHelper.requireNonNull(constants$27.NewtonYield$MH,"NewtonYield");
    }
    public static void NewtonYield (Object... x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.NewtonYield$MH, "NewtonYield");
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetIslandUpdateEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$27.NewtonSetIslandUpdateEvent$MH,"NewtonSetIslandUpdateEvent");
    }
    public static void NewtonSetIslandUpdateEvent ( Addressable newtonWorld,  Addressable islandUpdate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.NewtonSetIslandUpdateEvent$MH, "NewtonSetIslandUpdateEvent");
        try {
            mh$.invokeExact(newtonWorld, islandUpdate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldForEachJointDo$MH() {
        return RuntimeHelper.requireNonNull(constants$27.NewtonWorldForEachJointDo$MH,"NewtonWorldForEachJointDo");
    }
    public static void NewtonWorldForEachJointDo ( Addressable newtonWorld,  Addressable callback,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.NewtonWorldForEachJointDo$MH, "NewtonWorldForEachJointDo");
        try {
            mh$.invokeExact(newtonWorld, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldForEachBodyInAABBDo$MH() {
        return RuntimeHelper.requireNonNull(constants$27.NewtonWorldForEachBodyInAABBDo$MH,"NewtonWorldForEachBodyInAABBDo");
    }
    public static void NewtonWorldForEachBodyInAABBDo ( Addressable newtonWorld,  Addressable p0,  Addressable p1,  Addressable callback,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.NewtonWorldForEachBodyInAABBDo$MH, "NewtonWorldForEachBodyInAABBDo");
        try {
            mh$.invokeExact(newtonWorld, p0, p1, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldSetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$27.NewtonWorldSetUserData$MH,"NewtonWorldSetUserData");
    }
    public static void NewtonWorldSetUserData ( Addressable newtonWorld,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.NewtonWorldSetUserData$MH, "NewtonWorldSetUserData");
        try {
            mh$.invokeExact(newtonWorld, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$28.NewtonWorldGetUserData$MH,"NewtonWorldGetUserData");
    }
    public static MemoryAddress NewtonWorldGetUserData ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.NewtonWorldGetUserData$MH, "NewtonWorldGetUserData");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldAddListener$MH() {
        return RuntimeHelper.requireNonNull(constants$28.NewtonWorldAddListener$MH,"NewtonWorldAddListener");
    }
    public static MemoryAddress NewtonWorldAddListener ( Addressable newtonWorld,  Addressable nameId,  Addressable listenerUserData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.NewtonWorldAddListener$MH, "NewtonWorldAddListener");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, nameId, listenerUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetListener$MH() {
        return RuntimeHelper.requireNonNull(constants$28.NewtonWorldGetListener$MH,"NewtonWorldGetListener");
    }
    public static MemoryAddress NewtonWorldGetListener ( Addressable newtonWorld,  Addressable nameId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.NewtonWorldGetListener$MH, "NewtonWorldGetListener");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, nameId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetDebugCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$28.NewtonWorldListenerSetDebugCallback$MH,"NewtonWorldListenerSetDebugCallback");
    }
    public static void NewtonWorldListenerSetDebugCallback ( Addressable newtonWorld,  Addressable listener,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.NewtonWorldListenerSetDebugCallback$MH, "NewtonWorldListenerSetDebugCallback");
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetPostStepCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$28.NewtonWorldListenerSetPostStepCallback$MH,"NewtonWorldListenerSetPostStepCallback");
    }
    public static void NewtonWorldListenerSetPostStepCallback ( Addressable newtonWorld,  Addressable listener,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.NewtonWorldListenerSetPostStepCallback$MH, "NewtonWorldListenerSetPostStepCallback");
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetPreUpdateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$28.NewtonWorldListenerSetPreUpdateCallback$MH,"NewtonWorldListenerSetPreUpdateCallback");
    }
    public static void NewtonWorldListenerSetPreUpdateCallback ( Addressable newtonWorld,  Addressable listener,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.NewtonWorldListenerSetPreUpdateCallback$MH, "NewtonWorldListenerSetPreUpdateCallback");
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetPostUpdateCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerSetPostUpdateCallback$MH,"NewtonWorldListenerSetPostUpdateCallback");
    }
    public static void NewtonWorldListenerSetPostUpdateCallback ( Addressable newtonWorld,  Addressable listener,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerSetPostUpdateCallback$MH, "NewtonWorldListenerSetPostUpdateCallback");
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerSetDestructorCallback$MH,"NewtonWorldListenerSetDestructorCallback");
    }
    public static void NewtonWorldListenerSetDestructorCallback ( Addressable newtonWorld,  Addressable listener,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerSetDestructorCallback$MH, "NewtonWorldListenerSetDestructorCallback");
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerSetBodyDestroyCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerSetBodyDestroyCallback$MH,"NewtonWorldListenerSetBodyDestroyCallback");
    }
    public static void NewtonWorldListenerSetBodyDestroyCallback ( Addressable newtonWorld,  Addressable listener,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerSetBodyDestroyCallback$MH, "NewtonWorldListenerSetBodyDestroyCallback");
        try {
            mh$.invokeExact(newtonWorld, listener, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerDebug$MH() {
        return RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerDebug$MH,"NewtonWorldListenerDebug");
    }
    public static void NewtonWorldListenerDebug ( Addressable newtonWorld,  Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerDebug$MH, "NewtonWorldListenerDebug");
        try {
            mh$.invokeExact(newtonWorld, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetListenerUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$29.NewtonWorldGetListenerUserData$MH,"NewtonWorldGetListenerUserData");
    }
    public static MemoryAddress NewtonWorldGetListenerUserData ( Addressable newtonWorld,  Addressable listener) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.NewtonWorldGetListenerUserData$MH, "NewtonWorldGetListenerUserData");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, listener);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldListenerGetBodyDestroyCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerGetBodyDestroyCallback$MH,"NewtonWorldListenerGetBodyDestroyCallback");
    }
    public static MemoryAddress NewtonWorldListenerGetBodyDestroyCallback ( Addressable newtonWorld,  Addressable listener) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29.NewtonWorldListenerGetBodyDestroyCallback$MH, "NewtonWorldListenerGetBodyDestroyCallback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, listener);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldSetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonWorldSetDestructorCallback$MH,"NewtonWorldSetDestructorCallback");
    }
    public static void NewtonWorldSetDestructorCallback ( Addressable newtonWorld,  Addressable destructor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.NewtonWorldSetDestructorCallback$MH, "NewtonWorldSetDestructorCallback");
        try {
            mh$.invokeExact(newtonWorld, destructor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonWorldGetDestructorCallback$MH,"NewtonWorldGetDestructorCallback");
    }
    public static MemoryAddress NewtonWorldGetDestructorCallback ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.NewtonWorldGetDestructorCallback$MH, "NewtonWorldGetDestructorCallback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldSetCollisionConstructorDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonWorldSetCollisionConstructorDestructorCallback$MH,"NewtonWorldSetCollisionConstructorDestructorCallback");
    }
    public static void NewtonWorldSetCollisionConstructorDestructorCallback ( Addressable newtonWorld,  Addressable constructor,  Addressable destructor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.NewtonWorldSetCollisionConstructorDestructorCallback$MH, "NewtonWorldSetCollisionConstructorDestructorCallback");
        try {
            mh$.invokeExact(newtonWorld, constructor, destructor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldSetCreateDestroyContactCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonWorldSetCreateDestroyContactCallback$MH,"NewtonWorldSetCreateDestroyContactCallback");
    }
    public static void NewtonWorldSetCreateDestroyContactCallback ( Addressable newtonWorld,  Addressable createContact,  Addressable destroyContact) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.NewtonWorldSetCreateDestroyContactCallback$MH, "NewtonWorldSetCreateDestroyContactCallback");
        try {
            mh$.invokeExact(newtonWorld, createContact, destroyContact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldRayCast$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonWorldRayCast$MH,"NewtonWorldRayCast");
    }
    public static void NewtonWorldRayCast ( Addressable newtonWorld,  Addressable p0,  Addressable p1,  Addressable filter,  Addressable userData,  Addressable prefilter,  int threadIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.NewtonWorldRayCast$MH, "NewtonWorldRayCast");
        try {
            mh$.invokeExact(newtonWorld, p0, p1, filter, userData, prefilter, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldConvexCast$MH() {
        return RuntimeHelper.requireNonNull(constants$30.NewtonWorldConvexCast$MH,"NewtonWorldConvexCast");
    }
    public static int NewtonWorldConvexCast ( Addressable newtonWorld,  Addressable matrix,  Addressable target,  Addressable shape,  Addressable param,  Addressable userData,  Addressable prefilter,  Addressable info,  int maxContactsCount,  int threadIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30.NewtonWorldConvexCast$MH, "NewtonWorldConvexCast");
        try {
            return (int)mh$.invokeExact(newtonWorld, matrix, target, shape, param, userData, prefilter, info, maxContactsCount, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldCollide$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonWorldCollide$MH,"NewtonWorldCollide");
    }
    public static int NewtonWorldCollide ( Addressable newtonWorld,  Addressable matrix,  Addressable shape,  Addressable userData,  Addressable prefilter,  Addressable info,  int maxContactsCount,  int threadIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.NewtonWorldCollide$MH, "NewtonWorldCollide");
        try {
            return (int)mh$.invokeExact(newtonWorld, matrix, shape, userData, prefilter, info, maxContactsCount, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetBodyCount$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonWorldGetBodyCount$MH,"NewtonWorldGetBodyCount");
    }
    public static int NewtonWorldGetBodyCount ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.NewtonWorldGetBodyCount$MH, "NewtonWorldGetBodyCount");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetConstraintCount$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonWorldGetConstraintCount$MH,"NewtonWorldGetConstraintCount");
    }
    public static int NewtonWorldGetConstraintCount ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.NewtonWorldGetConstraintCount$MH, "NewtonWorldGetConstraintCount");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldFindJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonWorldFindJoint$MH,"NewtonWorldFindJoint");
    }
    public static MemoryAddress NewtonWorldFindJoint ( Addressable body0,  Addressable body1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.NewtonWorldFindJoint$MH, "NewtonWorldFindJoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body0, body1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonIslandGetBody$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonIslandGetBody$MH,"NewtonIslandGetBody");
    }
    public static MemoryAddress NewtonIslandGetBody ( Addressable island,  int bodyIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.NewtonIslandGetBody$MH, "NewtonIslandGetBody");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(island, bodyIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonIslandGetBodyAABB$MH() {
        return RuntimeHelper.requireNonNull(constants$31.NewtonIslandGetBodyAABB$MH,"NewtonIslandGetBodyAABB");
    }
    public static void NewtonIslandGetBodyAABB ( Addressable island,  int bodyIndex,  Addressable p0,  Addressable p1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.NewtonIslandGetBodyAABB$MH, "NewtonIslandGetBodyAABB");
        try {
            mh$.invokeExact(island, bodyIndex, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialCreateGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$32.NewtonMaterialCreateGroupID$MH,"NewtonMaterialCreateGroupID");
    }
    public static int NewtonMaterialCreateGroupID ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.NewtonMaterialCreateGroupID$MH, "NewtonMaterialCreateGroupID");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetDefaultGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$32.NewtonMaterialGetDefaultGroupID$MH,"NewtonMaterialGetDefaultGroupID");
    }
    public static int NewtonMaterialGetDefaultGroupID ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.NewtonMaterialGetDefaultGroupID$MH, "NewtonMaterialGetDefaultGroupID");
        try {
            return (int)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialDestroyAllGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$32.NewtonMaterialDestroyAllGroupID$MH,"NewtonMaterialDestroyAllGroupID");
    }
    public static void NewtonMaterialDestroyAllGroupID ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.NewtonMaterialDestroyAllGroupID$MH, "NewtonMaterialDestroyAllGroupID");
        try {
            mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$32.NewtonMaterialGetUserData$MH,"NewtonMaterialGetUserData");
    }
    public static MemoryAddress NewtonMaterialGetUserData ( Addressable newtonWorld,  int id0,  int id1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.NewtonMaterialGetUserData$MH, "NewtonMaterialGetUserData");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, id0, id1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetSurfaceThickness$MH() {
        return RuntimeHelper.requireNonNull(constants$32.NewtonMaterialSetSurfaceThickness$MH,"NewtonMaterialSetSurfaceThickness");
    }
    public static void NewtonMaterialSetSurfaceThickness ( Addressable newtonWorld,  int id0,  int id1,  float thickness) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.NewtonMaterialSetSurfaceThickness$MH, "NewtonMaterialSetSurfaceThickness");
        try {
            mh$.invokeExact(newtonWorld, id0, id1, thickness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetCallbackUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$32.NewtonMaterialSetCallbackUserData$MH,"NewtonMaterialSetCallbackUserData");
    }
    public static void NewtonMaterialSetCallbackUserData ( Addressable newtonWorld,  int id0,  int id1,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32.NewtonMaterialSetCallbackUserData$MH, "NewtonMaterialSetCallbackUserData");
        try {
            mh$.invokeExact(newtonWorld, id0, id1, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactGenerationCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetContactGenerationCallback$MH,"NewtonMaterialSetContactGenerationCallback");
    }
    public static void NewtonMaterialSetContactGenerationCallback ( Addressable newtonWorld,  int id0,  int id1,  Addressable contactGeneration) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetContactGenerationCallback$MH, "NewtonMaterialSetContactGenerationCallback");
        try {
            mh$.invokeExact(newtonWorld, id0, id1, contactGeneration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetCompoundCollisionCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetCompoundCollisionCallback$MH,"NewtonMaterialSetCompoundCollisionCallback");
    }
    public static void NewtonMaterialSetCompoundCollisionCallback ( Addressable newtonWorld,  int id0,  int id1,  Addressable compoundAabbOverlap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetCompoundCollisionCallback$MH, "NewtonMaterialSetCompoundCollisionCallback");
        try {
            mh$.invokeExact(newtonWorld, id0, id1, compoundAabbOverlap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetCollisionCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetCollisionCallback$MH,"NewtonMaterialSetCollisionCallback");
    }
    public static void NewtonMaterialSetCollisionCallback ( Addressable newtonWorld,  int id0,  int id1,  Addressable aabbOverlap,  Addressable process) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetCollisionCallback$MH, "NewtonMaterialSetCollisionCallback");
        try {
            mh$.invokeExact(newtonWorld, id0, id1, aabbOverlap, process);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetDefaultSoftness$MH() {
        return RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetDefaultSoftness$MH,"NewtonMaterialSetDefaultSoftness");
    }
    public static void NewtonMaterialSetDefaultSoftness ( Addressable newtonWorld,  int id0,  int id1,  float value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetDefaultSoftness$MH, "NewtonMaterialSetDefaultSoftness");
        try {
            mh$.invokeExact(newtonWorld, id0, id1, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetDefaultElasticity$MH() {
        return RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetDefaultElasticity$MH,"NewtonMaterialSetDefaultElasticity");
    }
    public static void NewtonMaterialSetDefaultElasticity ( Addressable newtonWorld,  int id0,  int id1,  float elasticCoef) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetDefaultElasticity$MH, "NewtonMaterialSetDefaultElasticity");
        try {
            mh$.invokeExact(newtonWorld, id0, id1, elasticCoef);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetDefaultCollidable$MH() {
        return RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetDefaultCollidable$MH,"NewtonMaterialSetDefaultCollidable");
    }
    public static void NewtonMaterialSetDefaultCollidable ( Addressable newtonWorld,  int id0,  int id1,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.NewtonMaterialSetDefaultCollidable$MH, "NewtonMaterialSetDefaultCollidable");
        try {
            mh$.invokeExact(newtonWorld, id0, id1, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetDefaultFriction$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonMaterialSetDefaultFriction$MH,"NewtonMaterialSetDefaultFriction");
    }
    public static void NewtonMaterialSetDefaultFriction ( Addressable newtonWorld,  int id0,  int id1,  float staticFriction,  float kineticFriction) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.NewtonMaterialSetDefaultFriction$MH, "NewtonMaterialSetDefaultFriction");
        try {
            mh$.invokeExact(newtonWorld, id0, id1, staticFriction, kineticFriction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialJointResetIntraJointCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonMaterialJointResetIntraJointCollision$MH,"NewtonMaterialJointResetIntraJointCollision");
    }
    public static void NewtonMaterialJointResetIntraJointCollision ( Addressable newtonWorld,  int id0,  int id1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.NewtonMaterialJointResetIntraJointCollision$MH, "NewtonMaterialJointResetIntraJointCollision");
        try {
            mh$.invokeExact(newtonWorld, id0, id1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialJointResetSelftJointCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonMaterialJointResetSelftJointCollision$MH,"NewtonMaterialJointResetSelftJointCollision");
    }
    public static void NewtonMaterialJointResetSelftJointCollision ( Addressable newtonWorld,  int id0,  int id1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.NewtonMaterialJointResetSelftJointCollision$MH, "NewtonMaterialJointResetSelftJointCollision");
        try {
            mh$.invokeExact(newtonWorld, id0, id1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetFirstMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonWorldGetFirstMaterial$MH,"NewtonWorldGetFirstMaterial");
    }
    public static MemoryAddress NewtonWorldGetFirstMaterial ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.NewtonWorldGetFirstMaterial$MH, "NewtonWorldGetFirstMaterial");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetNextMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonWorldGetNextMaterial$MH,"NewtonWorldGetNextMaterial");
    }
    public static MemoryAddress NewtonWorldGetNextMaterial ( Addressable newtonWorld,  Addressable material) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.NewtonWorldGetNextMaterial$MH, "NewtonWorldGetNextMaterial");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetFirstBody$MH() {
        return RuntimeHelper.requireNonNull(constants$34.NewtonWorldGetFirstBody$MH,"NewtonWorldGetFirstBody");
    }
    public static MemoryAddress NewtonWorldGetFirstBody ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.NewtonWorldGetFirstBody$MH, "NewtonWorldGetFirstBody");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonWorldGetNextBody$MH() {
        return RuntimeHelper.requireNonNull(constants$35.NewtonWorldGetNextBody$MH,"NewtonWorldGetNextBody");
    }
    public static MemoryAddress NewtonWorldGetNextBody ( Addressable newtonWorld,  Addressable curBody) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.NewtonWorldGetNextBody$MH, "NewtonWorldGetNextBody");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, curBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetMaterialPairUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetMaterialPairUserData$MH,"NewtonMaterialGetMaterialPairUserData");
    }
    public static MemoryAddress NewtonMaterialGetMaterialPairUserData ( Addressable material) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetMaterialPairUserData$MH, "NewtonMaterialGetMaterialPairUserData");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactFaceAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetContactFaceAttribute$MH,"NewtonMaterialGetContactFaceAttribute");
    }
    public static int NewtonMaterialGetContactFaceAttribute ( Addressable material) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetContactFaceAttribute$MH, "NewtonMaterialGetContactFaceAttribute");
        try {
            return (int)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetBodyCollidingShape$MH() {
        return RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetBodyCollidingShape$MH,"NewtonMaterialGetBodyCollidingShape");
    }
    public static MemoryAddress NewtonMaterialGetBodyCollidingShape ( Addressable material,  Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetBodyCollidingShape$MH, "NewtonMaterialGetBodyCollidingShape");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(material, body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactNormalSpeed$MH() {
        return RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetContactNormalSpeed$MH,"NewtonMaterialGetContactNormalSpeed");
    }
    public static float NewtonMaterialGetContactNormalSpeed ( Addressable material) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetContactNormalSpeed$MH, "NewtonMaterialGetContactNormalSpeed");
        try {
            return (float)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactForce$MH() {
        return RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetContactForce$MH,"NewtonMaterialGetContactForce");
    }
    public static void NewtonMaterialGetContactForce ( Addressable material,  Addressable body,  Addressable force) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.NewtonMaterialGetContactForce$MH, "NewtonMaterialGetContactForce");
        try {
            mh$.invokeExact(material, body, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactPositionAndNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactPositionAndNormal$MH,"NewtonMaterialGetContactPositionAndNormal");
    }
    public static void NewtonMaterialGetContactPositionAndNormal ( Addressable material,  Addressable body,  Addressable posit,  Addressable normal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactPositionAndNormal$MH, "NewtonMaterialGetContactPositionAndNormal");
        try {
            mh$.invokeExact(material, body, posit, normal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactTangentDirections$MH() {
        return RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactTangentDirections$MH,"NewtonMaterialGetContactTangentDirections");
    }
    public static void NewtonMaterialGetContactTangentDirections ( Addressable material,  Addressable body,  Addressable dir0,  Addressable dir1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactTangentDirections$MH, "NewtonMaterialGetContactTangentDirections");
        try {
            mh$.invokeExact(material, body, dir0, dir1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactTangentSpeed$MH() {
        return RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactTangentSpeed$MH,"NewtonMaterialGetContactTangentSpeed");
    }
    public static float NewtonMaterialGetContactTangentSpeed ( Addressable material,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactTangentSpeed$MH, "NewtonMaterialGetContactTangentSpeed");
        try {
            return (float)mh$.invokeExact(material, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactMaxNormalImpact$MH() {
        return RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactMaxNormalImpact$MH,"NewtonMaterialGetContactMaxNormalImpact");
    }
    public static float NewtonMaterialGetContactMaxNormalImpact ( Addressable material) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactMaxNormalImpact$MH, "NewtonMaterialGetContactMaxNormalImpact");
        try {
            return (float)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactMaxTangentImpact$MH() {
        return RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactMaxTangentImpact$MH,"NewtonMaterialGetContactMaxTangentImpact");
    }
    public static float NewtonMaterialGetContactMaxTangentImpact ( Addressable material,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactMaxTangentImpact$MH, "NewtonMaterialGetContactMaxTangentImpact");
        try {
            return (float)mh$.invokeExact(material, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactPenetration$MH() {
        return RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactPenetration$MH,"NewtonMaterialGetContactPenetration");
    }
    public static float NewtonMaterialGetContactPenetration ( Addressable material) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.NewtonMaterialGetContactPenetration$MH, "NewtonMaterialGetContactPenetration");
        try {
            return (float)mh$.invokeExact(material);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetAsSoftContact$MH() {
        return RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetAsSoftContact$MH,"NewtonMaterialSetAsSoftContact");
    }
    public static void NewtonMaterialSetAsSoftContact ( Addressable material,  float relaxation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetAsSoftContact$MH, "NewtonMaterialSetAsSoftContact");
        try {
            mh$.invokeExact(material, relaxation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactSoftness$MH() {
        return RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactSoftness$MH,"NewtonMaterialSetContactSoftness");
    }
    public static void NewtonMaterialSetContactSoftness ( Addressable material,  float softness) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactSoftness$MH, "NewtonMaterialSetContactSoftness");
        try {
            mh$.invokeExact(material, softness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactThickness$MH() {
        return RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactThickness$MH,"NewtonMaterialSetContactThickness");
    }
    public static void NewtonMaterialSetContactThickness ( Addressable material,  float thickness) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactThickness$MH, "NewtonMaterialSetContactThickness");
        try {
            mh$.invokeExact(material, thickness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactElasticity$MH() {
        return RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactElasticity$MH,"NewtonMaterialSetContactElasticity");
    }
    public static void NewtonMaterialSetContactElasticity ( Addressable material,  float restitution) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactElasticity$MH, "NewtonMaterialSetContactElasticity");
        try {
            mh$.invokeExact(material, restitution);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactFrictionState$MH() {
        return RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactFrictionState$MH,"NewtonMaterialSetContactFrictionState");
    }
    public static void NewtonMaterialSetContactFrictionState ( Addressable material,  int state,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactFrictionState$MH, "NewtonMaterialSetContactFrictionState");
        try {
            mh$.invokeExact(material, state, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactFrictionCoef$MH() {
        return RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactFrictionCoef$MH,"NewtonMaterialSetContactFrictionCoef");
    }
    public static void NewtonMaterialSetContactFrictionCoef ( Addressable material,  float staticFrictionCoef,  float kineticFrictionCoef,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.NewtonMaterialSetContactFrictionCoef$MH, "NewtonMaterialSetContactFrictionCoef");
        try {
            mh$.invokeExact(material, staticFrictionCoef, kineticFrictionCoef, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactNormalAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactNormalAcceleration$MH,"NewtonMaterialSetContactNormalAcceleration");
    }
    public static void NewtonMaterialSetContactNormalAcceleration ( Addressable material,  float accel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactNormalAcceleration$MH, "NewtonMaterialSetContactNormalAcceleration");
        try {
            mh$.invokeExact(material, accel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactNormalDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactNormalDirection$MH,"NewtonMaterialSetContactNormalDirection");
    }
    public static void NewtonMaterialSetContactNormalDirection ( Addressable material,  Addressable directionVector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactNormalDirection$MH, "NewtonMaterialSetContactNormalDirection");
        try {
            mh$.invokeExact(material, directionVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactPosition$MH,"NewtonMaterialSetContactPosition");
    }
    public static void NewtonMaterialSetContactPosition ( Addressable material,  Addressable position) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactPosition$MH, "NewtonMaterialSetContactPosition");
        try {
            mh$.invokeExact(material, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactTangentFriction$MH() {
        return RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactTangentFriction$MH,"NewtonMaterialSetContactTangentFriction");
    }
    public static void NewtonMaterialSetContactTangentFriction ( Addressable material,  float friction,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactTangentFriction$MH, "NewtonMaterialSetContactTangentFriction");
        try {
            mh$.invokeExact(material, friction, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactTangentAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactTangentAcceleration$MH,"NewtonMaterialSetContactTangentAcceleration");
    }
    public static void NewtonMaterialSetContactTangentAcceleration ( Addressable material,  float accel,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.NewtonMaterialSetContactTangentAcceleration$MH, "NewtonMaterialSetContactTangentAcceleration");
        try {
            mh$.invokeExact(material, accel, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialContactRotateTangentDirections$MH() {
        return RuntimeHelper.requireNonNull(constants$38.NewtonMaterialContactRotateTangentDirections$MH,"NewtonMaterialContactRotateTangentDirections");
    }
    public static void NewtonMaterialContactRotateTangentDirections ( Addressable material,  Addressable directionVector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.NewtonMaterialContactRotateTangentDirections$MH, "NewtonMaterialContactRotateTangentDirections");
        try {
            mh$.invokeExact(material, directionVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialGetContactPruningTolerance$MH() {
        return RuntimeHelper.requireNonNull(constants$39.NewtonMaterialGetContactPruningTolerance$MH,"NewtonMaterialGetContactPruningTolerance");
    }
    public static float NewtonMaterialGetContactPruningTolerance ( Addressable contactJoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.NewtonMaterialGetContactPruningTolerance$MH, "NewtonMaterialGetContactPruningTolerance");
        try {
            return (float)mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMaterialSetContactPruningTolerance$MH() {
        return RuntimeHelper.requireNonNull(constants$39.NewtonMaterialSetContactPruningTolerance$MH,"NewtonMaterialSetContactPruningTolerance");
    }
    public static void NewtonMaterialSetContactPruningTolerance ( Addressable contactJoint,  float tolerance) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.NewtonMaterialSetContactPruningTolerance$MH, "NewtonMaterialSetContactPruningTolerance");
        try {
            mh$.invokeExact(contactJoint, tolerance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateNull$MH() {
        return RuntimeHelper.requireNonNull(constants$39.NewtonCreateNull$MH,"NewtonCreateNull");
    }
    public static MemoryAddress NewtonCreateNull ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.NewtonCreateNull$MH, "NewtonCreateNull");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateSphere$MH() {
        return RuntimeHelper.requireNonNull(constants$39.NewtonCreateSphere$MH,"NewtonCreateSphere");
    }
    public static MemoryAddress NewtonCreateSphere ( Addressable newtonWorld,  float radius,  int shapeID,  Addressable offsetMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.NewtonCreateSphere$MH, "NewtonCreateSphere");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, radius, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateBox$MH() {
        return RuntimeHelper.requireNonNull(constants$39.NewtonCreateBox$MH,"NewtonCreateBox");
    }
    public static MemoryAddress NewtonCreateBox ( Addressable newtonWorld,  float dx,  float dy,  float dz,  int shapeID,  Addressable offsetMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.NewtonCreateBox$MH, "NewtonCreateBox");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, dx, dy, dz, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCone$MH() {
        return RuntimeHelper.requireNonNull(constants$39.NewtonCreateCone$MH,"NewtonCreateCone");
    }
    public static MemoryAddress NewtonCreateCone ( Addressable newtonWorld,  float radius,  float height,  int shapeID,  Addressable offsetMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.NewtonCreateCone$MH, "NewtonCreateCone");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, radius, height, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCapsule$MH() {
        return RuntimeHelper.requireNonNull(constants$40.NewtonCreateCapsule$MH,"NewtonCreateCapsule");
    }
    public static MemoryAddress NewtonCreateCapsule ( Addressable newtonWorld,  float radius0,  float radius1,  float height,  int shapeID,  Addressable offsetMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.NewtonCreateCapsule$MH, "NewtonCreateCapsule");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, radius0, radius1, height, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$40.NewtonCreateCylinder$MH,"NewtonCreateCylinder");
    }
    public static MemoryAddress NewtonCreateCylinder ( Addressable newtonWorld,  float radio0,  float radio1,  float height,  int shapeID,  Addressable offsetMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.NewtonCreateCylinder$MH, "NewtonCreateCylinder");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, radio0, radio1, height, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateChamferCylinder$MH() {
        return RuntimeHelper.requireNonNull(constants$40.NewtonCreateChamferCylinder$MH,"NewtonCreateChamferCylinder");
    }
    public static MemoryAddress NewtonCreateChamferCylinder ( Addressable newtonWorld,  float radius,  float height,  int shapeID,  Addressable offsetMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.NewtonCreateChamferCylinder$MH, "NewtonCreateChamferCylinder");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, radius, height, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateConvexHull$MH() {
        return RuntimeHelper.requireNonNull(constants$40.NewtonCreateConvexHull$MH,"NewtonCreateConvexHull");
    }
    public static MemoryAddress NewtonCreateConvexHull ( Addressable newtonWorld,  int count,  Addressable vertexCloud,  int strideInBytes,  float tolerance,  int shapeID,  Addressable offsetMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.NewtonCreateConvexHull$MH, "NewtonCreateConvexHull");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, count, vertexCloud, strideInBytes, tolerance, shapeID, offsetMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateConvexHullFromMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$40.NewtonCreateConvexHullFromMesh$MH,"NewtonCreateConvexHullFromMesh");
    }
    public static MemoryAddress NewtonCreateConvexHullFromMesh ( Addressable newtonWorld,  Addressable mesh,  float tolerance,  int shapeID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.NewtonCreateConvexHullFromMesh$MH, "NewtonCreateConvexHullFromMesh");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, mesh, tolerance, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetMode$MH() {
        return RuntimeHelper.requireNonNull(constants$40.NewtonCollisionGetMode$MH,"NewtonCollisionGetMode");
    }
    public static int NewtonCollisionGetMode ( Addressable convexCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.NewtonCollisionGetMode$MH, "NewtonCollisionGetMode");
        try {
            return (int)mh$.invokeExact(convexCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetMode$MH() {
        return RuntimeHelper.requireNonNull(constants$41.NewtonCollisionSetMode$MH,"NewtonCollisionSetMode");
    }
    public static void NewtonCollisionSetMode ( Addressable convexCollision,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.NewtonCollisionSetMode$MH, "NewtonCollisionSetMode");
        try {
            mh$.invokeExact(convexCollision, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexHullGetFaceIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$41.NewtonConvexHullGetFaceIndices$MH,"NewtonConvexHullGetFaceIndices");
    }
    public static int NewtonConvexHullGetFaceIndices ( Addressable convexHullCollision,  int face,  Addressable faceIndices) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.NewtonConvexHullGetFaceIndices$MH, "NewtonConvexHullGetFaceIndices");
        try {
            return (int)mh$.invokeExact(convexHullCollision, face, faceIndices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexHullGetVertexData$MH() {
        return RuntimeHelper.requireNonNull(constants$41.NewtonConvexHullGetVertexData$MH,"NewtonConvexHullGetVertexData");
    }
    public static int NewtonConvexHullGetVertexData ( Addressable convexHullCollision,  Addressable vertexData,  Addressable strideInBytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.NewtonConvexHullGetVertexData$MH, "NewtonConvexHullGetVertexData");
        try {
            return (int)mh$.invokeExact(convexHullCollision, vertexData, strideInBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexCollisionCalculateVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$41.NewtonConvexCollisionCalculateVolume$MH,"NewtonConvexCollisionCalculateVolume");
    }
    public static float NewtonConvexCollisionCalculateVolume ( Addressable convexCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.NewtonConvexCollisionCalculateVolume$MH, "NewtonConvexCollisionCalculateVolume");
        try {
            return (float)mh$.invokeExact(convexCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexCollisionCalculateInertialMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$41.NewtonConvexCollisionCalculateInertialMatrix$MH,"NewtonConvexCollisionCalculateInertialMatrix");
    }
    public static void NewtonConvexCollisionCalculateInertialMatrix ( Addressable convexCollision,  Addressable inertia,  Addressable origin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.NewtonConvexCollisionCalculateInertialMatrix$MH, "NewtonConvexCollisionCalculateInertialMatrix");
        try {
            mh$.invokeExact(convexCollision, inertia, origin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConvexCollisionCalculateBuoyancyVolume$MH() {
        return RuntimeHelper.requireNonNull(constants$41.NewtonConvexCollisionCalculateBuoyancyVolume$MH,"NewtonConvexCollisionCalculateBuoyancyVolume");
    }
    public static float NewtonConvexCollisionCalculateBuoyancyVolume ( Addressable convexCollision,  Addressable matrix,  Addressable fluidPlane,  Addressable centerOfBuoyancy) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.NewtonConvexCollisionCalculateBuoyancyVolume$MH, "NewtonConvexCollisionCalculateBuoyancyVolume");
        try {
            return (float)mh$.invokeExact(convexCollision, matrix, fluidPlane, centerOfBuoyancy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionDataPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$42.NewtonCollisionDataPointer$MH,"NewtonCollisionDataPointer");
    }
    public static MemoryAddress NewtonCollisionDataPointer ( Addressable convexCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.NewtonCollisionDataPointer$MH, "NewtonCollisionDataPointer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(convexCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCompoundCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$42.NewtonCreateCompoundCollision$MH,"NewtonCreateCompoundCollision");
    }
    public static MemoryAddress NewtonCreateCompoundCollision ( Addressable newtonWorld,  int shapeID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.NewtonCreateCompoundCollision$MH, "NewtonCreateCompoundCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCompoundCollisionFromMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$42.NewtonCreateCompoundCollisionFromMesh$MH,"NewtonCreateCompoundCollisionFromMesh");
    }
    public static MemoryAddress NewtonCreateCompoundCollisionFromMesh ( Addressable newtonWorld,  Addressable mesh,  float hullTolerance,  int shapeID,  int subShapeID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.NewtonCreateCompoundCollisionFromMesh$MH, "NewtonCreateCompoundCollisionFromMesh");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, mesh, hullTolerance, shapeID, subShapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionBeginAddRemove$MH() {
        return RuntimeHelper.requireNonNull(constants$42.NewtonCompoundCollisionBeginAddRemove$MH,"NewtonCompoundCollisionBeginAddRemove");
    }
    public static void NewtonCompoundCollisionBeginAddRemove ( Addressable compoundCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.NewtonCompoundCollisionBeginAddRemove$MH, "NewtonCompoundCollisionBeginAddRemove");
        try {
            mh$.invokeExact(compoundCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionAddSubCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$42.NewtonCompoundCollisionAddSubCollision$MH,"NewtonCompoundCollisionAddSubCollision");
    }
    public static MemoryAddress NewtonCompoundCollisionAddSubCollision ( Addressable compoundCollision,  Addressable convexCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.NewtonCompoundCollisionAddSubCollision$MH, "NewtonCompoundCollisionAddSubCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compoundCollision, convexCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionRemoveSubCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$42.NewtonCompoundCollisionRemoveSubCollision$MH,"NewtonCompoundCollisionRemoveSubCollision");
    }
    public static void NewtonCompoundCollisionRemoveSubCollision ( Addressable compoundCollision,  Addressable collisionNode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.NewtonCompoundCollisionRemoveSubCollision$MH, "NewtonCompoundCollisionRemoveSubCollision");
        try {
            mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionRemoveSubCollisionByIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionRemoveSubCollisionByIndex$MH,"NewtonCompoundCollisionRemoveSubCollisionByIndex");
    }
    public static void NewtonCompoundCollisionRemoveSubCollisionByIndex ( Addressable compoundCollision,  int nodeIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionRemoveSubCollisionByIndex$MH, "NewtonCompoundCollisionRemoveSubCollisionByIndex");
        try {
            mh$.invokeExact(compoundCollision, nodeIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionSetSubCollisionMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionSetSubCollisionMatrix$MH,"NewtonCompoundCollisionSetSubCollisionMatrix");
    }
    public static void NewtonCompoundCollisionSetSubCollisionMatrix ( Addressable compoundCollision,  Addressable collisionNode,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionSetSubCollisionMatrix$MH, "NewtonCompoundCollisionSetSubCollisionMatrix");
        try {
            mh$.invokeExact(compoundCollision, collisionNode, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionEndAddRemove$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionEndAddRemove$MH,"NewtonCompoundCollisionEndAddRemove");
    }
    public static void NewtonCompoundCollisionEndAddRemove ( Addressable compoundCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionEndAddRemove$MH, "NewtonCompoundCollisionEndAddRemove");
        try {
            mh$.invokeExact(compoundCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetFirstNode$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionGetFirstNode$MH,"NewtonCompoundCollisionGetFirstNode");
    }
    public static MemoryAddress NewtonCompoundCollisionGetFirstNode ( Addressable compoundCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionGetFirstNode$MH, "NewtonCompoundCollisionGetFirstNode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compoundCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetNextNode$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionGetNextNode$MH,"NewtonCompoundCollisionGetNextNode");
    }
    public static MemoryAddress NewtonCompoundCollisionGetNextNode ( Addressable compoundCollision,  Addressable collisionNode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionGetNextNode$MH, "NewtonCompoundCollisionGetNextNode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetNodeByIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionGetNodeByIndex$MH,"NewtonCompoundCollisionGetNodeByIndex");
    }
    public static MemoryAddress NewtonCompoundCollisionGetNodeByIndex ( Addressable compoundCollision,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.NewtonCompoundCollisionGetNodeByIndex$MH, "NewtonCompoundCollisionGetNodeByIndex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compoundCollision, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetNodeIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonCompoundCollisionGetNodeIndex$MH,"NewtonCompoundCollisionGetNodeIndex");
    }
    public static int NewtonCompoundCollisionGetNodeIndex ( Addressable compoundCollision,  Addressable collisionNode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.NewtonCompoundCollisionGetNodeIndex$MH, "NewtonCompoundCollisionGetNodeIndex");
        try {
            return (int)mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCompoundCollisionGetCollisionFromNode$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonCompoundCollisionGetCollisionFromNode$MH,"NewtonCompoundCollisionGetCollisionFromNode");
    }
    public static MemoryAddress NewtonCompoundCollisionGetCollisionFromNode ( Addressable compoundCollision,  Addressable collisionNode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.NewtonCompoundCollisionGetCollisionFromNode$MH, "NewtonCompoundCollisionGetCollisionFromNode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateFracturedCompoundCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonCreateFracturedCompoundCollision$MH,"NewtonCreateFracturedCompoundCollision");
    }
    public static MemoryAddress NewtonCreateFracturedCompoundCollision ( Addressable newtonWorld,  Addressable solidMesh,  int shapeID,  int fracturePhysicsMaterialID,  int pointcloudCount,  Addressable vertexCloud,  int strideInBytes,  int materialID,  Addressable textureMatrix,  Addressable regenerateMainMeshCallback,  Addressable emitFracturedCompound,  Addressable emitFracfuredChunk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.NewtonCreateFracturedCompoundCollision$MH, "NewtonCreateFracturedCompoundCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, solidMesh, shapeID, fracturePhysicsMaterialID, pointcloudCount, vertexCloud, strideInBytes, materialID, textureMatrix, regenerateMainMeshCallback, emitFracturedCompound, emitFracfuredChunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundPlaneClip$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonFracturedCompoundPlaneClip$MH,"NewtonFracturedCompoundPlaneClip");
    }
    public static MemoryAddress NewtonFracturedCompoundPlaneClip ( Addressable fracturedCompound,  Addressable plane) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.NewtonFracturedCompoundPlaneClip$MH, "NewtonFracturedCompoundPlaneClip");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fracturedCompound, plane);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundSetCallbacks$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonFracturedCompoundSetCallbacks$MH,"NewtonFracturedCompoundSetCallbacks");
    }
    public static void NewtonFracturedCompoundSetCallbacks ( Addressable fracturedCompound,  Addressable regenerateMainMeshCallback,  Addressable emitFracturedCompound,  Addressable emitFracfuredChunk) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.NewtonFracturedCompoundSetCallbacks$MH, "NewtonFracturedCompoundSetCallbacks");
        try {
            mh$.invokeExact(fracturedCompound, regenerateMainMeshCallback, emitFracturedCompound, emitFracfuredChunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundIsNodeFreeToDetach$MH() {
        return RuntimeHelper.requireNonNull(constants$44.NewtonFracturedCompoundIsNodeFreeToDetach$MH,"NewtonFracturedCompoundIsNodeFreeToDetach");
    }
    public static int NewtonFracturedCompoundIsNodeFreeToDetach ( Addressable fracturedCompound,  Addressable collisionNode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.NewtonFracturedCompoundIsNodeFreeToDetach$MH, "NewtonFracturedCompoundIsNodeFreeToDetach");
        try {
            return (int)mh$.invokeExact(fracturedCompound, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundNeighborNodeList$MH() {
        return RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundNeighborNodeList$MH,"NewtonFracturedCompoundNeighborNodeList");
    }
    public static int NewtonFracturedCompoundNeighborNodeList ( Addressable fracturedCompound,  Addressable collisionNode,  Addressable list,  int maxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundNeighborNodeList$MH, "NewtonFracturedCompoundNeighborNodeList");
        try {
            return (int)mh$.invokeExact(fracturedCompound, collisionNode, list, maxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundGetMainMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundGetMainMesh$MH,"NewtonFracturedCompoundGetMainMesh");
    }
    public static MemoryAddress NewtonFracturedCompoundGetMainMesh ( Addressable fracturedCompound) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundGetMainMesh$MH, "NewtonFracturedCompoundGetMainMesh");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fracturedCompound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundGetFirstSubMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundGetFirstSubMesh$MH,"NewtonFracturedCompoundGetFirstSubMesh");
    }
    public static MemoryAddress NewtonFracturedCompoundGetFirstSubMesh ( Addressable fracturedCompound) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundGetFirstSubMesh$MH, "NewtonFracturedCompoundGetFirstSubMesh");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fracturedCompound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundGetNextSubMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundGetNextSubMesh$MH,"NewtonFracturedCompoundGetNextSubMesh");
    }
    public static MemoryAddress NewtonFracturedCompoundGetNextSubMesh ( Addressable fracturedCompound,  Addressable subMesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundGetNextSubMesh$MH, "NewtonFracturedCompoundGetNextSubMesh");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fracturedCompound, subMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundCollisionGetVertexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundCollisionGetVertexCount$MH,"NewtonFracturedCompoundCollisionGetVertexCount");
    }
    public static int NewtonFracturedCompoundCollisionGetVertexCount ( Addressable fracturedCompound,  Addressable meshOwner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundCollisionGetVertexCount$MH, "NewtonFracturedCompoundCollisionGetVertexCount");
        try {
            return (int)mh$.invokeExact(fracturedCompound, meshOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundCollisionGetVertexPositions$MH() {
        return RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundCollisionGetVertexPositions$MH,"NewtonFracturedCompoundCollisionGetVertexPositions");
    }
    public static MemoryAddress NewtonFracturedCompoundCollisionGetVertexPositions ( Addressable fracturedCompound,  Addressable meshOwner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45.NewtonFracturedCompoundCollisionGetVertexPositions$MH, "NewtonFracturedCompoundCollisionGetVertexPositions");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fracturedCompound, meshOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundCollisionGetVertexNormals$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundCollisionGetVertexNormals$MH,"NewtonFracturedCompoundCollisionGetVertexNormals");
    }
    public static MemoryAddress NewtonFracturedCompoundCollisionGetVertexNormals ( Addressable fracturedCompound,  Addressable meshOwner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundCollisionGetVertexNormals$MH, "NewtonFracturedCompoundCollisionGetVertexNormals");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fracturedCompound, meshOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundCollisionGetVertexUVs$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundCollisionGetVertexUVs$MH,"NewtonFracturedCompoundCollisionGetVertexUVs");
    }
    public static MemoryAddress NewtonFracturedCompoundCollisionGetVertexUVs ( Addressable fracturedCompound,  Addressable meshOwner) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundCollisionGetVertexUVs$MH, "NewtonFracturedCompoundCollisionGetVertexUVs");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fracturedCompound, meshOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetIndexStream$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundMeshPartGetIndexStream$MH,"NewtonFracturedCompoundMeshPartGetIndexStream");
    }
    public static int NewtonFracturedCompoundMeshPartGetIndexStream ( Addressable fracturedCompound,  Addressable meshOwner,  Addressable segment,  Addressable index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundMeshPartGetIndexStream$MH, "NewtonFracturedCompoundMeshPartGetIndexStream");
        try {
            return (int)mh$.invokeExact(fracturedCompound, meshOwner, segment, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetFirstSegment$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundMeshPartGetFirstSegment$MH,"NewtonFracturedCompoundMeshPartGetFirstSegment");
    }
    public static MemoryAddress NewtonFracturedCompoundMeshPartGetFirstSegment ( Addressable fractureCompoundMeshPart) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundMeshPartGetFirstSegment$MH, "NewtonFracturedCompoundMeshPartGetFirstSegment");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fractureCompoundMeshPart);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetNextSegment$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundMeshPartGetNextSegment$MH,"NewtonFracturedCompoundMeshPartGetNextSegment");
    }
    public static MemoryAddress NewtonFracturedCompoundMeshPartGetNextSegment ( Addressable fractureCompoundMeshSegment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundMeshPartGetNextSegment$MH, "NewtonFracturedCompoundMeshPartGetNextSegment");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(fractureCompoundMeshSegment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundMeshPartGetMaterial$MH,"NewtonFracturedCompoundMeshPartGetMaterial");
    }
    public static int NewtonFracturedCompoundMeshPartGetMaterial ( Addressable fractureCompoundMeshSegment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46.NewtonFracturedCompoundMeshPartGetMaterial$MH, "NewtonFracturedCompoundMeshPartGetMaterial");
        try {
            return (int)mh$.invokeExact(fractureCompoundMeshSegment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonFracturedCompoundMeshPartGetIndexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonFracturedCompoundMeshPartGetIndexCount$MH,"NewtonFracturedCompoundMeshPartGetIndexCount");
    }
    public static int NewtonFracturedCompoundMeshPartGetIndexCount ( Addressable fractureCompoundMeshSegment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.NewtonFracturedCompoundMeshPartGetIndexCount$MH, "NewtonFracturedCompoundMeshPartGetIndexCount");
        try {
            return (int)mh$.invokeExact(fractureCompoundMeshSegment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateSceneCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonCreateSceneCollision$MH,"NewtonCreateSceneCollision");
    }
    public static MemoryAddress NewtonCreateSceneCollision ( Addressable newtonWorld,  int shapeID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.NewtonCreateSceneCollision$MH, "NewtonCreateSceneCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionBeginAddRemove$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonSceneCollisionBeginAddRemove$MH,"NewtonSceneCollisionBeginAddRemove");
    }
    public static void NewtonSceneCollisionBeginAddRemove ( Addressable sceneCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.NewtonSceneCollisionBeginAddRemove$MH, "NewtonSceneCollisionBeginAddRemove");
        try {
            mh$.invokeExact(sceneCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionAddSubCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonSceneCollisionAddSubCollision$MH,"NewtonSceneCollisionAddSubCollision");
    }
    public static MemoryAddress NewtonSceneCollisionAddSubCollision ( Addressable sceneCollision,  Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.NewtonSceneCollisionAddSubCollision$MH, "NewtonSceneCollisionAddSubCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sceneCollision, collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionRemoveSubCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonSceneCollisionRemoveSubCollision$MH,"NewtonSceneCollisionRemoveSubCollision");
    }
    public static void NewtonSceneCollisionRemoveSubCollision ( Addressable compoundCollision,  Addressable collisionNode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.NewtonSceneCollisionRemoveSubCollision$MH, "NewtonSceneCollisionRemoveSubCollision");
        try {
            mh$.invokeExact(compoundCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionRemoveSubCollisionByIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$47.NewtonSceneCollisionRemoveSubCollisionByIndex$MH,"NewtonSceneCollisionRemoveSubCollisionByIndex");
    }
    public static void NewtonSceneCollisionRemoveSubCollisionByIndex ( Addressable sceneCollision,  int nodeIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47.NewtonSceneCollisionRemoveSubCollisionByIndex$MH, "NewtonSceneCollisionRemoveSubCollisionByIndex");
        try {
            mh$.invokeExact(sceneCollision, nodeIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionSetSubCollisionMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionSetSubCollisionMatrix$MH,"NewtonSceneCollisionSetSubCollisionMatrix");
    }
    public static void NewtonSceneCollisionSetSubCollisionMatrix ( Addressable sceneCollision,  Addressable collisionNode,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionSetSubCollisionMatrix$MH, "NewtonSceneCollisionSetSubCollisionMatrix");
        try {
            mh$.invokeExact(sceneCollision, collisionNode, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionEndAddRemove$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionEndAddRemove$MH,"NewtonSceneCollisionEndAddRemove");
    }
    public static void NewtonSceneCollisionEndAddRemove ( Addressable sceneCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionEndAddRemove$MH, "NewtonSceneCollisionEndAddRemove");
        try {
            mh$.invokeExact(sceneCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetFirstNode$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionGetFirstNode$MH,"NewtonSceneCollisionGetFirstNode");
    }
    public static MemoryAddress NewtonSceneCollisionGetFirstNode ( Addressable sceneCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionGetFirstNode$MH, "NewtonSceneCollisionGetFirstNode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sceneCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetNextNode$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionGetNextNode$MH,"NewtonSceneCollisionGetNextNode");
    }
    public static MemoryAddress NewtonSceneCollisionGetNextNode ( Addressable sceneCollision,  Addressable collisionNode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionGetNextNode$MH, "NewtonSceneCollisionGetNextNode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sceneCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetNodeByIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionGetNodeByIndex$MH,"NewtonSceneCollisionGetNodeByIndex");
    }
    public static MemoryAddress NewtonSceneCollisionGetNodeByIndex ( Addressable sceneCollision,  int index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionGetNodeByIndex$MH, "NewtonSceneCollisionGetNodeByIndex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sceneCollision, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetNodeIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionGetNodeIndex$MH,"NewtonSceneCollisionGetNodeIndex");
    }
    public static int NewtonSceneCollisionGetNodeIndex ( Addressable sceneCollision,  Addressable collisionNode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48.NewtonSceneCollisionGetNodeIndex$MH, "NewtonSceneCollisionGetNodeIndex");
        try {
            return (int)mh$.invokeExact(sceneCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSceneCollisionGetCollisionFromNode$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonSceneCollisionGetCollisionFromNode$MH,"NewtonSceneCollisionGetCollisionFromNode");
    }
    public static MemoryAddress NewtonSceneCollisionGetCollisionFromNode ( Addressable sceneCollision,  Addressable collisionNode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.NewtonSceneCollisionGetCollisionFromNode$MH, "NewtonSceneCollisionGetCollisionFromNode");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(sceneCollision, collisionNode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateUserMeshCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonCreateUserMeshCollision$MH,"NewtonCreateUserMeshCollision");
    }
    public static MemoryAddress NewtonCreateUserMeshCollision ( Addressable newtonWorld,  Addressable minBox,  Addressable maxBox,  Addressable userData,  Addressable collideCallback,  Addressable rayHitCallback,  Addressable destroyCallback,  Addressable getInfoCallback,  Addressable getLocalAABBCallback,  Addressable facesInAABBCallback,  Addressable serializeCallback,  int shapeID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.NewtonCreateUserMeshCollision$MH, "NewtonCreateUserMeshCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, minBox, maxBox, userData, collideCallback, rayHitCallback, destroyCallback, getInfoCallback, getLocalAABBCallback, facesInAABBCallback, serializeCallback, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserMeshCollisionContinuousOverlapTest$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonUserMeshCollisionContinuousOverlapTest$MH,"NewtonUserMeshCollisionContinuousOverlapTest");
    }
    public static int NewtonUserMeshCollisionContinuousOverlapTest ( Addressable collideDescData,  Addressable continueCollisionHandle,  Addressable minAabb,  Addressable maxAabb) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.NewtonUserMeshCollisionContinuousOverlapTest$MH, "NewtonUserMeshCollisionContinuousOverlapTest");
        try {
            return (int)mh$.invokeExact(collideDescData, continueCollisionHandle, minAabb, maxAabb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateCollisionFromSerialization$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonCreateCollisionFromSerialization$MH,"NewtonCreateCollisionFromSerialization");
    }
    public static MemoryAddress NewtonCreateCollisionFromSerialization ( Addressable newtonWorld,  Addressable deserializeFunction,  Addressable serializeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.NewtonCreateCollisionFromSerialization$MH, "NewtonCreateCollisionFromSerialization");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, deserializeFunction, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSerialize$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonCollisionSerialize$MH,"NewtonCollisionSerialize");
    }
    public static void NewtonCollisionSerialize ( Addressable newtonWorld,  Addressable collision,  Addressable serializeFunction,  Addressable serializeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.NewtonCollisionSerialize$MH, "NewtonCollisionSerialize");
        try {
            mh$.invokeExact(newtonWorld, collision, serializeFunction, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$49.NewtonCollisionGetInfo$MH,"NewtonCollisionGetInfo");
    }
    public static void NewtonCollisionGetInfo ( Addressable collision,  Addressable collisionInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49.NewtonCollisionGetInfo$MH, "NewtonCollisionGetInfo");
        try {
            mh$.invokeExact(collision, collisionInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateHeightFieldCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonCreateHeightFieldCollision$MH,"NewtonCreateHeightFieldCollision");
    }
    public static MemoryAddress NewtonCreateHeightFieldCollision ( Addressable newtonWorld,  int width,  int height,  int gridsDiagonals,  int elevationdatType,  Addressable elevationMap,  Addressable attributeMap,  float verticalScale,  float horizontalScale_x,  float horizontalScale_z,  int shapeID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.NewtonCreateHeightFieldCollision$MH, "NewtonCreateHeightFieldCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, width, height, gridsDiagonals, elevationdatType, elevationMap, attributeMap, verticalScale, horizontalScale_x, horizontalScale_z, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHeightFieldSetUserRayCastCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonHeightFieldSetUserRayCastCallback$MH,"NewtonHeightFieldSetUserRayCastCallback");
    }
    public static void NewtonHeightFieldSetUserRayCastCallback ( Addressable heightfieldCollision,  Addressable rayHitCallback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.NewtonHeightFieldSetUserRayCastCallback$MH, "NewtonHeightFieldSetUserRayCastCallback");
        try {
            mh$.invokeExact(heightfieldCollision, rayHitCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateTreeCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonCreateTreeCollision$MH,"NewtonCreateTreeCollision");
    }
    public static MemoryAddress NewtonCreateTreeCollision ( Addressable newtonWorld,  int shapeID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.NewtonCreateTreeCollision$MH, "NewtonCreateTreeCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateTreeCollisionFromMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonCreateTreeCollisionFromMesh$MH,"NewtonCreateTreeCollisionFromMesh");
    }
    public static MemoryAddress NewtonCreateTreeCollisionFromMesh ( Addressable newtonWorld,  Addressable mesh,  int shapeID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.NewtonCreateTreeCollisionFromMesh$MH, "NewtonCreateTreeCollisionFromMesh");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, mesh, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionSetUserRayCastCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonTreeCollisionSetUserRayCastCallback$MH,"NewtonTreeCollisionSetUserRayCastCallback");
    }
    public static void NewtonTreeCollisionSetUserRayCastCallback ( Addressable treeCollision,  Addressable rayHitCallback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.NewtonTreeCollisionSetUserRayCastCallback$MH, "NewtonTreeCollisionSetUserRayCastCallback");
        try {
            mh$.invokeExact(treeCollision, rayHitCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionBeginBuild$MH() {
        return RuntimeHelper.requireNonNull(constants$50.NewtonTreeCollisionBeginBuild$MH,"NewtonTreeCollisionBeginBuild");
    }
    public static void NewtonTreeCollisionBeginBuild ( Addressable treeCollision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50.NewtonTreeCollisionBeginBuild$MH, "NewtonTreeCollisionBeginBuild");
        try {
            mh$.invokeExact(treeCollision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionAddFace$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionAddFace$MH,"NewtonTreeCollisionAddFace");
    }
    public static void NewtonTreeCollisionAddFace ( Addressable treeCollision,  int vertexCount,  Addressable vertexPtr,  int strideInBytes,  int faceAttribute) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionAddFace$MH, "NewtonTreeCollisionAddFace");
        try {
            mh$.invokeExact(treeCollision, vertexCount, vertexPtr, strideInBytes, faceAttribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionEndBuild$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionEndBuild$MH,"NewtonTreeCollisionEndBuild");
    }
    public static void NewtonTreeCollisionEndBuild ( Addressable treeCollision,  int optimize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionEndBuild$MH, "NewtonTreeCollisionEndBuild");
        try {
            mh$.invokeExact(treeCollision, optimize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionGetFaceAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionGetFaceAttribute$MH,"NewtonTreeCollisionGetFaceAttribute");
    }
    public static int NewtonTreeCollisionGetFaceAttribute ( Addressable treeCollision,  Addressable faceIndexArray,  int indexCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionGetFaceAttribute$MH, "NewtonTreeCollisionGetFaceAttribute");
        try {
            return (int)mh$.invokeExact(treeCollision, faceIndexArray, indexCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionSetFaceAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionSetFaceAttribute$MH,"NewtonTreeCollisionSetFaceAttribute");
    }
    public static void NewtonTreeCollisionSetFaceAttribute ( Addressable treeCollision,  Addressable faceIndexArray,  int indexCount,  int attribute) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionSetFaceAttribute$MH, "NewtonTreeCollisionSetFaceAttribute");
        try {
            mh$.invokeExact(treeCollision, faceIndexArray, indexCount, attribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionForEachFace$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionForEachFace$MH,"NewtonTreeCollisionForEachFace");
    }
    public static void NewtonTreeCollisionForEachFace ( Addressable treeCollision,  Addressable forEachFaceCallback,  Addressable context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionForEachFace$MH, "NewtonTreeCollisionForEachFace");
        try {
            mh$.invokeExact(treeCollision, forEachFaceCallback, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonTreeCollisionGetVertexListTriangleListInAABB$MH() {
        return RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionGetVertexListTriangleListInAABB$MH,"NewtonTreeCollisionGetVertexListTriangleListInAABB");
    }
    public static int NewtonTreeCollisionGetVertexListTriangleListInAABB ( Addressable treeCollision,  Addressable p0,  Addressable p1,  Addressable vertexArray,  Addressable vertexCount,  Addressable vertexStrideInBytes,  Addressable indexList,  int maxIndexCount,  Addressable faceAttribute) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51.NewtonTreeCollisionGetVertexListTriangleListInAABB$MH, "NewtonTreeCollisionGetVertexListTriangleListInAABB");
        try {
            return (int)mh$.invokeExact(treeCollision, p0, p1, vertexArray, vertexCount, vertexStrideInBytes, indexList, maxIndexCount, faceAttribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonStaticCollisionSetDebugCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonStaticCollisionSetDebugCallback$MH,"NewtonStaticCollisionSetDebugCallback");
    }
    public static void NewtonStaticCollisionSetDebugCallback ( Addressable staticCollision,  Addressable userCallback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.NewtonStaticCollisionSetDebugCallback$MH, "NewtonStaticCollisionSetDebugCallback");
        try {
            mh$.invokeExact(staticCollision, userCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionCreateInstance$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonCollisionCreateInstance$MH,"NewtonCollisionCreateInstance");
    }
    public static MemoryAddress NewtonCollisionCreateInstance ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.NewtonCollisionCreateInstance$MH, "NewtonCollisionCreateInstance");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonCollisionGetType$MH,"NewtonCollisionGetType");
    }
    public static int NewtonCollisionGetType ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.NewtonCollisionGetType$MH, "NewtonCollisionGetType");
        try {
            return (int)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionIsConvexShape$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonCollisionIsConvexShape$MH,"NewtonCollisionIsConvexShape");
    }
    public static int NewtonCollisionIsConvexShape ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.NewtonCollisionIsConvexShape$MH, "NewtonCollisionIsConvexShape");
        try {
            return (int)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionIsStaticShape$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonCollisionIsStaticShape$MH,"NewtonCollisionIsStaticShape");
    }
    public static int NewtonCollisionIsStaticShape ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.NewtonCollisionIsStaticShape$MH, "NewtonCollisionIsStaticShape");
        try {
            return (int)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$52.NewtonCollisionSetUserData$MH,"NewtonCollisionSetUserData");
    }
    public static void NewtonCollisionSetUserData ( Addressable collision,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52.NewtonCollisionSetUserData$MH, "NewtonCollisionSetUserData");
        try {
            mh$.invokeExact(collision, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCollisionGetUserData$MH,"NewtonCollisionGetUserData");
    }
    public static MemoryAddress NewtonCollisionGetUserData ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.NewtonCollisionGetUserData$MH, "NewtonCollisionGetUserData");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetUserID$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCollisionSetUserID$MH,"NewtonCollisionSetUserID");
    }
    public static void NewtonCollisionSetUserID ( Addressable collision,  long id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.NewtonCollisionSetUserID$MH, "NewtonCollisionSetUserID");
        try {
            mh$.invokeExact(collision, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetUserID$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCollisionGetUserID$MH,"NewtonCollisionGetUserID");
    }
    public static long NewtonCollisionGetUserID ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.NewtonCollisionGetUserID$MH, "NewtonCollisionGetUserID");
        try {
            return (long)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCollisionGetMaterial$MH,"NewtonCollisionGetMaterial");
    }
    public static void NewtonCollisionGetMaterial ( Addressable collision,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.NewtonCollisionGetMaterial$MH, "NewtonCollisionGetMaterial");
        try {
            mh$.invokeExact(collision, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCollisionSetMaterial$MH,"NewtonCollisionSetMaterial");
    }
    public static void NewtonCollisionSetMaterial ( Addressable collision,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.NewtonCollisionSetMaterial$MH, "NewtonCollisionSetMaterial");
        try {
            mh$.invokeExact(collision, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetSubCollisionHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$53.NewtonCollisionGetSubCollisionHandle$MH,"NewtonCollisionGetSubCollisionHandle");
    }
    public static MemoryAddress NewtonCollisionGetSubCollisionHandle ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.NewtonCollisionGetSubCollisionHandle$MH, "NewtonCollisionGetSubCollisionHandle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetParentInstance$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonCollisionGetParentInstance$MH,"NewtonCollisionGetParentInstance");
    }
    public static MemoryAddress NewtonCollisionGetParentInstance ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.NewtonCollisionGetParentInstance$MH, "NewtonCollisionGetParentInstance");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonCollisionSetMatrix$MH,"NewtonCollisionSetMatrix");
    }
    public static void NewtonCollisionSetMatrix ( Addressable collision,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.NewtonCollisionSetMatrix$MH, "NewtonCollisionSetMatrix");
        try {
            mh$.invokeExact(collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonCollisionGetMatrix$MH,"NewtonCollisionGetMatrix");
    }
    public static void NewtonCollisionGetMatrix ( Addressable collision,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.NewtonCollisionGetMatrix$MH, "NewtonCollisionGetMatrix");
        try {
            mh$.invokeExact(collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonCollisionSetScale$MH,"NewtonCollisionSetScale");
    }
    public static void NewtonCollisionSetScale ( Addressable collision,  float scaleX,  float scaleY,  float scaleZ) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.NewtonCollisionSetScale$MH, "NewtonCollisionSetScale");
        try {
            mh$.invokeExact(collision, scaleX, scaleY, scaleZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetScale$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonCollisionGetScale$MH,"NewtonCollisionGetScale");
    }
    public static void NewtonCollisionGetScale ( Addressable collision,  Addressable scaleX,  Addressable scaleY,  Addressable scaleZ) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.NewtonCollisionGetScale$MH, "NewtonCollisionGetScale");
        try {
            mh$.invokeExact(collision, scaleX, scaleY, scaleZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroyCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$54.NewtonDestroyCollision$MH,"NewtonDestroyCollision");
    }
    public static void NewtonDestroyCollision ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.NewtonDestroyCollision$MH, "NewtonDestroyCollision");
        try {
            mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionGetSkinThickness$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCollisionGetSkinThickness$MH,"NewtonCollisionGetSkinThickness");
    }
    public static float NewtonCollisionGetSkinThickness ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.NewtonCollisionGetSkinThickness$MH, "NewtonCollisionGetSkinThickness");
        try {
            return (float)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSetSkinThickness$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCollisionSetSkinThickness$MH,"NewtonCollisionSetSkinThickness");
    }
    public static void NewtonCollisionSetSkinThickness ( Addressable collision,  float thickness) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.NewtonCollisionSetSkinThickness$MH, "NewtonCollisionSetSkinThickness");
        try {
            mh$.invokeExact(collision, thickness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionIntersectionTest$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCollisionIntersectionTest$MH,"NewtonCollisionIntersectionTest");
    }
    public static int NewtonCollisionIntersectionTest ( Addressable newtonWorld,  Addressable collisionA,  Addressable matrixA,  Addressable collisionB,  Addressable matrixB,  int threadIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.NewtonCollisionIntersectionTest$MH, "NewtonCollisionIntersectionTest");
        try {
            return (int)mh$.invokeExact(newtonWorld, collisionA, matrixA, collisionB, matrixB, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionPointDistance$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCollisionPointDistance$MH,"NewtonCollisionPointDistance");
    }
    public static int NewtonCollisionPointDistance ( Addressable newtonWorld,  Addressable point,  Addressable collision,  Addressable matrix,  Addressable contact,  Addressable normal,  int threadIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.NewtonCollisionPointDistance$MH, "NewtonCollisionPointDistance");
        try {
            return (int)mh$.invokeExact(newtonWorld, point, collision, matrix, contact, normal, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionClosestPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCollisionClosestPoint$MH,"NewtonCollisionClosestPoint");
    }
    public static int NewtonCollisionClosestPoint ( Addressable newtonWorld,  Addressable collisionA,  Addressable matrixA,  Addressable collisionB,  Addressable matrixB,  Addressable contactA,  Addressable contactB,  Addressable normalAB,  int threadIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.NewtonCollisionClosestPoint$MH, "NewtonCollisionClosestPoint");
        try {
            return (int)mh$.invokeExact(newtonWorld, collisionA, matrixA, collisionB, matrixB, contactA, contactB, normalAB, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionCollide$MH() {
        return RuntimeHelper.requireNonNull(constants$55.NewtonCollisionCollide$MH,"NewtonCollisionCollide");
    }
    public static int NewtonCollisionCollide ( Addressable newtonWorld,  int maxSize,  Addressable collisionA,  Addressable matrixA,  Addressable collisionB,  Addressable matrixB,  Addressable contacts,  Addressable normals,  Addressable penetration,  Addressable attributeA,  Addressable attributeB,  int threadIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.NewtonCollisionCollide$MH, "NewtonCollisionCollide");
        try {
            return (int)mh$.invokeExact(newtonWorld, maxSize, collisionA, matrixA, collisionB, matrixB, contacts, normals, penetration, attributeA, attributeB, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionCollideContinue$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCollisionCollideContinue$MH,"NewtonCollisionCollideContinue");
    }
    public static int NewtonCollisionCollideContinue ( Addressable newtonWorld,  int maxSize,  float timestep,  Addressable collisionA,  Addressable matrixA,  Addressable velocA,  Addressable omegaA,  Addressable collisionB,  Addressable matrixB,  Addressable velocB,  Addressable omegaB,  Addressable timeOfImpact,  Addressable contacts,  Addressable normals,  Addressable penetration,  Addressable attributeA,  Addressable attributeB,  int threadIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.NewtonCollisionCollideContinue$MH, "NewtonCollisionCollideContinue");
        try {
            return (int)mh$.invokeExact(newtonWorld, maxSize, timestep, collisionA, matrixA, velocA, omegaA, collisionB, matrixB, velocB, omegaB, timeOfImpact, contacts, normals, penetration, attributeA, attributeB, threadIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionSupportVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCollisionSupportVertex$MH,"NewtonCollisionSupportVertex");
    }
    public static void NewtonCollisionSupportVertex ( Addressable collision,  Addressable dir,  Addressable vertex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.NewtonCollisionSupportVertex$MH, "NewtonCollisionSupportVertex");
        try {
            mh$.invokeExact(collision, dir, vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionRayCast$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCollisionRayCast$MH,"NewtonCollisionRayCast");
    }
    public static float NewtonCollisionRayCast ( Addressable collision,  Addressable p0,  Addressable p1,  Addressable normal,  Addressable attribute) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.NewtonCollisionRayCast$MH, "NewtonCollisionRayCast");
        try {
            return (float)mh$.invokeExact(collision, p0, p1, normal, attribute);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionCalculateAABB$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCollisionCalculateAABB$MH,"NewtonCollisionCalculateAABB");
    }
    public static void NewtonCollisionCalculateAABB ( Addressable collision,  Addressable matrix,  Addressable p0,  Addressable p1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.NewtonCollisionCalculateAABB$MH, "NewtonCollisionCalculateAABB");
        try {
            mh$.invokeExact(collision, matrix, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionForEachPolygonDo$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCollisionForEachPolygonDo$MH,"NewtonCollisionForEachPolygonDo");
    }
    public static void NewtonCollisionForEachPolygonDo ( Addressable collision,  Addressable matrix,  Addressable callback,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.NewtonCollisionForEachPolygonDo$MH, "NewtonCollisionForEachPolygonDo");
        try {
            mh$.invokeExact(collision, matrix, callback, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$56.NewtonCollisionAggregateCreate$MH,"NewtonCollisionAggregateCreate");
    }
    public static MemoryAddress NewtonCollisionAggregateCreate ( Addressable world) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.NewtonCollisionAggregateCreate$MH, "NewtonCollisionAggregateCreate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(world);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateDestroy$MH,"NewtonCollisionAggregateDestroy");
    }
    public static void NewtonCollisionAggregateDestroy ( Addressable aggregate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateDestroy$MH, "NewtonCollisionAggregateDestroy");
        try {
            mh$.invokeExact(aggregate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateAddBody$MH() {
        return RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateAddBody$MH,"NewtonCollisionAggregateAddBody");
    }
    public static void NewtonCollisionAggregateAddBody ( Addressable aggregate,  Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateAddBody$MH, "NewtonCollisionAggregateAddBody");
        try {
            mh$.invokeExact(aggregate, body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateRemoveBody$MH() {
        return RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateRemoveBody$MH,"NewtonCollisionAggregateRemoveBody");
    }
    public static void NewtonCollisionAggregateRemoveBody ( Addressable aggregate,  Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateRemoveBody$MH, "NewtonCollisionAggregateRemoveBody");
        try {
            mh$.invokeExact(aggregate, body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateGetSelfCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateGetSelfCollision$MH,"NewtonCollisionAggregateGetSelfCollision");
    }
    public static int NewtonCollisionAggregateGetSelfCollision ( Addressable aggregate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateGetSelfCollision$MH, "NewtonCollisionAggregateGetSelfCollision");
        try {
            return (int)mh$.invokeExact(aggregate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCollisionAggregateSetSelfCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateSetSelfCollision$MH,"NewtonCollisionAggregateSetSelfCollision");
    }
    public static void NewtonCollisionAggregateSetSelfCollision ( Addressable aggregate,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.NewtonCollisionAggregateSetSelfCollision$MH, "NewtonCollisionAggregateSetSelfCollision");
        try {
            mh$.invokeExact(aggregate, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSetEulerAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$57.NewtonSetEulerAngle$MH,"NewtonSetEulerAngle");
    }
    public static void NewtonSetEulerAngle ( Addressable eulersAngles,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.NewtonSetEulerAngle$MH, "NewtonSetEulerAngle");
        try {
            mh$.invokeExact(eulersAngles, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonGetEulerAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$58.NewtonGetEulerAngle$MH,"NewtonGetEulerAngle");
    }
    public static void NewtonGetEulerAngle ( Addressable matrix,  Addressable eulersAngles0,  Addressable eulersAngles1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.NewtonGetEulerAngle$MH, "NewtonGetEulerAngle");
        try {
            mh$.invokeExact(matrix, eulersAngles0, eulersAngles1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCalculateSpringDamperAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$58.NewtonCalculateSpringDamperAcceleration$MH,"NewtonCalculateSpringDamperAcceleration");
    }
    public static float NewtonCalculateSpringDamperAcceleration ( float dt,  float ks,  float x,  float kd,  float s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.NewtonCalculateSpringDamperAcceleration$MH, "NewtonCalculateSpringDamperAcceleration");
        try {
            return (float)mh$.invokeExact(dt, ks, x, kd, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateDynamicBody$MH() {
        return RuntimeHelper.requireNonNull(constants$58.NewtonCreateDynamicBody$MH,"NewtonCreateDynamicBody");
    }
    public static MemoryAddress NewtonCreateDynamicBody ( Addressable newtonWorld,  Addressable collision,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.NewtonCreateDynamicBody$MH, "NewtonCreateDynamicBody");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateKinematicBody$MH() {
        return RuntimeHelper.requireNonNull(constants$58.NewtonCreateKinematicBody$MH,"NewtonCreateKinematicBody");
    }
    public static MemoryAddress NewtonCreateKinematicBody ( Addressable newtonWorld,  Addressable collision,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.NewtonCreateKinematicBody$MH, "NewtonCreateKinematicBody");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateAsymetricDynamicBody$MH() {
        return RuntimeHelper.requireNonNull(constants$58.NewtonCreateAsymetricDynamicBody$MH,"NewtonCreateAsymetricDynamicBody");
    }
    public static MemoryAddress NewtonCreateAsymetricDynamicBody ( Addressable newtonWorld,  Addressable collision,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.NewtonCreateAsymetricDynamicBody$MH, "NewtonCreateAsymetricDynamicBody");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, collision, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroyBody$MH() {
        return RuntimeHelper.requireNonNull(constants$58.NewtonDestroyBody$MH,"NewtonDestroyBody");
    }
    public static void NewtonDestroyBody ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.NewtonDestroyBody$MH, "NewtonDestroyBody");
        try {
            mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetSimulationState$MH() {
        return RuntimeHelper.requireNonNull(constants$59.NewtonBodyGetSimulationState$MH,"NewtonBodyGetSimulationState");
    }
    public static int NewtonBodyGetSimulationState ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.NewtonBodyGetSimulationState$MH, "NewtonBodyGetSimulationState");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetSimulationState$MH() {
        return RuntimeHelper.requireNonNull(constants$59.NewtonBodySetSimulationState$MH,"NewtonBodySetSimulationState");
    }
    public static void NewtonBodySetSimulationState ( Addressable bodyPtr,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.NewtonBodySetSimulationState$MH, "NewtonBodySetSimulationState");
        try {
            mh$.invokeExact(bodyPtr, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetType$MH() {
        return RuntimeHelper.requireNonNull(constants$59.NewtonBodyGetType$MH,"NewtonBodyGetType");
    }
    public static int NewtonBodyGetType ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.NewtonBodyGetType$MH, "NewtonBodyGetType");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetCollidable$MH() {
        return RuntimeHelper.requireNonNull(constants$59.NewtonBodyGetCollidable$MH,"NewtonBodyGetCollidable");
    }
    public static int NewtonBodyGetCollidable ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.NewtonBodyGetCollidable$MH, "NewtonBodyGetCollidable");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetCollidable$MH() {
        return RuntimeHelper.requireNonNull(constants$59.NewtonBodySetCollidable$MH,"NewtonBodySetCollidable");
    }
    public static void NewtonBodySetCollidable ( Addressable body,  int collidableState) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.NewtonBodySetCollidable$MH, "NewtonBodySetCollidable");
        try {
            mh$.invokeExact(body, collidableState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyAddForce$MH() {
        return RuntimeHelper.requireNonNull(constants$59.NewtonBodyAddForce$MH,"NewtonBodyAddForce");
    }
    public static void NewtonBodyAddForce ( Addressable body,  Addressable force) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.NewtonBodyAddForce$MH, "NewtonBodyAddForce");
        try {
            mh$.invokeExact(body, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyAddTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonBodyAddTorque$MH,"NewtonBodyAddTorque");
    }
    public static void NewtonBodyAddTorque ( Addressable body,  Addressable torque) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.NewtonBodyAddTorque$MH, "NewtonBodyAddTorque");
        try {
            mh$.invokeExact(body, torque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetCentreOfMass$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonBodySetCentreOfMass$MH,"NewtonBodySetCentreOfMass");
    }
    public static void NewtonBodySetCentreOfMass ( Addressable body,  Addressable com) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.NewtonBodySetCentreOfMass$MH, "NewtonBodySetCentreOfMass");
        try {
            mh$.invokeExact(body, com);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMassMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonBodySetMassMatrix$MH,"NewtonBodySetMassMatrix");
    }
    public static void NewtonBodySetMassMatrix ( Addressable body,  float mass,  float Ixx,  float Iyy,  float Izz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.NewtonBodySetMassMatrix$MH, "NewtonBodySetMassMatrix");
        try {
            mh$.invokeExact(body, mass, Ixx, Iyy, Izz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetFullMassMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonBodySetFullMassMatrix$MH,"NewtonBodySetFullMassMatrix");
    }
    public static void NewtonBodySetFullMassMatrix ( Addressable body,  float mass,  Addressable inertiaMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.NewtonBodySetFullMassMatrix$MH, "NewtonBodySetFullMassMatrix");
        try {
            mh$.invokeExact(body, mass, inertiaMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMassProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonBodySetMassProperties$MH,"NewtonBodySetMassProperties");
    }
    public static void NewtonBodySetMassProperties ( Addressable body,  float mass,  Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.NewtonBodySetMassProperties$MH, "NewtonBodySetMassProperties");
        try {
            mh$.invokeExact(body, mass, collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$60.NewtonBodySetMatrix$MH,"NewtonBodySetMatrix");
    }
    public static void NewtonBodySetMatrix ( Addressable body,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.NewtonBodySetMatrix$MH, "NewtonBodySetMatrix");
        try {
            mh$.invokeExact(body, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMatrixNoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonBodySetMatrixNoSleep$MH,"NewtonBodySetMatrixNoSleep");
    }
    public static void NewtonBodySetMatrixNoSleep ( Addressable body,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.NewtonBodySetMatrixNoSleep$MH, "NewtonBodySetMatrixNoSleep");
        try {
            mh$.invokeExact(body, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMatrixRecursive$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonBodySetMatrixRecursive$MH,"NewtonBodySetMatrixRecursive");
    }
    public static void NewtonBodySetMatrixRecursive ( Addressable body,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.NewtonBodySetMatrixRecursive$MH, "NewtonBodySetMatrixRecursive");
        try {
            mh$.invokeExact(body, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetMaterialGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonBodySetMaterialGroupID$MH,"NewtonBodySetMaterialGroupID");
    }
    public static void NewtonBodySetMaterialGroupID ( Addressable body,  int id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.NewtonBodySetMaterialGroupID$MH, "NewtonBodySetMaterialGroupID");
        try {
            mh$.invokeExact(body, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetContinuousCollisionMode$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonBodySetContinuousCollisionMode$MH,"NewtonBodySetContinuousCollisionMode");
    }
    public static void NewtonBodySetContinuousCollisionMode ( Addressable body,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.NewtonBodySetContinuousCollisionMode$MH, "NewtonBodySetContinuousCollisionMode");
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetJointRecursiveCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonBodySetJointRecursiveCollision$MH,"NewtonBodySetJointRecursiveCollision");
    }
    public static void NewtonBodySetJointRecursiveCollision ( Addressable body,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.NewtonBodySetJointRecursiveCollision$MH, "NewtonBodySetJointRecursiveCollision");
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$61.NewtonBodySetOmega$MH,"NewtonBodySetOmega");
    }
    public static void NewtonBodySetOmega ( Addressable body,  Addressable omega) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.NewtonBodySetOmega$MH, "NewtonBodySetOmega");
        try {
            mh$.invokeExact(body, omega);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetOmegaNoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonBodySetOmegaNoSleep$MH,"NewtonBodySetOmegaNoSleep");
    }
    public static void NewtonBodySetOmegaNoSleep ( Addressable body,  Addressable omega) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.NewtonBodySetOmegaNoSleep$MH, "NewtonBodySetOmegaNoSleep");
        try {
            mh$.invokeExact(body, omega);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetVelocity$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonBodySetVelocity$MH,"NewtonBodySetVelocity");
    }
    public static void NewtonBodySetVelocity ( Addressable body,  Addressable velocity) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.NewtonBodySetVelocity$MH, "NewtonBodySetVelocity");
        try {
            mh$.invokeExact(body, velocity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetVelocityNoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonBodySetVelocityNoSleep$MH,"NewtonBodySetVelocityNoSleep");
    }
    public static void NewtonBodySetVelocityNoSleep ( Addressable body,  Addressable velocity) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.NewtonBodySetVelocityNoSleep$MH, "NewtonBodySetVelocityNoSleep");
        try {
            mh$.invokeExact(body, velocity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetForce$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonBodySetForce$MH,"NewtonBodySetForce");
    }
    public static void NewtonBodySetForce ( Addressable body,  Addressable force) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.NewtonBodySetForce$MH, "NewtonBodySetForce");
        try {
            mh$.invokeExact(body, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonBodySetTorque$MH,"NewtonBodySetTorque");
    }
    public static void NewtonBodySetTorque ( Addressable body,  Addressable torque) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.NewtonBodySetTorque$MH, "NewtonBodySetTorque");
        try {
            mh$.invokeExact(body, torque);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetLinearDamping$MH() {
        return RuntimeHelper.requireNonNull(constants$62.NewtonBodySetLinearDamping$MH,"NewtonBodySetLinearDamping");
    }
    public static void NewtonBodySetLinearDamping ( Addressable body,  float linearDamp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$62.NewtonBodySetLinearDamping$MH, "NewtonBodySetLinearDamping");
        try {
            mh$.invokeExact(body, linearDamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetAngularDamping$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonBodySetAngularDamping$MH,"NewtonBodySetAngularDamping");
    }
    public static void NewtonBodySetAngularDamping ( Addressable body,  Addressable angularDamp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.NewtonBodySetAngularDamping$MH, "NewtonBodySetAngularDamping");
        try {
            mh$.invokeExact(body, angularDamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonBodySetCollision$MH,"NewtonBodySetCollision");
    }
    public static void NewtonBodySetCollision ( Addressable body,  Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.NewtonBodySetCollision$MH, "NewtonBodySetCollision");
        try {
            mh$.invokeExact(body, collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetCollisionScale$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonBodySetCollisionScale$MH,"NewtonBodySetCollisionScale");
    }
    public static void NewtonBodySetCollisionScale ( Addressable body,  float scaleX,  float scaleY,  float scaleZ) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.NewtonBodySetCollisionScale$MH, "NewtonBodySetCollisionScale");
        try {
            mh$.invokeExact(body, scaleX, scaleY, scaleZ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetSleepState$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonBodyGetSleepState$MH,"NewtonBodyGetSleepState");
    }
    public static int NewtonBodyGetSleepState ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.NewtonBodyGetSleepState$MH, "NewtonBodyGetSleepState");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetSleepState$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonBodySetSleepState$MH,"NewtonBodySetSleepState");
    }
    public static void NewtonBodySetSleepState ( Addressable body,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.NewtonBodySetSleepState$MH, "NewtonBodySetSleepState");
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAutoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$63.NewtonBodyGetAutoSleep$MH,"NewtonBodyGetAutoSleep");
    }
    public static int NewtonBodyGetAutoSleep ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$63.NewtonBodyGetAutoSleep$MH, "NewtonBodyGetAutoSleep");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetAutoSleep$MH() {
        return RuntimeHelper.requireNonNull(constants$64.NewtonBodySetAutoSleep$MH,"NewtonBodySetAutoSleep");
    }
    public static void NewtonBodySetAutoSleep ( Addressable body,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.NewtonBodySetAutoSleep$MH, "NewtonBodySetAutoSleep");
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetFreezeState$MH() {
        return RuntimeHelper.requireNonNull(constants$64.NewtonBodyGetFreezeState$MH,"NewtonBodyGetFreezeState");
    }
    public static int NewtonBodyGetFreezeState ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.NewtonBodyGetFreezeState$MH, "NewtonBodyGetFreezeState");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetFreezeState$MH() {
        return RuntimeHelper.requireNonNull(constants$64.NewtonBodySetFreezeState$MH,"NewtonBodySetFreezeState");
    }
    public static void NewtonBodySetFreezeState ( Addressable body,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.NewtonBodySetFreezeState$MH, "NewtonBodySetFreezeState");
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetGyroscopicTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$64.NewtonBodyGetGyroscopicTorque$MH,"NewtonBodyGetGyroscopicTorque");
    }
    public static int NewtonBodyGetGyroscopicTorque ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.NewtonBodyGetGyroscopicTorque$MH, "NewtonBodyGetGyroscopicTorque");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetGyroscopicTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$64.NewtonBodySetGyroscopicTorque$MH,"NewtonBodySetGyroscopicTorque");
    }
    public static void NewtonBodySetGyroscopicTorque ( Addressable body,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.NewtonBodySetGyroscopicTorque$MH, "NewtonBodySetGyroscopicTorque");
        try {
            mh$.invokeExact(body, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$64.NewtonBodySetDestructorCallback$MH,"NewtonBodySetDestructorCallback");
    }
    public static void NewtonBodySetDestructorCallback ( Addressable body,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.NewtonBodySetDestructorCallback$MH, "NewtonBodySetDestructorCallback");
        try {
            mh$.invokeExact(body, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetDestructorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$65.NewtonBodyGetDestructorCallback$MH,"NewtonBodyGetDestructorCallback");
    }
    public static MemoryAddress NewtonBodyGetDestructorCallback ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.NewtonBodyGetDestructorCallback$MH, "NewtonBodyGetDestructorCallback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetTransformCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$65.NewtonBodySetTransformCallback$MH,"NewtonBodySetTransformCallback");
    }
    public static void NewtonBodySetTransformCallback ( Addressable body,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.NewtonBodySetTransformCallback$MH, "NewtonBodySetTransformCallback");
        try {
            mh$.invokeExact(body, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetTransformCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$65.NewtonBodyGetTransformCallback$MH,"NewtonBodyGetTransformCallback");
    }
    public static MemoryAddress NewtonBodyGetTransformCallback ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.NewtonBodyGetTransformCallback$MH, "NewtonBodyGetTransformCallback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetForceAndTorqueCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$65.NewtonBodySetForceAndTorqueCallback$MH,"NewtonBodySetForceAndTorqueCallback");
    }
    public static void NewtonBodySetForceAndTorqueCallback ( Addressable body,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.NewtonBodySetForceAndTorqueCallback$MH, "NewtonBodySetForceAndTorqueCallback");
        try {
            mh$.invokeExact(body, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetForceAndTorqueCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$65.NewtonBodyGetForceAndTorqueCallback$MH,"NewtonBodyGetForceAndTorqueCallback");
    }
    public static MemoryAddress NewtonBodyGetForceAndTorqueCallback ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.NewtonBodyGetForceAndTorqueCallback$MH, "NewtonBodyGetForceAndTorqueCallback");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetID$MH() {
        return RuntimeHelper.requireNonNull(constants$65.NewtonBodyGetID$MH,"NewtonBodyGetID");
    }
    public static int NewtonBodyGetID ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.NewtonBodyGetID$MH, "NewtonBodyGetID");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodySetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$66.NewtonBodySetUserData$MH,"NewtonBodySetUserData");
    }
    public static void NewtonBodySetUserData ( Addressable body,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.NewtonBodySetUserData$MH, "NewtonBodySetUserData");
        try {
            mh$.invokeExact(body, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetUserData$MH,"NewtonBodyGetUserData");
    }
    public static MemoryAddress NewtonBodyGetUserData ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetUserData$MH, "NewtonBodyGetUserData");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetWorld$MH() {
        return RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetWorld$MH,"NewtonBodyGetWorld");
    }
    public static MemoryAddress NewtonBodyGetWorld ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetWorld$MH, "NewtonBodyGetWorld");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetCollision$MH,"NewtonBodyGetCollision");
    }
    public static MemoryAddress NewtonBodyGetCollision ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetCollision$MH, "NewtonBodyGetCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetMaterialGroupID$MH() {
        return RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetMaterialGroupID$MH,"NewtonBodyGetMaterialGroupID");
    }
    public static int NewtonBodyGetMaterialGroupID ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetMaterialGroupID$MH, "NewtonBodyGetMaterialGroupID");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetSerializedID$MH() {
        return RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetSerializedID$MH,"NewtonBodyGetSerializedID");
    }
    public static int NewtonBodyGetSerializedID ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.NewtonBodyGetSerializedID$MH, "NewtonBodyGetSerializedID");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetContinuousCollisionMode$MH() {
        return RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetContinuousCollisionMode$MH,"NewtonBodyGetContinuousCollisionMode");
    }
    public static int NewtonBodyGetContinuousCollisionMode ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetContinuousCollisionMode$MH, "NewtonBodyGetContinuousCollisionMode");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetJointRecursiveCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetJointRecursiveCollision$MH,"NewtonBodyGetJointRecursiveCollision");
    }
    public static int NewtonBodyGetJointRecursiveCollision ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetJointRecursiveCollision$MH, "NewtonBodyGetJointRecursiveCollision");
        try {
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetPosition$MH,"NewtonBodyGetPosition");
    }
    public static void NewtonBodyGetPosition ( Addressable body,  Addressable pos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetPosition$MH, "NewtonBodyGetPosition");
        try {
            mh$.invokeExact(body, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetMatrix$MH,"NewtonBodyGetMatrix");
    }
    public static void NewtonBodyGetMatrix ( Addressable body,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetMatrix$MH, "NewtonBodyGetMatrix");
        try {
            mh$.invokeExact(body, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetRotation$MH() {
        return RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetRotation$MH,"NewtonBodyGetRotation");
    }
    public static void NewtonBodyGetRotation ( Addressable body,  Addressable rotation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetRotation$MH, "NewtonBodyGetRotation");
        try {
            mh$.invokeExact(body, rotation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetMass$MH() {
        return RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetMass$MH,"NewtonBodyGetMass");
    }
    public static void NewtonBodyGetMass ( Addressable body,  Addressable mass,  Addressable Ixx,  Addressable Iyy,  Addressable Izz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.NewtonBodyGetMass$MH, "NewtonBodyGetMass");
        try {
            mh$.invokeExact(body, mass, Ixx, Iyy, Izz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetInvMass$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetInvMass$MH,"NewtonBodyGetInvMass");
    }
    public static void NewtonBodyGetInvMass ( Addressable body,  Addressable invMass,  Addressable invIxx,  Addressable invIyy,  Addressable invIzz) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetInvMass$MH, "NewtonBodyGetInvMass");
        try {
            mh$.invokeExact(body, invMass, invIxx, invIyy, invIzz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetInertiaMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetInertiaMatrix$MH,"NewtonBodyGetInertiaMatrix");
    }
    public static void NewtonBodyGetInertiaMatrix ( Addressable body,  Addressable inertiaMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetInertiaMatrix$MH, "NewtonBodyGetInertiaMatrix");
        try {
            mh$.invokeExact(body, inertiaMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetInvInertiaMatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetInvInertiaMatrix$MH,"NewtonBodyGetInvInertiaMatrix");
    }
    public static void NewtonBodyGetInvInertiaMatrix ( Addressable body,  Addressable invInertiaMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetInvInertiaMatrix$MH, "NewtonBodyGetInvInertiaMatrix");
        try {
            mh$.invokeExact(body, invInertiaMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetOmega$MH,"NewtonBodyGetOmega");
    }
    public static void NewtonBodyGetOmega ( Addressable body,  Addressable vector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetOmega$MH, "NewtonBodyGetOmega");
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetVelocity$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetVelocity$MH,"NewtonBodyGetVelocity");
    }
    public static void NewtonBodyGetVelocity ( Addressable body,  Addressable vector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetVelocity$MH, "NewtonBodyGetVelocity");
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetAlpha$MH,"NewtonBodyGetAlpha");
    }
    public static void NewtonBodyGetAlpha ( Addressable body,  Addressable vector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.NewtonBodyGetAlpha$MH, "NewtonBodyGetAlpha");
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetAcceleration$MH,"NewtonBodyGetAcceleration");
    }
    public static void NewtonBodyGetAcceleration ( Addressable body,  Addressable vector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetAcceleration$MH, "NewtonBodyGetAcceleration");
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetForce$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetForce$MH,"NewtonBodyGetForce");
    }
    public static void NewtonBodyGetForce ( Addressable body,  Addressable vector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetForce$MH, "NewtonBodyGetForce");
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetTorque$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetTorque$MH,"NewtonBodyGetTorque");
    }
    public static void NewtonBodyGetTorque ( Addressable body,  Addressable vector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetTorque$MH, "NewtonBodyGetTorque");
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetCentreOfMass$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetCentreOfMass$MH,"NewtonBodyGetCentreOfMass");
    }
    public static void NewtonBodyGetCentreOfMass ( Addressable body,  Addressable com) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetCentreOfMass$MH, "NewtonBodyGetCentreOfMass");
        try {
            mh$.invokeExact(body, com);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetPointVelocity$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetPointVelocity$MH,"NewtonBodyGetPointVelocity");
    }
    public static void NewtonBodyGetPointVelocity ( Addressable body,  Addressable point,  Addressable velocOut) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.NewtonBodyGetPointVelocity$MH, "NewtonBodyGetPointVelocity");
        try {
            mh$.invokeExact(body, point, velocOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyApplyImpulsePair$MH() {
        return RuntimeHelper.requireNonNull(constants$69.NewtonBodyApplyImpulsePair$MH,"NewtonBodyApplyImpulsePair");
    }
    public static void NewtonBodyApplyImpulsePair ( Addressable body,  Addressable linearImpulse,  Addressable angularImpulse,  float timestep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.NewtonBodyApplyImpulsePair$MH, "NewtonBodyApplyImpulsePair");
        try {
            mh$.invokeExact(body, linearImpulse, angularImpulse, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyAddImpulse$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonBodyAddImpulse$MH,"NewtonBodyAddImpulse");
    }
    public static void NewtonBodyAddImpulse ( Addressable body,  Addressable pointDeltaVeloc,  Addressable pointPosit,  float timestep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.NewtonBodyAddImpulse$MH, "NewtonBodyAddImpulse");
        try {
            mh$.invokeExact(body, pointDeltaVeloc, pointPosit, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyApplyImpulseArray$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonBodyApplyImpulseArray$MH,"NewtonBodyApplyImpulseArray");
    }
    public static void NewtonBodyApplyImpulseArray ( Addressable body,  int impuleCount,  int strideInByte,  Addressable impulseArray,  Addressable pointArray,  float timestep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.NewtonBodyApplyImpulseArray$MH, "NewtonBodyApplyImpulseArray");
        try {
            mh$.invokeExact(body, impuleCount, strideInByte, impulseArray, pointArray, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyIntegrateVelocity$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonBodyIntegrateVelocity$MH,"NewtonBodyIntegrateVelocity");
    }
    public static void NewtonBodyIntegrateVelocity ( Addressable body,  float timestep) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.NewtonBodyIntegrateVelocity$MH, "NewtonBodyIntegrateVelocity");
        try {
            mh$.invokeExact(body, timestep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetLinearDamping$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonBodyGetLinearDamping$MH,"NewtonBodyGetLinearDamping");
    }
    public static float NewtonBodyGetLinearDamping ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.NewtonBodyGetLinearDamping$MH, "NewtonBodyGetLinearDamping");
        try {
            return (float)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAngularDamping$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonBodyGetAngularDamping$MH,"NewtonBodyGetAngularDamping");
    }
    public static void NewtonBodyGetAngularDamping ( Addressable body,  Addressable vector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.NewtonBodyGetAngularDamping$MH, "NewtonBodyGetAngularDamping");
        try {
            mh$.invokeExact(body, vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetAABB$MH() {
        return RuntimeHelper.requireNonNull(constants$70.NewtonBodyGetAABB$MH,"NewtonBodyGetAABB");
    }
    public static void NewtonBodyGetAABB ( Addressable body,  Addressable p0,  Addressable p1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.NewtonBodyGetAABB$MH, "NewtonBodyGetAABB");
        try {
            mh$.invokeExact(body, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetFirstJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonBodyGetFirstJoint$MH,"NewtonBodyGetFirstJoint");
    }
    public static MemoryAddress NewtonBodyGetFirstJoint ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.NewtonBodyGetFirstJoint$MH, "NewtonBodyGetFirstJoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetNextJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonBodyGetNextJoint$MH,"NewtonBodyGetNextJoint");
    }
    public static MemoryAddress NewtonBodyGetNextJoint ( Addressable body,  Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.NewtonBodyGetNextJoint$MH, "NewtonBodyGetNextJoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body, joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetFirstContactJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonBodyGetFirstContactJoint$MH,"NewtonBodyGetFirstContactJoint");
    }
    public static MemoryAddress NewtonBodyGetFirstContactJoint ( Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.NewtonBodyGetFirstContactJoint$MH, "NewtonBodyGetFirstContactJoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyGetNextContactJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonBodyGetNextContactJoint$MH,"NewtonBodyGetNextContactJoint");
    }
    public static MemoryAddress NewtonBodyGetNextContactJoint ( Addressable body,  Addressable contactJoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.NewtonBodyGetNextContactJoint$MH, "NewtonBodyGetNextContactJoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body, contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBodyFindContact$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonBodyFindContact$MH,"NewtonBodyFindContact");
    }
    public static MemoryAddress NewtonBodyFindContact ( Addressable body0,  Addressable body1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.NewtonBodyFindContact$MH, "NewtonBodyFindContact");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(body0, body1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointGetFirstContact$MH() {
        return RuntimeHelper.requireNonNull(constants$71.NewtonContactJointGetFirstContact$MH,"NewtonContactJointGetFirstContact");
    }
    public static MemoryAddress NewtonContactJointGetFirstContact ( Addressable contactJoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.NewtonContactJointGetFirstContact$MH, "NewtonContactJointGetFirstContact");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointGetNextContact$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonContactJointGetNextContact$MH,"NewtonContactJointGetNextContact");
    }
    public static MemoryAddress NewtonContactJointGetNextContact ( Addressable contactJoint,  Addressable contact) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.NewtonContactJointGetNextContact$MH, "NewtonContactJointGetNextContact");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(contactJoint, contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointGetContactCount$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonContactJointGetContactCount$MH,"NewtonContactJointGetContactCount");
    }
    public static int NewtonContactJointGetContactCount ( Addressable contactJoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.NewtonContactJointGetContactCount$MH, "NewtonContactJointGetContactCount");
        try {
            return (int)mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointRemoveContact$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonContactJointRemoveContact$MH,"NewtonContactJointRemoveContact");
    }
    public static void NewtonContactJointRemoveContact ( Addressable contactJoint,  Addressable contact) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.NewtonContactJointRemoveContact$MH, "NewtonContactJointRemoveContact");
        try {
            mh$.invokeExact(contactJoint, contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointGetClosestDistance$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonContactJointGetClosestDistance$MH,"NewtonContactJointGetClosestDistance");
    }
    public static float NewtonContactJointGetClosestDistance ( Addressable contactJoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.NewtonContactJointGetClosestDistance$MH, "NewtonContactJointGetClosestDistance");
        try {
            return (float)mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointResetSelftJointCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonContactJointResetSelftJointCollision$MH,"NewtonContactJointResetSelftJointCollision");
    }
    public static void NewtonContactJointResetSelftJointCollision ( Addressable contactJoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.NewtonContactJointResetSelftJointCollision$MH, "NewtonContactJointResetSelftJointCollision");
        try {
            mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactJointResetIntraJointCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$72.NewtonContactJointResetIntraJointCollision$MH,"NewtonContactJointResetIntraJointCollision");
    }
    public static void NewtonContactJointResetIntraJointCollision ( Addressable contactJoint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.NewtonContactJointResetIntraJointCollision$MH, "NewtonContactJointResetIntraJointCollision");
        try {
            mh$.invokeExact(contactJoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonContactGetMaterial$MH,"NewtonContactGetMaterial");
    }
    public static MemoryAddress NewtonContactGetMaterial ( Addressable contact) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.NewtonContactGetMaterial$MH, "NewtonContactGetMaterial");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetCollision0$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonContactGetCollision0$MH,"NewtonContactGetCollision0");
    }
    public static MemoryAddress NewtonContactGetCollision0 ( Addressable contact) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.NewtonContactGetCollision0$MH, "NewtonContactGetCollision0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetCollision1$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonContactGetCollision1$MH,"NewtonContactGetCollision1");
    }
    public static MemoryAddress NewtonContactGetCollision1 ( Addressable contact) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.NewtonContactGetCollision1$MH, "NewtonContactGetCollision1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetCollisionID0$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonContactGetCollisionID0$MH,"NewtonContactGetCollisionID0");
    }
    public static MemoryAddress NewtonContactGetCollisionID0 ( Addressable contact) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.NewtonContactGetCollisionID0$MH, "NewtonContactGetCollisionID0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonContactGetCollisionID1$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonContactGetCollisionID1$MH,"NewtonContactGetCollisionID1");
    }
    public static MemoryAddress NewtonContactGetCollisionID1 ( Addressable contact) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.NewtonContactGetCollisionID1$MH, "NewtonContactGetCollisionID1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(contact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$73.NewtonJointGetUserData$MH,"NewtonJointGetUserData");
    }
    public static MemoryAddress NewtonJointGetUserData ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.NewtonJointGetUserData$MH, "NewtonJointGetUserData");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointSetUserData$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonJointSetUserData$MH,"NewtonJointSetUserData");
    }
    public static void NewtonJointSetUserData ( Addressable joint,  Addressable userData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.NewtonJointSetUserData$MH, "NewtonJointSetUserData");
        try {
            mh$.invokeExact(joint, userData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetBody0$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonJointGetBody0$MH,"NewtonJointGetBody0");
    }
    public static MemoryAddress NewtonJointGetBody0 ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.NewtonJointGetBody0$MH, "NewtonJointGetBody0");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetBody1$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonJointGetBody1$MH,"NewtonJointGetBody1");
    }
    public static MemoryAddress NewtonJointGetBody1 ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.NewtonJointGetBody1$MH, "NewtonJointGetBody1");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonJointGetInfo$MH,"NewtonJointGetInfo");
    }
    public static void NewtonJointGetInfo ( Addressable joint,  Addressable info) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.NewtonJointGetInfo$MH, "NewtonJointGetInfo");
        try {
            mh$.invokeExact(joint, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetCollisionState$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonJointGetCollisionState$MH,"NewtonJointGetCollisionState");
    }
    public static int NewtonJointGetCollisionState ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.NewtonJointGetCollisionState$MH, "NewtonJointGetCollisionState");
        try {
            return (int)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointSetCollisionState$MH() {
        return RuntimeHelper.requireNonNull(constants$74.NewtonJointSetCollisionState$MH,"NewtonJointSetCollisionState");
    }
    public static void NewtonJointSetCollisionState ( Addressable joint,  int state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$74.NewtonJointSetCollisionState$MH, "NewtonJointSetCollisionState");
        try {
            mh$.invokeExact(joint, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointGetStiffness$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonJointGetStiffness$MH,"NewtonJointGetStiffness");
    }
    public static float NewtonJointGetStiffness ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.NewtonJointGetStiffness$MH, "NewtonJointGetStiffness");
        try {
            return (float)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointSetStiffness$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonJointSetStiffness$MH,"NewtonJointSetStiffness");
    }
    public static void NewtonJointSetStiffness ( Addressable joint,  float state) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.NewtonJointSetStiffness$MH, "NewtonJointSetStiffness");
        try {
            mh$.invokeExact(joint, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDestroyJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonDestroyJoint$MH,"NewtonDestroyJoint");
    }
    public static void NewtonDestroyJoint ( Addressable newtonWorld,  Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.NewtonDestroyJoint$MH, "NewtonDestroyJoint");
        try {
            mh$.invokeExact(newtonWorld, joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointSetDestructor$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonJointSetDestructor$MH,"NewtonJointSetDestructor");
    }
    public static void NewtonJointSetDestructor ( Addressable joint,  Addressable destructor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.NewtonJointSetDestructor$MH, "NewtonJointSetDestructor");
        try {
            mh$.invokeExact(joint, destructor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonJointIsActive$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonJointIsActive$MH,"NewtonJointIsActive");
    }
    public static int NewtonJointIsActive ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.NewtonJointIsActive$MH, "NewtonJointIsActive");
        try {
            return (int)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateMassSpringDamperSystem$MH() {
        return RuntimeHelper.requireNonNull(constants$75.NewtonCreateMassSpringDamperSystem$MH,"NewtonCreateMassSpringDamperSystem");
    }
    public static MemoryAddress NewtonCreateMassSpringDamperSystem ( Addressable newtonWorld,  int shapeID,  Addressable points,  int pointCount,  int strideInBytes,  Addressable pointMass,  Addressable links,  int linksCount,  Addressable linksSpring,  Addressable linksDamper) {
        var mh$ = RuntimeHelper.requireNonNull(constants$75.NewtonCreateMassSpringDamperSystem$MH, "NewtonCreateMassSpringDamperSystem");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, shapeID, points, pointCount, strideInBytes, pointMass, links, linksCount, linksSpring, linksDamper);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateDeformableSolid$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonCreateDeformableSolid$MH,"NewtonCreateDeformableSolid");
    }
    public static MemoryAddress NewtonCreateDeformableSolid ( Addressable newtonWorld,  Addressable mesh,  int shapeID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.NewtonCreateDeformableSolid$MH, "NewtonCreateDeformableSolid");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, mesh, shapeID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeformableMeshGetParticleCount$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonDeformableMeshGetParticleCount$MH,"NewtonDeformableMeshGetParticleCount");
    }
    public static int NewtonDeformableMeshGetParticleCount ( Addressable deformableMesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.NewtonDeformableMeshGetParticleCount$MH, "NewtonDeformableMeshGetParticleCount");
        try {
            return (int)mh$.invokeExact(deformableMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeformableMeshGetParticleStrideInBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonDeformableMeshGetParticleStrideInBytes$MH,"NewtonDeformableMeshGetParticleStrideInBytes");
    }
    public static int NewtonDeformableMeshGetParticleStrideInBytes ( Addressable deformableMesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.NewtonDeformableMeshGetParticleStrideInBytes$MH, "NewtonDeformableMeshGetParticleStrideInBytes");
        try {
            return (int)mh$.invokeExact(deformableMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonDeformableMeshGetParticleArray$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonDeformableMeshGetParticleArray$MH,"NewtonDeformableMeshGetParticleArray");
    }
    public static MemoryAddress NewtonDeformableMeshGetParticleArray ( Addressable deformableMesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.NewtonDeformableMeshGetParticleArray$MH, "NewtonDeformableMeshGetParticleArray");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(deformableMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateBall$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonConstraintCreateBall$MH,"NewtonConstraintCreateBall");
    }
    public static MemoryAddress NewtonConstraintCreateBall ( Addressable newtonWorld,  Addressable pivotPoint,  Addressable childBody,  Addressable parentBody) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.NewtonConstraintCreateBall$MH, "NewtonConstraintCreateBall");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, pivotPoint, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$76.NewtonBallSetUserCallback$MH,"NewtonBallSetUserCallback");
    }
    public static void NewtonBallSetUserCallback ( Addressable ball,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$76.NewtonBallSetUserCallback$MH, "NewtonBallSetUserCallback");
        try {
            mh$.invokeExact(ball, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallGetJointAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonBallGetJointAngle$MH,"NewtonBallGetJointAngle");
    }
    public static void NewtonBallGetJointAngle ( Addressable ball,  Addressable angle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.NewtonBallGetJointAngle$MH, "NewtonBallGetJointAngle");
        try {
            mh$.invokeExact(ball, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallGetJointOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonBallGetJointOmega$MH,"NewtonBallGetJointOmega");
    }
    public static void NewtonBallGetJointOmega ( Addressable ball,  Addressable omega) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.NewtonBallGetJointOmega$MH, "NewtonBallGetJointOmega");
        try {
            mh$.invokeExact(ball, omega);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonBallGetJointForce$MH,"NewtonBallGetJointForce");
    }
    public static void NewtonBallGetJointForce ( Addressable ball,  Addressable force) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.NewtonBallGetJointForce$MH, "NewtonBallGetJointForce");
        try {
            mh$.invokeExact(ball, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonBallSetConeLimits$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonBallSetConeLimits$MH,"NewtonBallSetConeLimits");
    }
    public static void NewtonBallSetConeLimits ( Addressable ball,  Addressable pin,  float maxConeAngle,  float maxTwistAngle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.NewtonBallSetConeLimits$MH, "NewtonBallSetConeLimits");
        try {
            mh$.invokeExact(ball, pin, maxConeAngle, maxTwistAngle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateHinge$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonConstraintCreateHinge$MH,"NewtonConstraintCreateHinge");
    }
    public static MemoryAddress NewtonConstraintCreateHinge ( Addressable newtonWorld,  Addressable pivotPoint,  Addressable pinDir,  Addressable childBody,  Addressable parentBody) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.NewtonConstraintCreateHinge$MH, "NewtonConstraintCreateHinge");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, pivotPoint, pinDir, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$77.NewtonHingeSetUserCallback$MH,"NewtonHingeSetUserCallback");
    }
    public static void NewtonHingeSetUserCallback ( Addressable hinge,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$77.NewtonHingeSetUserCallback$MH, "NewtonHingeSetUserCallback");
        try {
            mh$.invokeExact(hinge, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeGetJointAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonHingeGetJointAngle$MH,"NewtonHingeGetJointAngle");
    }
    public static float NewtonHingeGetJointAngle ( Addressable hinge) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.NewtonHingeGetJointAngle$MH, "NewtonHingeGetJointAngle");
        try {
            return (float)mh$.invokeExact(hinge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeGetJointOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonHingeGetJointOmega$MH,"NewtonHingeGetJointOmega");
    }
    public static float NewtonHingeGetJointOmega ( Addressable hinge) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.NewtonHingeGetJointOmega$MH, "NewtonHingeGetJointOmega");
        try {
            return (float)mh$.invokeExact(hinge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonHingeGetJointForce$MH,"NewtonHingeGetJointForce");
    }
    public static void NewtonHingeGetJointForce ( Addressable hinge,  Addressable force) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.NewtonHingeGetJointForce$MH, "NewtonHingeGetJointForce");
        try {
            mh$.invokeExact(hinge, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonHingeCalculateStopAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonHingeCalculateStopAlpha$MH,"NewtonHingeCalculateStopAlpha");
    }
    public static float NewtonHingeCalculateStopAlpha ( Addressable hinge,  Addressable desc,  float angle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.NewtonHingeCalculateStopAlpha$MH, "NewtonHingeCalculateStopAlpha");
        try {
            return (float)mh$.invokeExact(hinge, desc, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateSlider$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonConstraintCreateSlider$MH,"NewtonConstraintCreateSlider");
    }
    public static MemoryAddress NewtonConstraintCreateSlider ( Addressable newtonWorld,  Addressable pivotPoint,  Addressable pinDir,  Addressable childBody,  Addressable parentBody) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.NewtonConstraintCreateSlider$MH, "NewtonConstraintCreateSlider");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, pivotPoint, pinDir, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$78.NewtonSliderSetUserCallback$MH,"NewtonSliderSetUserCallback");
    }
    public static void NewtonSliderSetUserCallback ( Addressable slider,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$78.NewtonSliderSetUserCallback$MH, "NewtonSliderSetUserCallback");
        try {
            mh$.invokeExact(slider, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderGetJointPosit$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonSliderGetJointPosit$MH,"NewtonSliderGetJointPosit");
    }
    public static float NewtonSliderGetJointPosit ( Addressable slider) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.NewtonSliderGetJointPosit$MH, "NewtonSliderGetJointPosit");
        try {
            return (float)mh$.invokeExact(slider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderGetJointVeloc$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonSliderGetJointVeloc$MH,"NewtonSliderGetJointVeloc");
    }
    public static float NewtonSliderGetJointVeloc ( Addressable slider) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.NewtonSliderGetJointVeloc$MH, "NewtonSliderGetJointVeloc");
        try {
            return (float)mh$.invokeExact(slider);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonSliderGetJointForce$MH,"NewtonSliderGetJointForce");
    }
    public static void NewtonSliderGetJointForce ( Addressable slider,  Addressable force) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.NewtonSliderGetJointForce$MH, "NewtonSliderGetJointForce");
        try {
            mh$.invokeExact(slider, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonSliderCalculateStopAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonSliderCalculateStopAccel$MH,"NewtonSliderCalculateStopAccel");
    }
    public static float NewtonSliderCalculateStopAccel ( Addressable slider,  Addressable desc,  float position) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.NewtonSliderCalculateStopAccel$MH, "NewtonSliderCalculateStopAccel");
        try {
            return (float)mh$.invokeExact(slider, desc, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateCorkscrew$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonConstraintCreateCorkscrew$MH,"NewtonConstraintCreateCorkscrew");
    }
    public static MemoryAddress NewtonConstraintCreateCorkscrew ( Addressable newtonWorld,  Addressable pivotPoint,  Addressable pinDir,  Addressable childBody,  Addressable parentBody) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.NewtonConstraintCreateCorkscrew$MH, "NewtonConstraintCreateCorkscrew");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, pivotPoint, pinDir, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$79.NewtonCorkscrewSetUserCallback$MH,"NewtonCorkscrewSetUserCallback");
    }
    public static void NewtonCorkscrewSetUserCallback ( Addressable corkscrew,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$79.NewtonCorkscrewSetUserCallback$MH, "NewtonCorkscrewSetUserCallback");
        try {
            mh$.invokeExact(corkscrew, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointPosit$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointPosit$MH,"NewtonCorkscrewGetJointPosit");
    }
    public static float NewtonCorkscrewGetJointPosit ( Addressable corkscrew) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointPosit$MH, "NewtonCorkscrewGetJointPosit");
        try {
            return (float)mh$.invokeExact(corkscrew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointAngle$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointAngle$MH,"NewtonCorkscrewGetJointAngle");
    }
    public static float NewtonCorkscrewGetJointAngle ( Addressable corkscrew) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointAngle$MH, "NewtonCorkscrewGetJointAngle");
        try {
            return (float)mh$.invokeExact(corkscrew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointVeloc$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointVeloc$MH,"NewtonCorkscrewGetJointVeloc");
    }
    public static float NewtonCorkscrewGetJointVeloc ( Addressable corkscrew) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointVeloc$MH, "NewtonCorkscrewGetJointVeloc");
        try {
            return (float)mh$.invokeExact(corkscrew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointOmega$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointOmega$MH,"NewtonCorkscrewGetJointOmega");
    }
    public static float NewtonCorkscrewGetJointOmega ( Addressable corkscrew) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointOmega$MH, "NewtonCorkscrewGetJointOmega");
        try {
            return (float)mh$.invokeExact(corkscrew);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointForce$MH,"NewtonCorkscrewGetJointForce");
    }
    public static void NewtonCorkscrewGetJointForce ( Addressable corkscrew,  Addressable force) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewGetJointForce$MH, "NewtonCorkscrewGetJointForce");
        try {
            mh$.invokeExact(corkscrew, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewCalculateStopAlpha$MH() {
        return RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewCalculateStopAlpha$MH,"NewtonCorkscrewCalculateStopAlpha");
    }
    public static float NewtonCorkscrewCalculateStopAlpha ( Addressable corkscrew,  Addressable desc,  float angle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$80.NewtonCorkscrewCalculateStopAlpha$MH, "NewtonCorkscrewCalculateStopAlpha");
        try {
            return (float)mh$.invokeExact(corkscrew, desc, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCorkscrewCalculateStopAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonCorkscrewCalculateStopAccel$MH,"NewtonCorkscrewCalculateStopAccel");
    }
    public static float NewtonCorkscrewCalculateStopAccel ( Addressable corkscrew,  Addressable desc,  float position) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.NewtonCorkscrewCalculateStopAccel$MH, "NewtonCorkscrewCalculateStopAccel");
        try {
            return (float)mh$.invokeExact(corkscrew, desc, position);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateUniversal$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonConstraintCreateUniversal$MH,"NewtonConstraintCreateUniversal");
    }
    public static MemoryAddress NewtonConstraintCreateUniversal ( Addressable newtonWorld,  Addressable pivotPoint,  Addressable pinDir0,  Addressable pinDir1,  Addressable childBody,  Addressable parentBody) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.NewtonConstraintCreateUniversal$MH, "NewtonConstraintCreateUniversal");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, pivotPoint, pinDir0, pinDir1, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalSetUserCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonUniversalSetUserCallback$MH,"NewtonUniversalSetUserCallback");
    }
    public static void NewtonUniversalSetUserCallback ( Addressable universal,  Addressable callback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.NewtonUniversalSetUserCallback$MH, "NewtonUniversalSetUserCallback");
        try {
            mh$.invokeExact(universal, callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointAngle0$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonUniversalGetJointAngle0$MH,"NewtonUniversalGetJointAngle0");
    }
    public static float NewtonUniversalGetJointAngle0 ( Addressable universal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.NewtonUniversalGetJointAngle0$MH, "NewtonUniversalGetJointAngle0");
        try {
            return (float)mh$.invokeExact(universal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointAngle1$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonUniversalGetJointAngle1$MH,"NewtonUniversalGetJointAngle1");
    }
    public static float NewtonUniversalGetJointAngle1 ( Addressable universal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.NewtonUniversalGetJointAngle1$MH, "NewtonUniversalGetJointAngle1");
        try {
            return (float)mh$.invokeExact(universal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointOmega0$MH() {
        return RuntimeHelper.requireNonNull(constants$81.NewtonUniversalGetJointOmega0$MH,"NewtonUniversalGetJointOmega0");
    }
    public static float NewtonUniversalGetJointOmega0 ( Addressable universal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$81.NewtonUniversalGetJointOmega0$MH, "NewtonUniversalGetJointOmega0");
        try {
            return (float)mh$.invokeExact(universal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointOmega1$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonUniversalGetJointOmega1$MH,"NewtonUniversalGetJointOmega1");
    }
    public static float NewtonUniversalGetJointOmega1 ( Addressable universal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.NewtonUniversalGetJointOmega1$MH, "NewtonUniversalGetJointOmega1");
        try {
            return (float)mh$.invokeExact(universal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalGetJointForce$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonUniversalGetJointForce$MH,"NewtonUniversalGetJointForce");
    }
    public static void NewtonUniversalGetJointForce ( Addressable universal,  Addressable force) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.NewtonUniversalGetJointForce$MH, "NewtonUniversalGetJointForce");
        try {
            mh$.invokeExact(universal, force);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalCalculateStopAlpha0$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonUniversalCalculateStopAlpha0$MH,"NewtonUniversalCalculateStopAlpha0");
    }
    public static float NewtonUniversalCalculateStopAlpha0 ( Addressable universal,  Addressable desc,  float angle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.NewtonUniversalCalculateStopAlpha0$MH, "NewtonUniversalCalculateStopAlpha0");
        try {
            return (float)mh$.invokeExact(universal, desc, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUniversalCalculateStopAlpha1$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonUniversalCalculateStopAlpha1$MH,"NewtonUniversalCalculateStopAlpha1");
    }
    public static float NewtonUniversalCalculateStopAlpha1 ( Addressable universal,  Addressable desc,  float angle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.NewtonUniversalCalculateStopAlpha1$MH, "NewtonUniversalCalculateStopAlpha1");
        try {
            return (float)mh$.invokeExact(universal, desc, angle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateUpVector$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonConstraintCreateUpVector$MH,"NewtonConstraintCreateUpVector");
    }
    public static MemoryAddress NewtonConstraintCreateUpVector ( Addressable newtonWorld,  Addressable pinDir,  Addressable body) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.NewtonConstraintCreateUpVector$MH, "NewtonConstraintCreateUpVector");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, pinDir, body);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUpVectorGetPin$MH() {
        return RuntimeHelper.requireNonNull(constants$82.NewtonUpVectorGetPin$MH,"NewtonUpVectorGetPin");
    }
    public static void NewtonUpVectorGetPin ( Addressable upVector,  Addressable pin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$82.NewtonUpVectorGetPin$MH, "NewtonUpVectorGetPin");
        try {
            mh$.invokeExact(upVector, pin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUpVectorSetPin$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonUpVectorSetPin$MH,"NewtonUpVectorSetPin");
    }
    public static void NewtonUpVectorSetPin ( Addressable upVector,  Addressable pin) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.NewtonUpVectorSetPin$MH, "NewtonUpVectorSetPin");
        try {
            mh$.invokeExact(upVector, pin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonConstraintCreateUserJoint$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonConstraintCreateUserJoint$MH,"NewtonConstraintCreateUserJoint");
    }
    public static MemoryAddress NewtonConstraintCreateUserJoint ( Addressable newtonWorld,  int maxDOF,  Addressable callback,  Addressable childBody,  Addressable parentBody) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.NewtonConstraintCreateUserJoint$MH, "NewtonConstraintCreateUserJoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, maxDOF, callback, childBody, parentBody);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetSolverModel$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonUserJointGetSolverModel$MH,"NewtonUserJointGetSolverModel");
    }
    public static int NewtonUserJointGetSolverModel ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.NewtonUserJointGetSolverModel$MH, "NewtonUserJointGetSolverModel");
        try {
            return (int)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetSolverModel$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonUserJointSetSolverModel$MH,"NewtonUserJointSetSolverModel");
    }
    public static void NewtonUserJointSetSolverModel ( Addressable joint,  int model) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.NewtonUserJointSetSolverModel$MH, "NewtonUserJointSetSolverModel");
        try {
            mh$.invokeExact(joint, model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointMassScale$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonUserJointMassScale$MH,"NewtonUserJointMassScale");
    }
    public static void NewtonUserJointMassScale ( Addressable joint,  float scaleBody0,  float scaleBody1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.NewtonUserJointMassScale$MH, "NewtonUserJointMassScale");
        try {
            mh$.invokeExact(joint, scaleBody0, scaleBody1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetFeedbackCollectorCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$83.NewtonUserJointSetFeedbackCollectorCallback$MH,"NewtonUserJointSetFeedbackCollectorCallback");
    }
    public static void NewtonUserJointSetFeedbackCollectorCallback ( Addressable joint,  Addressable getFeedback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$83.NewtonUserJointSetFeedbackCollectorCallback$MH, "NewtonUserJointSetFeedbackCollectorCallback");
        try {
            mh$.invokeExact(joint, getFeedback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointAddLinearRow$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonUserJointAddLinearRow$MH,"NewtonUserJointAddLinearRow");
    }
    public static void NewtonUserJointAddLinearRow ( Addressable joint,  Addressable pivot0,  Addressable pivot1,  Addressable dir) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.NewtonUserJointAddLinearRow$MH, "NewtonUserJointAddLinearRow");
        try {
            mh$.invokeExact(joint, pivot0, pivot1, dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointAddAngularRow$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonUserJointAddAngularRow$MH,"NewtonUserJointAddAngularRow");
    }
    public static void NewtonUserJointAddAngularRow ( Addressable joint,  float relativeAngle,  Addressable dir) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.NewtonUserJointAddAngularRow$MH, "NewtonUserJointAddAngularRow");
        try {
            mh$.invokeExact(joint, relativeAngle, dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointAddGeneralRow$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonUserJointAddGeneralRow$MH,"NewtonUserJointAddGeneralRow");
    }
    public static void NewtonUserJointAddGeneralRow ( Addressable joint,  Addressable jacobian0,  Addressable jacobian1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.NewtonUserJointAddGeneralRow$MH, "NewtonUserJointAddGeneralRow");
        try {
            mh$.invokeExact(joint, jacobian0, jacobian1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowMinimumFriction$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonUserJointSetRowMinimumFriction$MH,"NewtonUserJointSetRowMinimumFriction");
    }
    public static void NewtonUserJointSetRowMinimumFriction ( Addressable joint,  float friction) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.NewtonUserJointSetRowMinimumFriction$MH, "NewtonUserJointSetRowMinimumFriction");
        try {
            mh$.invokeExact(joint, friction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowMaximumFriction$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonUserJointSetRowMaximumFriction$MH,"NewtonUserJointSetRowMaximumFriction");
    }
    public static void NewtonUserJointSetRowMaximumFriction ( Addressable joint,  float friction) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.NewtonUserJointSetRowMaximumFriction$MH, "NewtonUserJointSetRowMaximumFriction");
        try {
            mh$.invokeExact(joint, friction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointCalculateRowZeroAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$84.NewtonUserJointCalculateRowZeroAcceleration$MH,"NewtonUserJointCalculateRowZeroAcceleration");
    }
    public static float NewtonUserJointCalculateRowZeroAcceleration ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$84.NewtonUserJointCalculateRowZeroAcceleration$MH, "NewtonUserJointCalculateRowZeroAcceleration");
        try {
            return (float)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetRowAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$85.NewtonUserJointGetRowAcceleration$MH,"NewtonUserJointGetRowAcceleration");
    }
    public static float NewtonUserJointGetRowAcceleration ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.NewtonUserJointGetRowAcceleration$MH, "NewtonUserJointGetRowAcceleration");
        try {
            return (float)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetRowJacobian$MH() {
        return RuntimeHelper.requireNonNull(constants$85.NewtonUserJointGetRowJacobian$MH,"NewtonUserJointGetRowJacobian");
    }
    public static void NewtonUserJointGetRowJacobian ( Addressable joint,  Addressable linear0,  Addressable angula0,  Addressable linear1,  Addressable angula1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.NewtonUserJointGetRowJacobian$MH, "NewtonUserJointGetRowJacobian");
        try {
            mh$.invokeExact(joint, linear0, angula0, linear1, angula1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$85.NewtonUserJointSetRowAcceleration$MH,"NewtonUserJointSetRowAcceleration");
    }
    public static void NewtonUserJointSetRowAcceleration ( Addressable joint,  float acceleration) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.NewtonUserJointSetRowAcceleration$MH, "NewtonUserJointSetRowAcceleration");
        try {
            mh$.invokeExact(joint, acceleration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowMassDependentSpringDamperAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$85.NewtonUserJointSetRowMassDependentSpringDamperAcceleration$MH,"NewtonUserJointSetRowMassDependentSpringDamperAcceleration");
    }
    public static void NewtonUserJointSetRowMassDependentSpringDamperAcceleration ( Addressable joint,  float spring,  float damper) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.NewtonUserJointSetRowMassDependentSpringDamperAcceleration$MH, "NewtonUserJointSetRowMassDependentSpringDamperAcceleration");
        try {
            mh$.invokeExact(joint, spring, damper);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowMassIndependentSpringDamperAcceleration$MH() {
        return RuntimeHelper.requireNonNull(constants$85.NewtonUserJointSetRowMassIndependentSpringDamperAcceleration$MH,"NewtonUserJointSetRowMassIndependentSpringDamperAcceleration");
    }
    public static void NewtonUserJointSetRowMassIndependentSpringDamperAcceleration ( Addressable joint,  float rowStiffness,  float spring,  float damper) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.NewtonUserJointSetRowMassIndependentSpringDamperAcceleration$MH, "NewtonUserJointSetRowMassIndependentSpringDamperAcceleration");
        try {
            mh$.invokeExact(joint, rowStiffness, spring, damper);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointSetRowStiffness$MH() {
        return RuntimeHelper.requireNonNull(constants$85.NewtonUserJointSetRowStiffness$MH,"NewtonUserJointSetRowStiffness");
    }
    public static void NewtonUserJointSetRowStiffness ( Addressable joint,  float stiffness) {
        var mh$ = RuntimeHelper.requireNonNull(constants$85.NewtonUserJointSetRowStiffness$MH, "NewtonUserJointSetRowStiffness");
        try {
            mh$.invokeExact(joint, stiffness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJoinRowsCount$MH() {
        return RuntimeHelper.requireNonNull(constants$86.NewtonUserJoinRowsCount$MH,"NewtonUserJoinRowsCount");
    }
    public static int NewtonUserJoinRowsCount ( Addressable joint) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.NewtonUserJoinRowsCount$MH, "NewtonUserJoinRowsCount");
        try {
            return (int)mh$.invokeExact(joint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetGeneralRow$MH() {
        return RuntimeHelper.requireNonNull(constants$86.NewtonUserJointGetGeneralRow$MH,"NewtonUserJointGetGeneralRow");
    }
    public static void NewtonUserJointGetGeneralRow ( Addressable joint,  int index,  Addressable jacobian0,  Addressable jacobian1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.NewtonUserJointGetGeneralRow$MH, "NewtonUserJointGetGeneralRow");
        try {
            mh$.invokeExact(joint, index, jacobian0, jacobian1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonUserJointGetRowForce$MH() {
        return RuntimeHelper.requireNonNull(constants$86.NewtonUserJointGetRowForce$MH,"NewtonUserJointGetRowForce");
    }
    public static float NewtonUserJointGetRowForce ( Addressable joint,  int row) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.NewtonUserJointGetRowForce$MH, "NewtonUserJointGetRowForce");
        try {
            return (float)mh$.invokeExact(joint, row);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$86.NewtonMeshCreate$MH,"NewtonMeshCreate");
    }
    public static MemoryAddress NewtonMeshCreate ( Addressable newtonWorld) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.NewtonMeshCreate$MH, "NewtonMeshCreate");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFromMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$86.NewtonMeshCreateFromMesh$MH,"NewtonMeshCreateFromMesh");
    }
    public static MemoryAddress NewtonMeshCreateFromMesh ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.NewtonMeshCreateFromMesh$MH, "NewtonMeshCreateFromMesh");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFromCollision$MH() {
        return RuntimeHelper.requireNonNull(constants$86.NewtonMeshCreateFromCollision$MH,"NewtonMeshCreateFromCollision");
    }
    public static MemoryAddress NewtonMeshCreateFromCollision ( Addressable collision) {
        var mh$ = RuntimeHelper.requireNonNull(constants$86.NewtonMeshCreateFromCollision$MH, "NewtonMeshCreateFromCollision");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(collision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateTetrahedraIsoSurface$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonMeshCreateTetrahedraIsoSurface$MH,"NewtonMeshCreateTetrahedraIsoSurface");
    }
    public static MemoryAddress NewtonMeshCreateTetrahedraIsoSurface ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.NewtonMeshCreateTetrahedraIsoSurface$MH, "NewtonMeshCreateTetrahedraIsoSurface");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateConvexHull$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonMeshCreateConvexHull$MH,"NewtonMeshCreateConvexHull");
    }
    public static MemoryAddress NewtonMeshCreateConvexHull ( Addressable newtonWorld,  int pointCount,  Addressable vertexCloud,  int strideInBytes,  float tolerance) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.NewtonMeshCreateConvexHull$MH, "NewtonMeshCreateConvexHull");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, pointCount, vertexCloud, strideInBytes, tolerance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateVoronoiConvexDecomposition$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonMeshCreateVoronoiConvexDecomposition$MH,"NewtonMeshCreateVoronoiConvexDecomposition");
    }
    public static MemoryAddress NewtonMeshCreateVoronoiConvexDecomposition ( Addressable newtonWorld,  int pointCount,  Addressable vertexCloud,  int strideInBytes,  int materialID,  Addressable textureMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.NewtonMeshCreateVoronoiConvexDecomposition$MH, "NewtonMeshCreateVoronoiConvexDecomposition");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, pointCount, vertexCloud, strideInBytes, materialID, textureMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFromSerialization$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonMeshCreateFromSerialization$MH,"NewtonMeshCreateFromSerialization");
    }
    public static MemoryAddress NewtonMeshCreateFromSerialization ( Addressable newtonWorld,  Addressable deserializeFunction,  Addressable serializeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.NewtonMeshCreateFromSerialization$MH, "NewtonMeshCreateFromSerialization");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, deserializeFunction, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonMeshDestroy$MH,"NewtonMeshDestroy");
    }
    public static void NewtonMeshDestroy ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.NewtonMeshDestroy$MH, "NewtonMeshDestroy");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSerialize$MH() {
        return RuntimeHelper.requireNonNull(constants$87.NewtonMeshSerialize$MH,"NewtonMeshSerialize");
    }
    public static void NewtonMeshSerialize ( Addressable mesh,  Addressable serializeFunction,  Addressable serializeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$87.NewtonMeshSerialize$MH, "NewtonMeshSerialize");
        try {
            mh$.invokeExact(mesh, serializeFunction, serializeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSaveOFF$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonMeshSaveOFF$MH,"NewtonMeshSaveOFF");
    }
    public static void NewtonMeshSaveOFF ( Addressable mesh,  Addressable filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.NewtonMeshSaveOFF$MH, "NewtonMeshSaveOFF");
        try {
            mh$.invokeExact(mesh, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshLoadOFF$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonMeshLoadOFF$MH,"NewtonMeshLoadOFF");
    }
    public static MemoryAddress NewtonMeshLoadOFF ( Addressable newtonWorld,  Addressable filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.NewtonMeshLoadOFF$MH, "NewtonMeshLoadOFF");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshLoadTetrahedraMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonMeshLoadTetrahedraMesh$MH,"NewtonMeshLoadTetrahedraMesh");
    }
    public static MemoryAddress NewtonMeshLoadTetrahedraMesh ( Addressable newtonWorld,  Addressable filename) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.NewtonMeshLoadTetrahedraMesh$MH, "NewtonMeshLoadTetrahedraMesh");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(newtonWorld, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshFlipWinding$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonMeshFlipWinding$MH,"NewtonMeshFlipWinding");
    }
    public static void NewtonMeshFlipWinding ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.NewtonMeshFlipWinding$MH, "NewtonMeshFlipWinding");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplyTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonMeshApplyTransform$MH,"NewtonMeshApplyTransform");
    }
    public static void NewtonMeshApplyTransform ( Addressable mesh,  Addressable matrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.NewtonMeshApplyTransform$MH, "NewtonMeshApplyTransform");
        try {
            mh$.invokeExact(mesh, matrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCalculateOOBB$MH() {
        return RuntimeHelper.requireNonNull(constants$88.NewtonMeshCalculateOOBB$MH,"NewtonMeshCalculateOOBB");
    }
    public static void NewtonMeshCalculateOOBB ( Addressable mesh,  Addressable matrix,  Addressable x,  Addressable y,  Addressable z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$88.NewtonMeshCalculateOOBB$MH, "NewtonMeshCalculateOOBB");
        try {
            mh$.invokeExact(mesh, matrix, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCalculateVertexNormals$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonMeshCalculateVertexNormals$MH,"NewtonMeshCalculateVertexNormals");
    }
    public static void NewtonMeshCalculateVertexNormals ( Addressable mesh,  float angleInRadians) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.NewtonMeshCalculateVertexNormals$MH, "NewtonMeshCalculateVertexNormals");
        try {
            mh$.invokeExact(mesh, angleInRadians);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplySphericalMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonMeshApplySphericalMapping$MH,"NewtonMeshApplySphericalMapping");
    }
    public static void NewtonMeshApplySphericalMapping ( Addressable mesh,  int material,  Addressable aligmentMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.NewtonMeshApplySphericalMapping$MH, "NewtonMeshApplySphericalMapping");
        try {
            mh$.invokeExact(mesh, material, aligmentMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplyCylindricalMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonMeshApplyCylindricalMapping$MH,"NewtonMeshApplyCylindricalMapping");
    }
    public static void NewtonMeshApplyCylindricalMapping ( Addressable mesh,  int cylinderMaterial,  int capMaterial,  Addressable aligmentMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.NewtonMeshApplyCylindricalMapping$MH, "NewtonMeshApplyCylindricalMapping");
        try {
            mh$.invokeExact(mesh, cylinderMaterial, capMaterial, aligmentMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplyBoxMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonMeshApplyBoxMapping$MH,"NewtonMeshApplyBoxMapping");
    }
    public static void NewtonMeshApplyBoxMapping ( Addressable mesh,  int frontMaterial,  int sideMaterial,  int topMaterial,  Addressable aligmentMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.NewtonMeshApplyBoxMapping$MH, "NewtonMeshApplyBoxMapping");
        try {
            mh$.invokeExact(mesh, frontMaterial, sideMaterial, topMaterial, aligmentMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApplyAngleBasedMapping$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonMeshApplyAngleBasedMapping$MH,"NewtonMeshApplyAngleBasedMapping");
    }
    public static void NewtonMeshApplyAngleBasedMapping ( Addressable mesh,  int material,  Addressable reportPrograssCallback,  Addressable reportPrgressUserData,  Addressable aligmentMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.NewtonMeshApplyAngleBasedMapping$MH, "NewtonMeshApplyAngleBasedMapping");
        try {
            mh$.invokeExact(mesh, material, reportPrograssCallback, reportPrgressUserData, aligmentMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonCreateTetrahedraLinearBlendSkinWeightsChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$89.NewtonCreateTetrahedraLinearBlendSkinWeightsChannel$MH,"NewtonCreateTetrahedraLinearBlendSkinWeightsChannel");
    }
    public static void NewtonCreateTetrahedraLinearBlendSkinWeightsChannel ( Addressable tetrahedraMesh,  Addressable skinMesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$89.NewtonCreateTetrahedraLinearBlendSkinWeightsChannel$MH, "NewtonCreateTetrahedraLinearBlendSkinWeightsChannel");
        try {
            mh$.invokeExact(tetrahedraMesh, skinMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshOptimize$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonMeshOptimize$MH,"NewtonMeshOptimize");
    }
    public static void NewtonMeshOptimize ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.NewtonMeshOptimize$MH, "NewtonMeshOptimize");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshOptimizePoints$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonMeshOptimizePoints$MH,"NewtonMeshOptimizePoints");
    }
    public static void NewtonMeshOptimizePoints ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.NewtonMeshOptimizePoints$MH, "NewtonMeshOptimizePoints");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshOptimizeVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonMeshOptimizeVertex$MH,"NewtonMeshOptimizeVertex");
    }
    public static void NewtonMeshOptimizeVertex ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.NewtonMeshOptimizeVertex$MH, "NewtonMeshOptimizeVertex");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshIsOpenMesh$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonMeshIsOpenMesh$MH,"NewtonMeshIsOpenMesh");
    }
    public static int NewtonMeshIsOpenMesh ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.NewtonMeshIsOpenMesh$MH, "NewtonMeshIsOpenMesh");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshFixTJoints$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonMeshFixTJoints$MH,"NewtonMeshFixTJoints");
    }
    public static void NewtonMeshFixTJoints ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.NewtonMeshFixTJoints$MH, "NewtonMeshFixTJoints");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshPolygonize$MH() {
        return RuntimeHelper.requireNonNull(constants$90.NewtonMeshPolygonize$MH,"NewtonMeshPolygonize");
    }
    public static void NewtonMeshPolygonize ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$90.NewtonMeshPolygonize$MH, "NewtonMeshPolygonize");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshTriangulate$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonMeshTriangulate$MH,"NewtonMeshTriangulate");
    }
    public static void NewtonMeshTriangulate ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.NewtonMeshTriangulate$MH, "NewtonMeshTriangulate");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshUnion$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonMeshUnion$MH,"NewtonMeshUnion");
    }
    public static MemoryAddress NewtonMeshUnion ( Addressable mesh,  Addressable clipper,  Addressable clipperMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.NewtonMeshUnion$MH, "NewtonMeshUnion");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, clipper, clipperMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshDifference$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonMeshDifference$MH,"NewtonMeshDifference");
    }
    public static MemoryAddress NewtonMeshDifference ( Addressable mesh,  Addressable clipper,  Addressable clipperMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.NewtonMeshDifference$MH, "NewtonMeshDifference");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, clipper, clipperMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshIntersection$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonMeshIntersection$MH,"NewtonMeshIntersection");
    }
    public static MemoryAddress NewtonMeshIntersection ( Addressable mesh,  Addressable clipper,  Addressable clipperMatrix) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.NewtonMeshIntersection$MH, "NewtonMeshIntersection");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, clipper, clipperMatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshClip$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonMeshClip$MH,"NewtonMeshClip");
    }
    public static void NewtonMeshClip ( Addressable mesh,  Addressable clipper,  Addressable clipperMatrix,  Addressable topMesh,  Addressable bottomMesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.NewtonMeshClip$MH, "NewtonMeshClip");
        try {
            mh$.invokeExact(mesh, clipper, clipperMatrix, topMesh, bottomMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshConvexMeshIntersection$MH() {
        return RuntimeHelper.requireNonNull(constants$91.NewtonMeshConvexMeshIntersection$MH,"NewtonMeshConvexMeshIntersection");
    }
    public static MemoryAddress NewtonMeshConvexMeshIntersection ( Addressable mesh,  Addressable convexMesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$91.NewtonMeshConvexMeshIntersection$MH, "NewtonMeshConvexMeshIntersection");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, convexMesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSimplify$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonMeshSimplify$MH,"NewtonMeshSimplify");
    }
    public static MemoryAddress NewtonMeshSimplify ( Addressable mesh,  int maxVertexCount,  Addressable reportPrograssCallback,  Addressable reportPrgressUserData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.NewtonMeshSimplify$MH, "NewtonMeshSimplify");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, maxVertexCount, reportPrograssCallback, reportPrgressUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshApproximateConvexDecomposition$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonMeshApproximateConvexDecomposition$MH,"NewtonMeshApproximateConvexDecomposition");
    }
    public static MemoryAddress NewtonMeshApproximateConvexDecomposition ( Addressable mesh,  float maxConcavity,  float backFaceDistanceFactor,  int maxCount,  int maxVertexPerHull,  Addressable reportProgressCallback,  Addressable reportProgressUserData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.NewtonMeshApproximateConvexDecomposition$MH, "NewtonMeshApproximateConvexDecomposition");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, maxConcavity, backFaceDistanceFactor, maxCount, maxVertexPerHull, reportProgressCallback, reportProgressUserData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonRemoveUnusedVertices$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonRemoveUnusedVertices$MH,"NewtonRemoveUnusedVertices");
    }
    public static void NewtonRemoveUnusedVertices ( Addressable mesh,  Addressable vertexRemapTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.NewtonRemoveUnusedVertices$MH, "NewtonRemoveUnusedVertices");
        try {
            mh$.invokeExact(mesh, vertexRemapTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshBeginBuild$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonMeshBeginBuild$MH,"NewtonMeshBeginBuild");
    }
    public static void NewtonMeshBeginBuild ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.NewtonMeshBeginBuild$MH, "NewtonMeshBeginBuild");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshBeginFace$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonMeshBeginFace$MH,"NewtonMeshBeginFace");
    }
    public static void NewtonMeshBeginFace ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.NewtonMeshBeginFace$MH, "NewtonMeshBeginFace");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$92.NewtonMeshAddPoint$MH,"NewtonMeshAddPoint");
    }
    public static void NewtonMeshAddPoint ( Addressable mesh,  double x,  double y,  double z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$92.NewtonMeshAddPoint$MH, "NewtonMeshAddPoint");
        try {
            mh$.invokeExact(mesh, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddLayer$MH,"NewtonMeshAddLayer");
    }
    public static void NewtonMeshAddLayer ( Addressable mesh,  int layerIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddLayer$MH, "NewtonMeshAddLayer");
        try {
            mh$.invokeExact(mesh, layerIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddMaterial$MH,"NewtonMeshAddMaterial");
    }
    public static void NewtonMeshAddMaterial ( Addressable mesh,  int materialIndex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddMaterial$MH, "NewtonMeshAddMaterial");
        try {
            mh$.invokeExact(mesh, materialIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddNormal$MH,"NewtonMeshAddNormal");
    }
    public static void NewtonMeshAddNormal ( Addressable mesh,  float x,  float y,  float z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddNormal$MH, "NewtonMeshAddNormal");
        try {
            mh$.invokeExact(mesh, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddBinormal$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddBinormal$MH,"NewtonMeshAddBinormal");
    }
    public static void NewtonMeshAddBinormal ( Addressable mesh,  float x,  float y,  float z) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddBinormal$MH, "NewtonMeshAddBinormal");
        try {
            mh$.invokeExact(mesh, x, y, z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddUV0$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddUV0$MH,"NewtonMeshAddUV0");
    }
    public static void NewtonMeshAddUV0 ( Addressable mesh,  float u,  float v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddUV0$MH, "NewtonMeshAddUV0");
        try {
            mh$.invokeExact(mesh, u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddUV1$MH() {
        return RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddUV1$MH,"NewtonMeshAddUV1");
    }
    public static void NewtonMeshAddUV1 ( Addressable mesh,  float u,  float v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$93.NewtonMeshAddUV1$MH, "NewtonMeshAddUV1");
        try {
            mh$.invokeExact(mesh, u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshAddVertexColor$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonMeshAddVertexColor$MH,"NewtonMeshAddVertexColor");
    }
    public static void NewtonMeshAddVertexColor ( Addressable mesh,  float r,  float g,  float b,  float a) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.NewtonMeshAddVertexColor$MH, "NewtonMeshAddVertexColor");
        try {
            mh$.invokeExact(mesh, r, g, b, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshEndFace$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonMeshEndFace$MH,"NewtonMeshEndFace");
    }
    public static void NewtonMeshEndFace ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.NewtonMeshEndFace$MH, "NewtonMeshEndFace");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshEndBuild$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonMeshEndBuild$MH,"NewtonMeshEndBuild");
    }
    public static void NewtonMeshEndBuild ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.NewtonMeshEndBuild$MH, "NewtonMeshEndBuild");
        try {
            mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshClearVertexFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonMeshClearVertexFormat$MH,"NewtonMeshClearVertexFormat");
    }
    public static void NewtonMeshClearVertexFormat ( Addressable format) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.NewtonMeshClearVertexFormat$MH, "NewtonMeshClearVertexFormat");
        try {
            mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshBuildFromVertexListIndexList$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonMeshBuildFromVertexListIndexList$MH,"NewtonMeshBuildFromVertexListIndexList");
    }
    public static void NewtonMeshBuildFromVertexListIndexList ( Addressable mesh,  Addressable format) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.NewtonMeshBuildFromVertexListIndexList$MH, "NewtonMeshBuildFromVertexListIndexList");
        try {
            mh$.invokeExact(mesh, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetPointCount$MH() {
        return RuntimeHelper.requireNonNull(constants$94.NewtonMeshGetPointCount$MH,"NewtonMeshGetPointCount");
    }
    public static int NewtonMeshGetPointCount ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$94.NewtonMeshGetPointCount$MH, "NewtonMeshGetPointCount");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetIndexToVertexMap$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetIndexToVertexMap$MH,"NewtonMeshGetIndexToVertexMap");
    }
    public static MemoryAddress NewtonMeshGetIndexToVertexMap ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetIndexToVertexMap$MH, "NewtonMeshGetIndexToVertexMap");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexDoubleChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetVertexDoubleChannel$MH,"NewtonMeshGetVertexDoubleChannel");
    }
    public static void NewtonMeshGetVertexDoubleChannel ( Addressable mesh,  int vertexStrideInByte,  Addressable outBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetVertexDoubleChannel$MH, "NewtonMeshGetVertexDoubleChannel");
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetVertexChannel$MH,"NewtonMeshGetVertexChannel");
    }
    public static void NewtonMeshGetVertexChannel ( Addressable mesh,  int vertexStrideInByte,  Addressable outBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetVertexChannel$MH, "NewtonMeshGetVertexChannel");
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNormalChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetNormalChannel$MH,"NewtonMeshGetNormalChannel");
    }
    public static void NewtonMeshGetNormalChannel ( Addressable mesh,  int vertexStrideInByte,  Addressable outBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetNormalChannel$MH, "NewtonMeshGetNormalChannel");
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetBinormalChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetBinormalChannel$MH,"NewtonMeshGetBinormalChannel");
    }
    public static void NewtonMeshGetBinormalChannel ( Addressable mesh,  int vertexStrideInByte,  Addressable outBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetBinormalChannel$MH, "NewtonMeshGetBinormalChannel");
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetUV0Channel$MH() {
        return RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetUV0Channel$MH,"NewtonMeshGetUV0Channel");
    }
    public static void NewtonMeshGetUV0Channel ( Addressable mesh,  int vertexStrideInByte,  Addressable outBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$95.NewtonMeshGetUV0Channel$MH, "NewtonMeshGetUV0Channel");
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetUV1Channel$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonMeshGetUV1Channel$MH,"NewtonMeshGetUV1Channel");
    }
    public static void NewtonMeshGetUV1Channel ( Addressable mesh,  int vertexStrideInByte,  Addressable outBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.NewtonMeshGetUV1Channel$MH, "NewtonMeshGetUV1Channel");
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexColorChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonMeshGetVertexColorChannel$MH,"NewtonMeshGetVertexColorChannel");
    }
    public static void NewtonMeshGetVertexColorChannel ( Addressable mesh,  int vertexStrideInByte,  Addressable outBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.NewtonMeshGetVertexColorChannel$MH, "NewtonMeshGetVertexColorChannel");
        try {
            mh$.invokeExact(mesh, vertexStrideInByte, outBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasNormalChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonMeshHasNormalChannel$MH,"NewtonMeshHasNormalChannel");
    }
    public static int NewtonMeshHasNormalChannel ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.NewtonMeshHasNormalChannel$MH, "NewtonMeshHasNormalChannel");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasBinormalChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonMeshHasBinormalChannel$MH,"NewtonMeshHasBinormalChannel");
    }
    public static int NewtonMeshHasBinormalChannel ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.NewtonMeshHasBinormalChannel$MH, "NewtonMeshHasBinormalChannel");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasUV0Channel$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonMeshHasUV0Channel$MH,"NewtonMeshHasUV0Channel");
    }
    public static int NewtonMeshHasUV0Channel ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.NewtonMeshHasUV0Channel$MH, "NewtonMeshHasUV0Channel");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasUV1Channel$MH() {
        return RuntimeHelper.requireNonNull(constants$96.NewtonMeshHasUV1Channel$MH,"NewtonMeshHasUV1Channel");
    }
    public static int NewtonMeshHasUV1Channel ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$96.NewtonMeshHasUV1Channel$MH, "NewtonMeshHasUV1Channel");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshHasVertexColorChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonMeshHasVertexColorChannel$MH,"NewtonMeshHasVertexColorChannel");
    }
    public static int NewtonMeshHasVertexColorChannel ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.NewtonMeshHasVertexColorChannel$MH, "NewtonMeshHasVertexColorChannel");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshBeginHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonMeshBeginHandle$MH,"NewtonMeshBeginHandle");
    }
    public static MemoryAddress NewtonMeshBeginHandle ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.NewtonMeshBeginHandle$MH, "NewtonMeshBeginHandle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshEndHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonMeshEndHandle$MH,"NewtonMeshEndHandle");
    }
    public static void NewtonMeshEndHandle ( Addressable mesh,  Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.NewtonMeshEndHandle$MH, "NewtonMeshEndHandle");
        try {
            mh$.invokeExact(mesh, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshFirstMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonMeshFirstMaterial$MH,"NewtonMeshFirstMaterial");
    }
    public static int NewtonMeshFirstMaterial ( Addressable mesh,  Addressable handle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.NewtonMeshFirstMaterial$MH, "NewtonMeshFirstMaterial");
        try {
            return (int)mh$.invokeExact(mesh, handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshNextMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonMeshNextMaterial$MH,"NewtonMeshNextMaterial");
    }
    public static int NewtonMeshNextMaterial ( Addressable mesh,  Addressable handle,  int materialId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.NewtonMeshNextMaterial$MH, "NewtonMeshNextMaterial");
        try {
            return (int)mh$.invokeExact(mesh, handle, materialId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshMaterialGetMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$97.NewtonMeshMaterialGetMaterial$MH,"NewtonMeshMaterialGetMaterial");
    }
    public static int NewtonMeshMaterialGetMaterial ( Addressable mesh,  Addressable handle,  int materialId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$97.NewtonMeshMaterialGetMaterial$MH, "NewtonMeshMaterialGetMaterial");
        try {
            return (int)mh$.invokeExact(mesh, handle, materialId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshMaterialGetIndexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonMeshMaterialGetIndexCount$MH,"NewtonMeshMaterialGetIndexCount");
    }
    public static int NewtonMeshMaterialGetIndexCount ( Addressable mesh,  Addressable handle,  int materialId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.NewtonMeshMaterialGetIndexCount$MH, "NewtonMeshMaterialGetIndexCount");
        try {
            return (int)mh$.invokeExact(mesh, handle, materialId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshMaterialGetIndexStream$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonMeshMaterialGetIndexStream$MH,"NewtonMeshMaterialGetIndexStream");
    }
    public static void NewtonMeshMaterialGetIndexStream ( Addressable mesh,  Addressable handle,  int materialId,  Addressable index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.NewtonMeshMaterialGetIndexStream$MH, "NewtonMeshMaterialGetIndexStream");
        try {
            mh$.invokeExact(mesh, handle, materialId, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshMaterialGetIndexStreamShort$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonMeshMaterialGetIndexStreamShort$MH,"NewtonMeshMaterialGetIndexStreamShort");
    }
    public static void NewtonMeshMaterialGetIndexStreamShort ( Addressable mesh,  Addressable handle,  int materialId,  Addressable index) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.NewtonMeshMaterialGetIndexStreamShort$MH, "NewtonMeshMaterialGetIndexStreamShort");
        try {
            mh$.invokeExact(mesh, handle, materialId, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFirstSingleSegment$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonMeshCreateFirstSingleSegment$MH,"NewtonMeshCreateFirstSingleSegment");
    }
    public static MemoryAddress NewtonMeshCreateFirstSingleSegment ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.NewtonMeshCreateFirstSingleSegment$MH, "NewtonMeshCreateFirstSingleSegment");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateNextSingleSegment$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonMeshCreateNextSingleSegment$MH,"NewtonMeshCreateNextSingleSegment");
    }
    public static MemoryAddress NewtonMeshCreateNextSingleSegment ( Addressable mesh,  Addressable segment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.NewtonMeshCreateNextSingleSegment$MH, "NewtonMeshCreateNextSingleSegment");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateFirstLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$98.NewtonMeshCreateFirstLayer$MH,"NewtonMeshCreateFirstLayer");
    }
    public static MemoryAddress NewtonMeshCreateFirstLayer ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$98.NewtonMeshCreateFirstLayer$MH, "NewtonMeshCreateFirstLayer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCreateNextLayer$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonMeshCreateNextLayer$MH,"NewtonMeshCreateNextLayer");
    }
    public static MemoryAddress NewtonMeshCreateNextLayer ( Addressable mesh,  Addressable segment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.NewtonMeshCreateNextLayer$MH, "NewtonMeshCreateNextLayer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, segment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetTotalFaceCount$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetTotalFaceCount$MH,"NewtonMeshGetTotalFaceCount");
    }
    public static int NewtonMeshGetTotalFaceCount ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetTotalFaceCount$MH, "NewtonMeshGetTotalFaceCount");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetTotalIndexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetTotalIndexCount$MH,"NewtonMeshGetTotalIndexCount");
    }
    public static int NewtonMeshGetTotalIndexCount ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetTotalIndexCount$MH, "NewtonMeshGetTotalIndexCount");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFaces$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetFaces$MH,"NewtonMeshGetFaces");
    }
    public static void NewtonMeshGetFaces ( Addressable mesh,  Addressable faceIndexCount,  Addressable faceMaterial,  Addressable faceIndices) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetFaces$MH, "NewtonMeshGetFaces");
        try {
            mh$.invokeExact(mesh, faceIndexCount, faceMaterial, faceIndices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetVertexCount$MH,"NewtonMeshGetVertexCount");
    }
    public static int NewtonMeshGetVertexCount ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetVertexCount$MH, "NewtonMeshGetVertexCount");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexStrideInByte$MH() {
        return RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetVertexStrideInByte$MH,"NewtonMeshGetVertexStrideInByte");
    }
    public static int NewtonMeshGetVertexStrideInByte ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$99.NewtonMeshGetVertexStrideInByte$MH, "NewtonMeshGetVertexStrideInByte");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexArray$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetVertexArray$MH,"NewtonMeshGetVertexArray");
    }
    public static MemoryAddress NewtonMeshGetVertexArray ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetVertexArray$MH, "NewtonMeshGetVertexArray");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexBaseCount$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetVertexBaseCount$MH,"NewtonMeshGetVertexBaseCount");
    }
    public static int NewtonMeshGetVertexBaseCount ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetVertexBaseCount$MH, "NewtonMeshGetVertexBaseCount");
        try {
            return (int)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSetVertexBaseCount$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonMeshSetVertexBaseCount$MH,"NewtonMeshSetVertexBaseCount");
    }
    public static void NewtonMeshSetVertexBaseCount ( Addressable mesh,  int baseCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.NewtonMeshSetVertexBaseCount$MH, "NewtonMeshSetVertexBaseCount");
        try {
            mh$.invokeExact(mesh, baseCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFirstVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetFirstVertex$MH,"NewtonMeshGetFirstVertex");
    }
    public static MemoryAddress NewtonMeshGetFirstVertex ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetFirstVertex$MH, "NewtonMeshGetFirstVertex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNextVertex$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetNextVertex$MH,"NewtonMeshGetNextVertex");
    }
    public static MemoryAddress NewtonMeshGetNextVertex ( Addressable mesh,  Addressable vertex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetNextVertex$MH, "NewtonMeshGetNextVertex");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetVertexIndex$MH,"NewtonMeshGetVertexIndex");
    }
    public static int NewtonMeshGetVertexIndex ( Addressable mesh,  Addressable vertex) {
        var mh$ = RuntimeHelper.requireNonNull(constants$100.NewtonMeshGetVertexIndex$MH, "NewtonMeshGetVertexIndex");
        try {
            return (int)mh$.invokeExact(mesh, vertex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFirstPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetFirstPoint$MH,"NewtonMeshGetFirstPoint");
    }
    public static MemoryAddress NewtonMeshGetFirstPoint ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetFirstPoint$MH, "NewtonMeshGetFirstPoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNextPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetNextPoint$MH,"NewtonMeshGetNextPoint");
    }
    public static MemoryAddress NewtonMeshGetNextPoint ( Addressable mesh,  Addressable point) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetNextPoint$MH, "NewtonMeshGetNextPoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetPointIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetPointIndex$MH,"NewtonMeshGetPointIndex");
    }
    public static int NewtonMeshGetPointIndex ( Addressable mesh,  Addressable point) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetPointIndex$MH, "NewtonMeshGetPointIndex");
        try {
            return (int)mh$.invokeExact(mesh, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetVertexIndexFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetVertexIndexFromPoint$MH,"NewtonMeshGetVertexIndexFromPoint");
    }
    public static int NewtonMeshGetVertexIndexFromPoint ( Addressable mesh,  Addressable point) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetVertexIndexFromPoint$MH, "NewtonMeshGetVertexIndexFromPoint");
        try {
            return (int)mh$.invokeExact(mesh, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFirstEdge$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetFirstEdge$MH,"NewtonMeshGetFirstEdge");
    }
    public static MemoryAddress NewtonMeshGetFirstEdge ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetFirstEdge$MH, "NewtonMeshGetFirstEdge");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNextEdge$MH() {
        return RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetNextEdge$MH,"NewtonMeshGetNextEdge");
    }
    public static MemoryAddress NewtonMeshGetNextEdge ( Addressable mesh,  Addressable edge) {
        var mh$ = RuntimeHelper.requireNonNull(constants$101.NewtonMeshGetNextEdge$MH, "NewtonMeshGetNextEdge");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, edge);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetEdgeIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetEdgeIndices$MH,"NewtonMeshGetEdgeIndices");
    }
    public static void NewtonMeshGetEdgeIndices ( Addressable mesh,  Addressable edge,  Addressable v0,  Addressable v1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetEdgeIndices$MH, "NewtonMeshGetEdgeIndices");
        try {
            mh$.invokeExact(mesh, edge, v0, v1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFirstFace$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetFirstFace$MH,"NewtonMeshGetFirstFace");
    }
    public static MemoryAddress NewtonMeshGetFirstFace ( Addressable mesh) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetFirstFace$MH, "NewtonMeshGetFirstFace");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetNextFace$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetNextFace$MH,"NewtonMeshGetNextFace");
    }
    public static MemoryAddress NewtonMeshGetNextFace ( Addressable mesh,  Addressable face) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetNextFace$MH, "NewtonMeshGetNextFace");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(mesh, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshIsFaceOpen$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonMeshIsFaceOpen$MH,"NewtonMeshIsFaceOpen");
    }
    public static int NewtonMeshIsFaceOpen ( Addressable mesh,  Addressable face) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.NewtonMeshIsFaceOpen$MH, "NewtonMeshIsFaceOpen");
        try {
            return (int)mh$.invokeExact(mesh, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFaceMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetFaceMaterial$MH,"NewtonMeshGetFaceMaterial");
    }
    public static int NewtonMeshGetFaceMaterial ( Addressable mesh,  Addressable face) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetFaceMaterial$MH, "NewtonMeshGetFaceMaterial");
        try {
            return (int)mh$.invokeExact(mesh, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFaceIndexCount$MH() {
        return RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetFaceIndexCount$MH,"NewtonMeshGetFaceIndexCount");
    }
    public static int NewtonMeshGetFaceIndexCount ( Addressable mesh,  Addressable face) {
        var mh$ = RuntimeHelper.requireNonNull(constants$102.NewtonMeshGetFaceIndexCount$MH, "NewtonMeshGetFaceIndexCount");
        try {
            return (int)mh$.invokeExact(mesh, face);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFaceIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$103.NewtonMeshGetFaceIndices$MH,"NewtonMeshGetFaceIndices");
    }
    public static void NewtonMeshGetFaceIndices ( Addressable mesh,  Addressable face,  Addressable indices) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.NewtonMeshGetFaceIndices$MH, "NewtonMeshGetFaceIndices");
        try {
            mh$.invokeExact(mesh, face, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshGetFacePointIndices$MH() {
        return RuntimeHelper.requireNonNull(constants$103.NewtonMeshGetFacePointIndices$MH,"NewtonMeshGetFacePointIndices");
    }
    public static void NewtonMeshGetFacePointIndices ( Addressable mesh,  Addressable face,  Addressable indices) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.NewtonMeshGetFacePointIndices$MH, "NewtonMeshGetFacePointIndices");
        try {
            mh$.invokeExact(mesh, face, indices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshCalculateFaceNormal$MH() {
        return RuntimeHelper.requireNonNull(constants$103.NewtonMeshCalculateFaceNormal$MH,"NewtonMeshCalculateFaceNormal");
    }
    public static void NewtonMeshCalculateFaceNormal ( Addressable mesh,  Addressable face,  Addressable normal) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.NewtonMeshCalculateFaceNormal$MH, "NewtonMeshCalculateFaceNormal");
        try {
            mh$.invokeExact(mesh, face, normal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NewtonMeshSetFaceMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$103.NewtonMeshSetFaceMaterial$MH,"NewtonMeshSetFaceMaterial");
    }
    public static void NewtonMeshSetFaceMaterial ( Addressable mesh,  Addressable face,  int matId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$103.NewtonMeshSetFaceMaterial$MH, "NewtonMeshSetFaceMaterial");
        try {
            mh$.invokeExact(mesh, face, matId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


