// Generated by jextract

package crab.newton;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * struct NewtonHingeSliderUpdateDesc {
 *     float m_accel;
 *     float m_minFriction;
 *     float m_maxFriction;
 *     float m_timestep;
 * };
 * }
 */
public class NewtonHingeSliderUpdateDesc {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("m_accel"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_minFriction"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_maxFriction"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_timestep")
    ).withName("NewtonHingeSliderUpdateDesc");
    public static MemoryLayout $LAYOUT() {
        return NewtonHingeSliderUpdateDesc.$struct$LAYOUT;
    }
    static final VarHandle m_accel$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_accel"));
    public static VarHandle m_accel$VH() {
        return NewtonHingeSliderUpdateDesc.m_accel$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float m_accel;
     * }
     */
    public static float m_accel$get(MemorySegment seg) {
        return (float)NewtonHingeSliderUpdateDesc.m_accel$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float m_accel;
     * }
     */
    public static void m_accel$set(MemorySegment seg, float x) {
        NewtonHingeSliderUpdateDesc.m_accel$VH.set(seg, x);
    }
    public static float m_accel$get(MemorySegment seg, long index) {
        return (float)NewtonHingeSliderUpdateDesc.m_accel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_accel$set(MemorySegment seg, long index, float x) {
        NewtonHingeSliderUpdateDesc.m_accel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_minFriction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_minFriction"));
    public static VarHandle m_minFriction$VH() {
        return NewtonHingeSliderUpdateDesc.m_minFriction$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float m_minFriction;
     * }
     */
    public static float m_minFriction$get(MemorySegment seg) {
        return (float)NewtonHingeSliderUpdateDesc.m_minFriction$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float m_minFriction;
     * }
     */
    public static void m_minFriction$set(MemorySegment seg, float x) {
        NewtonHingeSliderUpdateDesc.m_minFriction$VH.set(seg, x);
    }
    public static float m_minFriction$get(MemorySegment seg, long index) {
        return (float)NewtonHingeSliderUpdateDesc.m_minFriction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_minFriction$set(MemorySegment seg, long index, float x) {
        NewtonHingeSliderUpdateDesc.m_minFriction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_maxFriction$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_maxFriction"));
    public static VarHandle m_maxFriction$VH() {
        return NewtonHingeSliderUpdateDesc.m_maxFriction$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float m_maxFriction;
     * }
     */
    public static float m_maxFriction$get(MemorySegment seg) {
        return (float)NewtonHingeSliderUpdateDesc.m_maxFriction$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float m_maxFriction;
     * }
     */
    public static void m_maxFriction$set(MemorySegment seg, float x) {
        NewtonHingeSliderUpdateDesc.m_maxFriction$VH.set(seg, x);
    }
    public static float m_maxFriction$get(MemorySegment seg, long index) {
        return (float)NewtonHingeSliderUpdateDesc.m_maxFriction$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_maxFriction$set(MemorySegment seg, long index, float x) {
        NewtonHingeSliderUpdateDesc.m_maxFriction$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_timestep$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_timestep"));
    public static VarHandle m_timestep$VH() {
        return NewtonHingeSliderUpdateDesc.m_timestep$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float m_timestep;
     * }
     */
    public static float m_timestep$get(MemorySegment seg) {
        return (float)NewtonHingeSliderUpdateDesc.m_timestep$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float m_timestep;
     * }
     */
    public static void m_timestep$set(MemorySegment seg, float x) {
        NewtonHingeSliderUpdateDesc.m_timestep$VH.set(seg, x);
    }
    public static float m_timestep$get(MemorySegment seg, long index) {
        return (float)NewtonHingeSliderUpdateDesc.m_timestep$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_timestep$set(MemorySegment seg, long index, float x) {
        NewtonHingeSliderUpdateDesc.m_timestep$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


