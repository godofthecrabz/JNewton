// Generated by jextract

package crab.newton.internal;

import java.lang.invoke.MethodHandle;
import java.lang.foreign.*;
import crab.newton.callbacks.*;
public final class constants$13 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$13() {}
    public static final FunctionDescriptor NewtonOnAABBOverlap$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final FunctionDescriptor NewtonOnAABBOverlap_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonOnAABBOverlap_UP$MH = RuntimeHelper.upcallHandle(NewtonOnAABBOverlap.class, "apply", constants$13.NewtonOnAABBOverlap_UP$FUNC);
    public static final FunctionDescriptor NewtonOnAABBOverlap_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonOnAABBOverlap_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$13.NewtonOnAABBOverlap_DOWN$FUNC
    );
    public static final FunctionDescriptor NewtonContactsProcess$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final FunctionDescriptor NewtonContactsProcess_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonContactsProcess_UP$MH = RuntimeHelper.upcallHandle(NewtonContactsProcess.class, "apply", constants$13.NewtonContactsProcess_UP$FUNC);
    public static final FunctionDescriptor NewtonContactsProcess_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonContactsProcess_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$13.NewtonContactsProcess_DOWN$FUNC
    );
    public static final FunctionDescriptor NewtonOnCompoundSubCollisionAABBOverlap$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final FunctionDescriptor NewtonOnCompoundSubCollisionAABBOverlap_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonOnCompoundSubCollisionAABBOverlap_UP$MH = RuntimeHelper.upcallHandle(NewtonOnCompoundSubCollisionAABBOverlap.class, "apply", constants$13.NewtonOnCompoundSubCollisionAABBOverlap_UP$FUNC);
    public static final FunctionDescriptor NewtonOnCompoundSubCollisionAABBOverlap_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonOnCompoundSubCollisionAABBOverlap_DOWN$MH = RuntimeHelper.downcallHandle(
        constants$13.NewtonOnCompoundSubCollisionAABBOverlap_DOWN$FUNC
    );
}


