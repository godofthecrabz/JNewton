// Generated by jextract
package crab.newton.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class constants$55 {

    public static final FunctionDescriptor NewtonCollisionGetSkinThickness$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    public static final MethodHandle NewtonCollisionGetSkinThickness$MH = RuntimeHelper.downcallHandle(
        "NewtonCollisionGetSkinThickness",
        constants$55.NewtonCollisionGetSkinThickness$FUNC
    );
    public static final FunctionDescriptor NewtonCollisionSetSkinThickness$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    public static final MethodHandle NewtonCollisionSetSkinThickness$MH = RuntimeHelper.downcallHandle(
        "NewtonCollisionSetSkinThickness",
        constants$55.NewtonCollisionSetSkinThickness$FUNC
    );
    public static final FunctionDescriptor NewtonCollisionIntersectionTest$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonCollisionIntersectionTest$MH = RuntimeHelper.downcallHandle(
        "NewtonCollisionIntersectionTest",
        constants$55.NewtonCollisionIntersectionTest$FUNC
    );
    public static final FunctionDescriptor NewtonCollisionPointDistance$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonCollisionPointDistance$MH = RuntimeHelper.downcallHandle(
        "NewtonCollisionPointDistance",
        constants$55.NewtonCollisionPointDistance$FUNC
    );
    public static final FunctionDescriptor NewtonCollisionClosestPoint$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonCollisionClosestPoint$MH = RuntimeHelper.downcallHandle(
        "NewtonCollisionClosestPoint",
        constants$55.NewtonCollisionClosestPoint$FUNC
    );
    public static final FunctionDescriptor NewtonCollisionCollide$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    public static final MethodHandle NewtonCollisionCollide$MH = RuntimeHelper.downcallHandle(
        "NewtonCollisionCollide",
        constants$55.NewtonCollisionCollide$FUNC
    );
}


