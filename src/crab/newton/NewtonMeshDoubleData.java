// Generated by jextract

package crab.newton;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * struct NewtonMeshDoubleData {
 *     double* m_data;
 *     int* m_indexList;
 *     int m_strideInBytes;
 * };
 * }
 */
public class NewtonMeshDoubleData {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("m_data"),
        Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
        Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
        MemoryLayout.paddingLayout(32)
    ).withName("NewtonMeshDoubleData");
    public static MemoryLayout $LAYOUT() {
        return NewtonMeshDoubleData.$struct$LAYOUT;
    }
    static final VarHandle m_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_data"));
    public static VarHandle m_data$VH() {
        return NewtonMeshDoubleData.m_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double* m_data;
     * }
     */
    public static MemorySegment m_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonMeshDoubleData.m_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double* m_data;
     * }
     */
    public static void m_data$set(MemorySegment seg, MemorySegment x) {
        NewtonMeshDoubleData.m_data$VH.set(seg, x);
    }
    public static MemorySegment m_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonMeshDoubleData.m_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_data$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonMeshDoubleData.m_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_indexList$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_indexList"));
    public static VarHandle m_indexList$VH() {
        return NewtonMeshDoubleData.m_indexList$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int* m_indexList;
     * }
     */
    public static MemorySegment m_indexList$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonMeshDoubleData.m_indexList$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int* m_indexList;
     * }
     */
    public static void m_indexList$set(MemorySegment seg, MemorySegment x) {
        NewtonMeshDoubleData.m_indexList$VH.set(seg, x);
    }
    public static MemorySegment m_indexList$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonMeshDoubleData.m_indexList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_indexList$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonMeshDoubleData.m_indexList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_strideInBytes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_strideInBytes"));
    public static VarHandle m_strideInBytes$VH() {
        return NewtonMeshDoubleData.m_strideInBytes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int m_strideInBytes;
     * }
     */
    public static int m_strideInBytes$get(MemorySegment seg) {
        return (int)NewtonMeshDoubleData.m_strideInBytes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int m_strideInBytes;
     * }
     */
    public static void m_strideInBytes$set(MemorySegment seg, int x) {
        NewtonMeshDoubleData.m_strideInBytes$VH.set(seg, x);
    }
    public static int m_strideInBytes$get(MemorySegment seg, long index) {
        return (int)NewtonMeshDoubleData.m_strideInBytes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_strideInBytes$set(MemorySegment seg, long index, int x) {
        NewtonMeshDoubleData.m_strideInBytes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


