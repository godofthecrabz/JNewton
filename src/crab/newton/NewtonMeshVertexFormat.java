// Generated by jextract

package crab.newton;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import crab.newton.internal.*;
/**
 * {@snippet :
 * struct NewtonMeshVertexFormat {
 *     int m_faceCount;
 *     int* m_faceIndexCount;
 *     int* m_faceMaterial;
 *     struct NewtonMeshDoubleData m_vertex;
 *     struct NewtonMeshFloatData m_normal;
 *     struct NewtonMeshFloatData m_binormal;
 *     struct NewtonMeshFloatData m_uv0;
 *     struct NewtonMeshFloatData m_uv1;
 *     struct NewtonMeshFloatData m_vertexColor;
 * };
 * }
 */
public class NewtonMeshVertexFormat {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("m_faceCount"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("m_faceIndexCount"),
        Constants$root.C_POINTER$LAYOUT.withName("m_faceMaterial"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_vertex"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_normal"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_binormal"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_uv0"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_uv1"),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("m_data"),
            Constants$root.C_POINTER$LAYOUT.withName("m_indexList"),
            Constants$root.C_LONG$LAYOUT.withName("m_strideInBytes"),
            MemoryLayout.paddingLayout(32)
        ).withName("m_vertexColor")
    ).withName("NewtonMeshVertexFormat");
    public static MemoryLayout $LAYOUT() {
        return NewtonMeshVertexFormat.$struct$LAYOUT;
    }
    static final VarHandle m_faceCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceCount"));
    public static VarHandle m_faceCount$VH() {
        return NewtonMeshVertexFormat.m_faceCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int m_faceCount;
     * }
     */
    public static int m_faceCount$get(MemorySegment seg) {
        return (int)NewtonMeshVertexFormat.m_faceCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int m_faceCount;
     * }
     */
    public static void m_faceCount$set(MemorySegment seg, int x) {
        NewtonMeshVertexFormat.m_faceCount$VH.set(seg, x);
    }
    public static int m_faceCount$get(MemorySegment seg, long index) {
        return (int)NewtonMeshVertexFormat.m_faceCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceCount$set(MemorySegment seg, long index, int x) {
        NewtonMeshVertexFormat.m_faceCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_faceIndexCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceIndexCount"));
    public static VarHandle m_faceIndexCount$VH() {
        return NewtonMeshVertexFormat.m_faceIndexCount$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int* m_faceIndexCount;
     * }
     */
    public static MemorySegment m_faceIndexCount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonMeshVertexFormat.m_faceIndexCount$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int* m_faceIndexCount;
     * }
     */
    public static void m_faceIndexCount$set(MemorySegment seg, MemorySegment x) {
        NewtonMeshVertexFormat.m_faceIndexCount$VH.set(seg, x);
    }
    public static MemorySegment m_faceIndexCount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonMeshVertexFormat.m_faceIndexCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceIndexCount$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonMeshVertexFormat.m_faceIndexCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_faceMaterial$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_faceMaterial"));
    public static VarHandle m_faceMaterial$VH() {
        return NewtonMeshVertexFormat.m_faceMaterial$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int* m_faceMaterial;
     * }
     */
    public static MemorySegment m_faceMaterial$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)NewtonMeshVertexFormat.m_faceMaterial$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int* m_faceMaterial;
     * }
     */
    public static void m_faceMaterial$set(MemorySegment seg, MemorySegment x) {
        NewtonMeshVertexFormat.m_faceMaterial$VH.set(seg, x);
    }
    public static MemorySegment m_faceMaterial$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)NewtonMeshVertexFormat.m_faceMaterial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_faceMaterial$set(MemorySegment seg, long index, MemorySegment x) {
        NewtonMeshVertexFormat.m_faceMaterial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment m_vertex$slice(MemorySegment seg) {
        return seg.asSlice(24, 24);
    }
    public static MemorySegment m_normal$slice(MemorySegment seg) {
        return seg.asSlice(48, 24);
    }
    public static MemorySegment m_binormal$slice(MemorySegment seg) {
        return seg.asSlice(72, 24);
    }
    public static MemorySegment m_uv0$slice(MemorySegment seg) {
        return seg.asSlice(96, 24);
    }
    public static MemorySegment m_uv1$slice(MemorySegment seg) {
        return seg.asSlice(120, 24);
    }
    public static MemorySegment m_vertexColor$slice(MemorySegment seg) {
        return seg.asSlice(144, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


